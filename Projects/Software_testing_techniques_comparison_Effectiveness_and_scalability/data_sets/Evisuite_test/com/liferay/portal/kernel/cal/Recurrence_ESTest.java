/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 08 23:38:08 GMT 2017
 */

package com.liferay.portal.kernel.cal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.liferay.portal.kernel.cal.DayAndPosition;
import com.liferay.portal.kernel.cal.Duration;
import com.liferay.portal.kernel.cal.Recurrence;
import java.time.ZonedDateTime;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Recurrence_ESTest extends Recurrence_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertNotNull(calendar0);
      
      int[] intArray0 = new int[9];
      intArray0[1] = 2316;
      boolean boolean0 = Recurrence.matchesByField(intArray0, 3, calendar0, false);
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertArrayEquals(new int[] {0, 2316, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Locale locale0 = new Locale("");
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertNotNull(calendar0);
      
      Duration duration0 = new Duration(3112);
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(941924352L, duration0.getInterval());
      assertEquals(3112, duration0.getWeeks());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(calendar0, duration0);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(941924352L, duration0.getInterval());
      assertEquals(3112, duration0.getWeeks());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertNotNull(recurrence0);
      
      int[] intArray0 = new int[5];
      intArray0[2] = 5;
      recurrence0.setByMonthDay(intArray0);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(941924352L, duration0.getInterval());
      assertEquals(3112, duration0.getWeeks());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertArrayEquals(new int[] {0, 0, 5, 0, 0}, intArray0);
      
      boolean boolean0 = recurrence0.matchesByMonthDay(calendar0);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(941924352L, duration0.getInterval());
      assertEquals(3112, duration0.getWeeks());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertNotNull(calendar0);
      
      Duration duration0 = new Duration();
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0L, duration0.getInterval());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(calendar0, duration0);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertNotNull(recurrence0);
      
      DayAndPosition dayAndPosition0 = new DayAndPosition(7, 6);
      assertEquals(0, DayAndPosition.NO_WEEKDAY);
      assertEquals(6, dayAndPosition0.getDayPosition());
      assertEquals(7, dayAndPosition0.getDayOfWeek());
      assertNotNull(dayAndPosition0);
      
      boolean boolean0 = recurrence0.matchesIndividualByDay(calendar0, dayAndPosition0);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(0, DayAndPosition.NO_WEEKDAY);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(6, dayAndPosition0.getDayPosition());
      assertEquals(7, dayAndPosition0.getDayOfWeek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration(59, 604800000, 59, 604800000);
      assertEquals(59, duration0.getMinutes());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-2115315680L), duration0.getInterval());
      assertEquals(604800000, duration0.getHours());
      assertEquals(604800000, duration0.getSeconds());
      assertEquals(59, duration0.getDays());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(59, duration0.getMinutes());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-2115315680L), duration0.getInterval());
      assertEquals(604800000, duration0.getHours());
      assertEquals(604800000, duration0.getSeconds());
      assertEquals(59, duration0.getDays());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(1, recurrence0.getInterval());
      assertNotNull(recurrence0);
      
      Calendar calendar0 = recurrence0.getDtEnd();
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertFalse(calendar0.equals((Object)mockGregorianCalendar0));
      assertNotSame(mockGregorianCalendar0, calendar0);
      assertNotSame(calendar0, mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(59, duration0.getMinutes());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-2115315680L), duration0.getInterval());
      assertEquals(604800000, duration0.getHours());
      assertEquals(604800000, duration0.getSeconds());
      assertEquals(59, duration0.getDays());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1390293965640,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=21,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=46,SECOND=5,MILLISECOND=640,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertNotNull(calendar0);
      
      Recurrence.reduce_day_of_month(mockGregorianCalendar0, calendar0);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertFalse(mockGregorianCalendar0.equals((Object)calendar0));
      assertFalse(calendar0.equals((Object)mockGregorianCalendar0));
      assertNotSame(mockGregorianCalendar0, calendar0);
      assertNotSame(calendar0, mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(59, duration0.getMinutes());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-2115315680L), duration0.getInterval());
      assertEquals(604800000, duration0.getHours());
      assertEquals(604800000, duration0.getSeconds());
      assertEquals(59, duration0.getDays());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1389689165640,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=0,WEEK_OF_YEAR=3,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=14,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=46,SECOND=5,MILLISECOND=640,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      assertNotNull(zonedDateTime0);
      
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertNotNull(gregorianCalendar0);
      
      Duration duration0 = new Duration();
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getMinutes());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(gregorianCalendar0, duration0);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertNotNull(recurrence0);
      
      int[] intArray0 = new int[0];
      recurrence0.setByMonthDay(intArray0);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertArrayEquals(new int[] {}, intArray0);
      
      recurrence0.setFrequency(0);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      
      MockDate mockDate0 = new MockDate((-2146730672), (-1707), 46, 5, 1872, 7);
      assertEquals("Sat Apr 21 21:55:33 GMT 191443201", mockDate0.toString());
      assertNotNull(mockDate0);
      
      gregorianCalendar0.setTime(mockDate0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=6041301747112533464,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=191443201,MONTH=3,WEEK_OF_YEAR=16,WEEK_OF_MONTH=3,DAY_OF_MONTH=21,DAY_OF_YEAR=111,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=55,SECOND=33,MILLISECOND=464,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals("Sat Apr 21 21:55:33 GMT 191443201", mockDate0.toString());
      
      boolean boolean0 = recurrence0.isInRecurrence((Calendar) gregorianCalendar0, false);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=6041301747112533464,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=191443201,MONTH=3,WEEK_OF_YEAR=16,WEEK_OF_MONTH=3,DAY_OF_MONTH=21,DAY_OF_YEAR=111,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=55,SECOND=33,MILLISECOND=464,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertNotNull(mockGregorianCalendar0);
      
      Recurrence.reduce_constant_length_field(7, mockGregorianCalendar0, mockGregorianCalendar0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Locale locale0 = new Locale("");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertNotNull(locale0);
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertNotNull(calendar0);
      
      Duration duration0 = new Duration(3112);
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(3112, duration0.getWeeks());
      assertEquals(0, duration0.getDays());
      assertEquals(941924352L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(calendar0, duration0);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(3112, duration0.getWeeks());
      assertEquals(0, duration0.getDays());
      assertEquals(941924352L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertNotNull(recurrence0);
      
      recurrence0.setOccurrence((-681));
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(3112, duration0.getWeeks());
      assertEquals(0, duration0.getDays());
      assertEquals(941924352L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertEquals((-681), recurrence0.getOccurrence());
      
      boolean boolean0 = recurrence0.candidateIsInRecurrence(calendar0, false);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(3112, duration0.getWeeks());
      assertEquals(0, duration0.getDays());
      assertEquals(941924352L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertEquals((-681), recurrence0.getOccurrence());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-410), (-2851), 13, (-3122), (-3122), (-410));
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-410,MONTH=-2851,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3122,HOUR_OF_DAY=-3122,MINUTE=-3122,SECOND=-410,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration();
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-410,MONTH=-2851,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3122,HOUR_OF_DAY=-3122,MINUTE=-3122,SECOND=-410,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertNotNull(recurrence0);
      
      recurrence0.setUntil(mockGregorianCalendar0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-410,MONTH=-2851,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3122,HOUR_OF_DAY=-3122,MINUTE=-3122,SECOND=-410,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      
      int int0 = mockGregorianCalendar0.get(0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-82613974130000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=649,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=32,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=51,SECOND=10,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(0, int0);
      
      boolean boolean0 = recurrence0.candidateIsInRecurrence(mockGregorianCalendar0, false);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-82613974130000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=649,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=32,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=51,SECOND=10,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertNotNull(calendar0);
      
      Duration duration0 = new Duration();
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(calendar0, duration0);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(1, recurrence0.getInterval());
      assertNotNull(recurrence0);
      
      MockDate mockDate0 = new MockDate(7, 1417, (-1237), 0, (-1237));
      assertEquals("Sat Sep 11 03:23:00 GMT 2021", mockDate0.toString());
      assertNotNull(mockDate0);
      
      calendar0.setTime(mockDate0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1631330580000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2021,MONTH=8,WEEK_OF_YEAR=36,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=254,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=23,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals("Sat Sep 11 03:23:00 GMT 2021", mockDate0.toString());
      
      boolean boolean0 = recurrence0.isInRecurrence(calendar0);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1631330580000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2021,MONTH=8,WEEK_OF_YEAR=36,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=254,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=23,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(1, recurrence0.getInterval());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertNotNull(calendar0);
      
      Duration duration0 = new Duration(0, 0, 0, 0);
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0L, duration0.getInterval());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(calendar0, duration0);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0L, duration0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertNotNull(recurrence0);
      
      recurrence0.setInterval((-2860));
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0L, duration0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration(13, 554, (-498), 13);
      assertEquals((-1207234296L), duration0.getInterval());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-498), duration0.getMinutes());
      assertEquals(554, duration0.getHours());
      assertEquals(13, duration0.getSeconds());
      assertEquals(13, duration0.getDays());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0, 1878);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals((-1207234296L), duration0.getInterval());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-498), duration0.getMinutes());
      assertEquals(554, duration0.getHours());
      assertEquals(13, duration0.getSeconds());
      assertEquals(13, duration0.getDays());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1878, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertNotNull(recurrence0);
      
      // Undeclared exception!
      try { 
        recurrence0.setFrequency(554);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid frequency
         //
         verifyException("com.liferay.portal.kernel.cal.Recurrence", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      assertNotNull(zonedDateTime0);
      
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertNotNull(gregorianCalendar0);
      
      Duration duration0 = new Duration();
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getDays());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(gregorianCalendar0, duration0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getDays());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(0, recurrence0.getOccurrence());
      assertNotNull(recurrence0);
      
      recurrence0.setDuration(duration0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getDays());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(0, recurrence0.getOccurrence());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Locale locale0 = new Locale("");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertNotNull(calendar0);
      
      Duration duration0 = new Duration(3112);
      assertEquals(3112, duration0.getWeeks());
      assertEquals(0, duration0.getDays());
      assertEquals(941924352L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getHours());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(calendar0, duration0);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(3112, duration0.getWeeks());
      assertEquals(0, duration0.getDays());
      assertEquals(941924352L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getHours());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertNotNull(recurrence0);
      
      int[] intArray0 = new int[5];
      intArray0[1] = (-3273);
      recurrence0.setByMonthDay(intArray0);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(3112, duration0.getWeeks());
      assertEquals(0, duration0.getDays());
      assertEquals(941924352L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getHours());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertArrayEquals(new int[] {0, (-3273), 0, 0, 0}, intArray0);
      
      boolean boolean0 = recurrence0.matchesByMonthDay(calendar0);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(3112, duration0.getWeeks());
      assertEquals(0, duration0.getDays());
      assertEquals(941924352L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getHours());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertNotNull(locale0);
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertNotNull(calendar0);
      
      Duration duration0 = new Duration();
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getMinutes());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(calendar0, duration0);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getMinutes());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertNotNull(recurrence0);
      
      DayAndPosition dayAndPosition0 = new DayAndPosition(6, 0);
      assertEquals(0, DayAndPosition.NO_WEEKDAY);
      assertEquals(6, dayAndPosition0.getDayOfWeek());
      assertEquals(0, dayAndPosition0.getDayPosition());
      assertNotNull(dayAndPosition0);
      
      boolean boolean0 = recurrence0.matchesIndividualByDay(calendar0, dayAndPosition0);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(0, DayAndPosition.NO_WEEKDAY);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getMinutes());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(6, dayAndPosition0.getDayOfWeek());
      assertEquals(0, dayAndPosition0.getDayPosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 0, 2);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration(0, 2, 2, 2);
      assertEquals(0, duration0.getWeeks());
      assertEquals(2, duration0.getHours());
      assertEquals(0, duration0.getDays());
      assertEquals(2, duration0.getMinutes());
      assertEquals(7322000L, duration0.getInterval());
      assertEquals(2, duration0.getSeconds());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(0, duration0.getWeeks());
      assertEquals(2, duration0.getHours());
      assertEquals(0, duration0.getDays());
      assertEquals(2, duration0.getMinutes());
      assertEquals(7322000L, duration0.getInterval());
      assertEquals(2, duration0.getSeconds());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertNotNull(recurrence0);
      
      boolean boolean0 = recurrence0.matchesByYearDay(mockGregorianCalendar0);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(0, duration0.getWeeks());
      assertEquals(2, duration0.getHours());
      assertEquals(0, duration0.getDays());
      assertEquals(2, duration0.getMinutes());
      assertEquals(7322000L, duration0.getInterval());
      assertEquals(2, duration0.getSeconds());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertNotNull(calendar0);
      
      Duration duration0 = new Duration((-1645), (-1645), (-2));
      assertEquals((-1645), duration0.getHours());
      assertEquals((-2), duration0.getSeconds());
      assertEquals((-1645), duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-1725734704L), duration0.getInterval());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(calendar0, duration0, 2669);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals((-1645), duration0.getHours());
      assertEquals((-2), duration0.getSeconds());
      assertEquals((-1645), duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-1725734704L), duration0.getInterval());
      assertEquals(2669, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertNotNull(recurrence0);
      
      int[] intArray0 = new int[3];
      recurrence0.setByYearDay(intArray0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals((-1645), duration0.getHours());
      assertEquals((-2), duration0.getSeconds());
      assertEquals((-1645), duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-1725734704L), duration0.getInterval());
      assertEquals(2669, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      boolean boolean0 = recurrence0.matchesByYearDay(calendar0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals((-1645), duration0.getHours());
      assertEquals((-2), duration0.getSeconds());
      assertEquals((-1645), duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-1725734704L), duration0.getInterval());
      assertEquals(2669, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration(0);
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(1, recurrence0.getInterval());
      assertNotNull(recurrence0);
      
      boolean boolean0 = recurrence0.matchesByWeekNo(mockGregorianCalendar0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(1, recurrence0.getInterval());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(640, 640, 2316, 93, 640);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=640,MONTH=640,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2316,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=93,HOUR_OF_DAY=93,MINUTE=640,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration(93, 11, 678, (-4459));
      assertEquals(678, duration0.getMinutes());
      assertEquals(11, duration0.getHours());
      assertEquals(93, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-478913592L), duration0.getInterval());
      assertEquals((-4459), duration0.getSeconds());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=640,MONTH=640,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2316,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=93,HOUR_OF_DAY=93,MINUTE=640,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(678, duration0.getMinutes());
      assertEquals(11, duration0.getHours());
      assertEquals(93, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-478913592L), duration0.getInterval());
      assertEquals((-4459), duration0.getSeconds());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertNotNull(recurrence0);
      
      int[] intArray0 = new int[1];
      recurrence0.setByWeekNo(intArray0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=640,MONTH=640,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2316,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=93,HOUR_OF_DAY=93,MINUTE=640,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(678, duration0.getMinutes());
      assertEquals(11, duration0.getHours());
      assertEquals(93, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-478913592L), duration0.getInterval());
      assertEquals((-4459), duration0.getSeconds());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertArrayEquals(new int[] {0}, intArray0);
      
      boolean boolean0 = recurrence0.matchesByWeekNo(mockGregorianCalendar0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-40087153200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=699,MONTH=8,WEEK_OF_YEAR=36,WEEK_OF_MONTH=1,DAY_OF_MONTH=6,DAY_OF_YEAR=249,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=40,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(678, duration0.getMinutes());
      assertEquals(11, duration0.getHours());
      assertEquals(93, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-478913592L), duration0.getInterval());
      assertEquals((-4459), duration0.getSeconds());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertNotNull(calendar0);
      
      Duration duration0 = new Duration();
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(calendar0, duration0);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertNotNull(recurrence0);
      
      boolean boolean0 = recurrence0.matchesByMonth(calendar0);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertNotNull(calendar0);
      
      Duration duration0 = new Duration(16, 0, 0, 0);
      assertEquals(16, duration0.getDays());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(1382400000L, duration0.getInterval());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(calendar0, duration0, 93);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(16, duration0.getDays());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(1382400000L, duration0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(93, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertNotNull(recurrence0);
      
      boolean boolean0 = recurrence0.isInRecurrence(calendar0);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(16, duration0.getDays());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(1382400000L, duration0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(93, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(calendar0.isLenient());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertNotNull(calendar0);
      
      Duration duration0 = new Duration();
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(calendar0, duration0);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(calendar0.isLenient());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertNotNull(recurrence0);
      
      boolean boolean0 = recurrence0.isInRecurrence(calendar0);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(calendar0.isLenient());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertNotNull(calendar0);
      
      Duration duration0 = new Duration(0, 0, 0, 0);
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getMinutes());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(calendar0, duration0);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getMinutes());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertNotNull(recurrence0);
      
      recurrence0.setWeekStart(0);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getMinutes());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(0, recurrence0.getWeekStart());
      
      int int0 = recurrence0.getWeekStart();
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getMinutes());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(0, recurrence0.getWeekStart());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      assertNotNull(zonedDateTime0);
      
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertNotNull(gregorianCalendar0);
      
      Duration duration0 = new Duration();
      assertEquals(0, duration0.getDays());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(gregorianCalendar0, duration0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(0, duration0.getDays());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertNotNull(recurrence0);
      
      recurrence0.setWeekStart((-4128));
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(0, duration0.getDays());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals((-4128), recurrence0.getWeekStart());
      
      int int0 = recurrence0.getWeekStart();
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(0, duration0.getDays());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals((-4128), recurrence0.getWeekStart());
      assertEquals((-4128), int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      System.setCurrentTimeMillis(1000L);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=1,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      long long0 = Recurrence.getWeekNumber(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=1,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertNotNull(locale0);
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertNotNull(calendar0);
      
      long long0 = Recurrence.getWeekNumber(calendar0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertEquals(2302L, long0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      assertNotNull(zonedDateTime0);
      
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertNotNull(gregorianCalendar0);
      
      gregorianCalendar0.clear();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertTrue(gregorianCalendar0.isLenient());
      
      long long0 = Recurrence.getMonthNumber(gregorianCalendar0);
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(mockGregorianCalendar0);
      
      long long0 = Recurrence.getMonthNumber(mockGregorianCalendar0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(529L, long0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(7, 14, (-53));
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=7,MONTH=14,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-53,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      long long0 = Recurrence.getMonthNumber(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-61914412800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=8,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=7,DAY_OF_YEAR=7,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals((-23544L), long0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-982), (-982), (-982));
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-982,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-982,HOUR_OF_DAY=-982,MINUTE=-982,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration();
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0, (-982));
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-982,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-982,HOUR_OF_DAY=-982,MINUTE=-982,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals((-982), recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertNotNull(recurrence0);
      
      recurrence0.interval = 0;
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-982,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-982,HOUR_OF_DAY=-982,MINUTE=-982,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals((-982), recurrence0.getFrequency());
      assertEquals(0, recurrence0.getInterval());
      
      int int0 = recurrence0.getInterval();
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-982,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-982,HOUR_OF_DAY=-982,MINUTE=-982,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals((-982), recurrence0.getFrequency());
      assertEquals(0, recurrence0.getInterval());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration(0);
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertNotNull(recurrence0);
      
      recurrence0.interval = (-1288);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals((-1288), recurrence0.getInterval());
      
      int int0 = recurrence0.getInterval();
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals((-1288), recurrence0.getInterval());
      assertEquals((-1288), int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(130, (-5321), 0, (-53), 0, (-53));
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=130,MONTH=-5321,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-53,HOUR_OF_DAY=-53,MINUTE=0,SECOND=-53,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration((-816), 1, (-885));
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-816), duration0.getHours());
      assertEquals(1, duration0.getMinutes());
      assertEquals(1356542296L, duration0.getInterval());
      assertEquals((-885), duration0.getSeconds());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0, 0);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=130,MONTH=-5321,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-53,HOUR_OF_DAY=-53,MINUTE=0,SECOND=-53,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-816), duration0.getHours());
      assertEquals(1, duration0.getMinutes());
      assertEquals(1356542296L, duration0.getInterval());
      assertEquals((-885), duration0.getSeconds());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(0, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertNotNull(recurrence0);
      
      int int0 = recurrence0.getFrequency();
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=130,MONTH=-5321,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-53,HOUR_OF_DAY=-53,MINUTE=0,SECOND=-53,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-816), duration0.getHours());
      assertEquals(1, duration0.getMinutes());
      assertEquals(1356542296L, duration0.getInterval());
      assertEquals((-885), duration0.getSeconds());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(0, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration();
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0, (-2722));
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals((-2722), recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertNotNull(recurrence0);
      
      int int0 = recurrence0.getFrequency();
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals((-2722), recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertEquals((-2722), int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertNotNull(calendar0);
      
      Duration duration0 = new Duration((-1666), (-1666), (-2));
      assertEquals((-1666), duration0.getMinutes());
      assertEquals((-1802594704L), duration0.getInterval());
      assertEquals((-1666), duration0.getHours());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-2), duration0.getSeconds());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(calendar0, duration0, 2669);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals((-1666), duration0.getMinutes());
      assertEquals((-1802594704L), duration0.getInterval());
      assertEquals((-1666), duration0.getHours());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-2), duration0.getSeconds());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(2669, recurrence0.getFrequency());
      assertNotNull(recurrence0);
      
      Duration duration1 = recurrence0.getDuration();
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertFalse(duration1.equals((Object)duration0));
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals((-1666), duration0.getMinutes());
      assertEquals((-1802594704L), duration0.getInterval());
      assertEquals((-1666), duration0.getHours());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-2), duration0.getSeconds());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(2669, recurrence0.getFrequency());
      assertEquals(0, duration1.getDays());
      assertEquals((-1802594704L), duration1.getInterval());
      assertEquals((-1666), duration1.getMinutes());
      assertEquals((-2), duration1.getSeconds());
      assertEquals((-1666), duration1.getHours());
      assertEquals(0, duration1.getWeeks());
      assertNotNull(duration1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertNotNull(calendar0);
      
      Duration duration0 = new Duration(0);
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(calendar0, duration0);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(0, recurrence0.getOccurrence());
      assertNotNull(recurrence0);
      
      Duration duration1 = recurrence0.getDuration();
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertFalse(duration1.equals((Object)duration0));
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(0, duration1.getDays());
      assertEquals(0, duration1.getHours());
      assertEquals(0, duration1.getSeconds());
      assertEquals(0, duration1.getWeeks());
      assertEquals(0L, duration1.getInterval());
      assertEquals(0, duration1.getMinutes());
      assertNotNull(duration1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Locale locale0 = new Locale("");
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertNotNull(calendar0);
      
      Duration duration0 = new Duration(3112);
      assertEquals(941924352L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(3112, duration0.getWeeks());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getMinutes());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(calendar0, duration0);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(941924352L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(3112, duration0.getWeeks());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getMinutes());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertNotNull(recurrence0);
      
      Duration duration1 = recurrence0.getDuration();
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertFalse(duration1.equals((Object)duration0));
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(941924352L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(3112, duration0.getWeeks());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getMinutes());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(0, duration1.getDays());
      assertEquals(3112, duration1.getWeeks());
      assertEquals(0, duration1.getHours());
      assertEquals(0, duration1.getSeconds());
      assertEquals(941924352L, duration1.getInterval());
      assertEquals(0, duration1.getMinutes());
      assertNotNull(duration1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(640, 640, 2316, 93, 640);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=640,MONTH=640,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2316,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=93,HOUR_OF_DAY=93,MINUTE=640,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration((-3896), 11, 678, (-4459));
      assertEquals((-3896), duration0.getDays());
      assertEquals(11, duration0.getHours());
      assertEquals((-4459), duration0.getSeconds());
      assertEquals(678, duration0.getMinutes());
      assertEquals((-1531129912L), duration0.getInterval());
      assertEquals(0, duration0.getWeeks());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=640,MONTH=640,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2316,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=93,HOUR_OF_DAY=93,MINUTE=640,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals((-3896), duration0.getDays());
      assertEquals(11, duration0.getHours());
      assertEquals((-4459), duration0.getSeconds());
      assertEquals(678, duration0.getMinutes());
      assertEquals((-1531129912L), duration0.getInterval());
      assertEquals(0, duration0.getWeeks());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertNotNull(recurrence0);
      
      Duration duration1 = recurrence0.getDuration();
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertFalse(duration1.equals((Object)duration0));
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=640,MONTH=640,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2316,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=93,HOUR_OF_DAY=93,MINUTE=640,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals((-3896), duration0.getDays());
      assertEquals(11, duration0.getHours());
      assertEquals((-4459), duration0.getSeconds());
      assertEquals(678, duration0.getMinutes());
      assertEquals((-1531129912L), duration0.getInterval());
      assertEquals(0, duration0.getWeeks());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(678, duration1.getMinutes());
      assertEquals((-3896), duration1.getDays());
      assertEquals(11, duration1.getHours());
      assertEquals(0, duration1.getWeeks());
      assertEquals((-4459), duration1.getSeconds());
      assertEquals((-1531129912L), duration1.getInterval());
      assertNotNull(duration1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration(59, 604800000, 59, 604800000);
      assertEquals(604800000, duration0.getSeconds());
      assertEquals(604800000, duration0.getHours());
      assertEquals(59, duration0.getDays());
      assertEquals((-2115315680L), duration0.getInterval());
      assertEquals(59, duration0.getMinutes());
      assertEquals(0, duration0.getWeeks());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(604800000, duration0.getSeconds());
      assertEquals(604800000, duration0.getHours());
      assertEquals(59, duration0.getDays());
      assertEquals((-2115315680L), duration0.getInterval());
      assertEquals(59, duration0.getMinutes());
      assertEquals(0, duration0.getWeeks());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertNotNull(recurrence0);
      
      recurrence0.setWeekStart((-472));
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(604800000, duration0.getSeconds());
      assertEquals(604800000, duration0.getHours());
      assertEquals(59, duration0.getDays());
      assertEquals((-2115315680L), duration0.getInterval());
      assertEquals(59, duration0.getMinutes());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-472), recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      
      Calendar calendar0 = recurrence0.getDtEnd();
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertFalse(calendar0.equals((Object)mockGregorianCalendar0));
      assertNotSame(mockGregorianCalendar0, calendar0);
      assertNotSame(calendar0, mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(604800000, duration0.getSeconds());
      assertEquals(604800000, duration0.getHours());
      assertEquals(59, duration0.getDays());
      assertEquals((-2115315680L), duration0.getInterval());
      assertEquals(59, duration0.getMinutes());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-472), recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertEquals((-472), calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1390293965640,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-472,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=0,WEEK_OF_YEAR=3,WEEK_OF_MONTH=3,DAY_OF_MONTH=21,DAY_OF_YEAR=21,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=46,SECOND=5,MILLISECOND=640,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertNotNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertNotNull(mockGregorianCalendar0);
      
      long long0 = Recurrence.getDayNumber(mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1848), 652, 1);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1848,MONTH=652,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertNotNull(mockGregorianCalendar0);
      
      int[] intArray0 = new int[8];
      boolean boolean0 = Recurrence.matchesByField(intArray0, 4, mockGregorianCalendar0, true);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-118771315200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1795,MONTH=4,WEEK_OF_YEAR=18,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=121,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean0);
      
      long long0 = Recurrence.getDayNumber(mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-118771315200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1795,MONTH=4,WEEK_OF_YEAR=18,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=121,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals((-1374668L), long0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-410), (-2851), 13, (-3122), (-3122), (-410));
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-410,MONTH=-2851,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3122,HOUR_OF_DAY=-3122,MINUTE=-3122,SECOND=-410,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration();
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-410,MONTH=-2851,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3122,HOUR_OF_DAY=-3122,MINUTE=-3122,SECOND=-410,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertNotNull(recurrence0);
      
      mockGregorianCalendar0.setLenient(false);
      assertFalse(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-410,MONTH=-2851,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3122,HOUR_OF_DAY=-3122,MINUTE=-3122,SECOND=-410,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      Calendar calendar0 = recurrence0.getCandidateStartTime(mockGregorianCalendar0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(6, Recurrence.YEARLY);
      assertFalse(calendar0.equals((Object)mockGregorianCalendar0));
      assertNotSame(mockGregorianCalendar0, calendar0);
      assertNotSame(calendar0, mockGregorianCalendar0);
      assertFalse(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-410,MONTH=-2851,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3122,HOUR_OF_DAY=-3122,MINUTE=-3122,SECOND=-410,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertFalse(calendar0.isLenient());
      assertNotNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Locale locale0 = new Locale("");
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertNotNull(calendar0);
      
      Duration duration0 = new Duration(3108);
      assertEquals((-1477275648L), duration0.getInterval());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(3108, duration0.getWeeks());
      assertEquals(0, duration0.getMinutes());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(calendar0, duration0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals((-1477275648L), duration0.getInterval());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(3108, duration0.getWeeks());
      assertEquals(0, duration0.getMinutes());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertNotNull(recurrence0);
      
      recurrence0.setWeekStart(0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals((-1477275648L), duration0.getInterval());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(3108, duration0.getWeeks());
      assertEquals(0, duration0.getMinutes());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getWeekStart());
      
      Calendar calendar1 = recurrence0.getCandidateStartTime(calendar0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertFalse(calendar1.equals((Object)calendar0));
      assertNotSame(calendar0, calendar1);
      assertNotSame(calendar1, calendar0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals((-1477275648L), duration0.getInterval());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(3108, duration0.getWeeks());
      assertEquals(0, duration0.getMinutes());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getWeekStart());
      assertEquals(0, calendar1.getFirstDayOfWeek());
      assertEquals(4, calendar1.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=0,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar1.toString());
      assertTrue(calendar1.isLenient());
      assertNotNull(calendar1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      assertNotNull(zonedDateTime0);
      
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertNotNull(gregorianCalendar0);
      
      Duration duration0 = new Duration();
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(gregorianCalendar0, duration0);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertNotNull(recurrence0);
      
      recurrence0.setWeekStart((-4128));
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(1, recurrence0.getInterval());
      assertEquals((-4128), recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      
      Calendar calendar0 = recurrence0.getCandidateStartTime(gregorianCalendar0);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(4, Recurrence.WEEKLY);
      assertFalse(calendar0.equals((Object)gregorianCalendar0));
      assertNotSame(gregorianCalendar0, calendar0);
      assertNotSame(calendar0, gregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(1, recurrence0.getInterval());
      assertEquals((-4128), recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals((-4128), calendar0.getFirstDayOfWeek());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-4128,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertNotNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("x<");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertNotNull(calendar0);
      
      Duration duration0 = new Duration(24, 101, 2, 24);
      assertEquals(101, duration0.getHours());
      assertEquals((-1857623296L), duration0.getInterval());
      assertEquals(24, duration0.getSeconds());
      assertEquals(24, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(2, duration0.getMinutes());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(calendar0, duration0, 101);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(101, duration0.getHours());
      assertEquals((-1857623296L), duration0.getInterval());
      assertEquals(24, duration0.getSeconds());
      assertEquals(24, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(2, duration0.getMinutes());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(101, recurrence0.getFrequency());
      assertNotNull(recurrence0);
      
      int[] intArray0 = new int[3];
      recurrence0.byMonthDay = intArray0;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(101, duration0.getHours());
      assertEquals((-1857623296L), duration0.getInterval());
      assertEquals(24, duration0.getSeconds());
      assertEquals(24, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(2, duration0.getMinutes());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(101, recurrence0.getFrequency());
      
      int[] intArray1 = recurrence0.getByMonthDay();
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(101, duration0.getHours());
      assertEquals((-1857623296L), duration0.getInterval());
      assertEquals(24, duration0.getSeconds());
      assertEquals(24, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(2, duration0.getMinutes());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(101, recurrence0.getFrequency());
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      assertNotNull(zonedDateTime0);
      
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertTrue(gregorianCalendar0.isLenient());
      assertNotNull(gregorianCalendar0);
      
      Duration duration0 = new Duration();
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(gregorianCalendar0, duration0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertNotNull(recurrence0);
      
      // Undeclared exception!
      try { 
        recurrence0.setDtEnd((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.cal.Recurrence", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-982), (-982), (-982));
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-982,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-982,HOUR_OF_DAY=-982,MINUTE=-982,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration();
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0, (-982));
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-982,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-982,HOUR_OF_DAY=-982,MINUTE=-982,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-982), recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(1, recurrence0.getInterval());
      assertNotNull(recurrence0);
      
      Recurrence.reduce_constant_length_field(0, mockGregorianCalendar0, mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62255917320000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=4,MONTH=2,WEEK_OF_YEAR=11,WEEK_OF_MONTH=3,DAY_OF_MONTH=12,DAY_OF_YEAR=71,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=38,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      // Undeclared exception!
      try { 
        recurrence0.setDtEnd(mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative-length interval
         //
         verifyException("com.liferay.portal.kernel.cal.Duration", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(640, 640, 2316, 93, 640);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=640,MONTH=640,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2316,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=93,HOUR_OF_DAY=93,MINUTE=640,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration((-3896), 11, 678, (-4459));
      assertEquals((-4459), duration0.getSeconds());
      assertEquals((-3896), duration0.getDays());
      assertEquals(11, duration0.getHours());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-1531129912L), duration0.getInterval());
      assertEquals(678, duration0.getMinutes());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=640,MONTH=640,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2316,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=93,HOUR_OF_DAY=93,MINUTE=640,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals((-4459), duration0.getSeconds());
      assertEquals((-3896), duration0.getDays());
      assertEquals(11, duration0.getHours());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-1531129912L), duration0.getInterval());
      assertEquals(678, duration0.getMinutes());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertNotNull(recurrence0);
      
      DayAndPosition[] dayAndPositionArray0 = new DayAndPosition[1];
      // Undeclared exception!
      try { 
        recurrence0.setByDay(dayAndPositionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.cal.Recurrence", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        Recurrence.reduce_day_of_year((Calendar) null, (Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.cal.Recurrence", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertNotNull(calendar0);
      
      // Undeclared exception!
      try { 
        Recurrence.reduce_day_of_month(calendar0, (Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.cal.Recurrence", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Locale locale0 = Locale.US;
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertNotNull(calendar0);
      
      // Undeclared exception!
      try { 
        Recurrence.reduce_constant_length_field(12, (Calendar) null, calendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.cal.Recurrence", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertNotNull(calendar0);
      
      // Undeclared exception!
      try { 
        Recurrence.reduce_constant_length_field(604800000, calendar0, calendar0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 604800000
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration(59, 59, 4, 59);
      assertEquals(59, duration0.getDays());
      assertEquals(4, duration0.getMinutes());
      assertEquals(0, duration0.getWeeks());
      assertEquals(59, duration0.getHours());
      assertEquals(59, duration0.getSeconds());
      assertEquals(1015331704L, duration0.getInterval());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(59, duration0.getDays());
      assertEquals(4, duration0.getMinutes());
      assertEquals(0, duration0.getWeeks());
      assertEquals(59, duration0.getHours());
      assertEquals(59, duration0.getSeconds());
      assertEquals(1015331704L, duration0.getInterval());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertNotNull(recurrence0);
      
      // Undeclared exception!
      try { 
        recurrence0.matchesIndividualByDay(mockGregorianCalendar0, (DayAndPosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.cal.Recurrence", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(640, 640, 2316, 93, 640);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=640,MONTH=640,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2316,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=93,HOUR_OF_DAY=93,MINUTE=640,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration((-3896), 11, 678, (-4459));
      assertEquals(0, duration0.getWeeks());
      assertEquals((-1531129912L), duration0.getInterval());
      assertEquals(678, duration0.getMinutes());
      assertEquals(11, duration0.getHours());
      assertEquals((-3896), duration0.getDays());
      assertEquals((-4459), duration0.getSeconds());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=640,MONTH=640,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2316,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=93,HOUR_OF_DAY=93,MINUTE=640,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-1531129912L), duration0.getInterval());
      assertEquals(678, duration0.getMinutes());
      assertEquals(11, duration0.getHours());
      assertEquals((-3896), duration0.getDays());
      assertEquals((-4459), duration0.getSeconds());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertNotNull(recurrence0);
      
      int[] intArray0 = new int[1];
      recurrence0.setByWeekNo(intArray0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=640,MONTH=640,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2316,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=93,HOUR_OF_DAY=93,MINUTE=640,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-1531129912L), duration0.getInterval());
      assertEquals(678, duration0.getMinutes());
      assertEquals(11, duration0.getHours());
      assertEquals((-3896), duration0.getDays());
      assertEquals((-4459), duration0.getSeconds());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertArrayEquals(new int[] {0}, intArray0);
      
      // Undeclared exception!
      try { 
        recurrence0.matchesByWeekNo((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.cal.Recurrence", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        Recurrence.matchesByField(intArray0, 2316, (Calendar) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.cal.Recurrence", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertNotNull(mockGregorianCalendar0);
      
      int[] intArray0 = new int[6];
      mockGregorianCalendar0.set(0, 11);
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=11,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      // Undeclared exception!
      try { 
        Recurrence.matchesByField(intArray0, 28, mockGregorianCalendar0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid era
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertNotNull(calendar0);
      
      Duration duration0 = new Duration();
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(calendar0, duration0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertNotNull(recurrence0);
      
      DayAndPosition[] dayAndPositionArray0 = new DayAndPosition[4];
      DayAndPosition dayAndPosition0 = new DayAndPosition();
      assertEquals(0, DayAndPosition.NO_WEEKDAY);
      assertEquals(0, dayAndPosition0.getDayPosition());
      assertEquals(0, dayAndPosition0.getDayOfWeek());
      assertNotNull(dayAndPosition0);
      
      dayAndPositionArray0[0] = dayAndPosition0;
      dayAndPositionArray0[1] = dayAndPosition0;
      dayAndPositionArray0[2] = dayAndPositionArray0[0];
      dayAndPositionArray0[3] = dayAndPositionArray0[1];
      recurrence0.setByDay(dayAndPositionArray0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      
      // Undeclared exception!
      try { 
        recurrence0.matchesByDay((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.cal.Recurrence", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertNotNull(calendar0);
      
      Duration duration0 = new Duration(0);
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(calendar0, duration0);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(0, recurrence0.getOccurrence());
      assertNotNull(recurrence0);
      
      // Undeclared exception!
      try { 
        recurrence0.isInRecurrence((Calendar) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.cal.Recurrence", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1514), "Negative-length interval");
      assertEquals("Negative-length interval", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-1514), simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=Negative-length interval,offset=-1514,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = new Locale("Negative-length interval", "I*~!tNVf# y@X]", "DwYO0'!l^");
      assertEquals("I*~!TNVF# Y@X]", locale0.getCountry());
      assertEquals("negative-length interval", locale0.getLanguage());
      assertEquals("DwYO0'!l^", locale0.getVariant());
      assertEquals("negative-length interval_I*~!TNVF# Y@X]_DwYO0'!l^", locale0.toString());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      assertEquals("Negative-length interval", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-1514), simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=Negative-length interval,offset=-1514,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("I*~!TNVF# Y@X]", locale0.getCountry());
      assertEquals("negative-length interval", locale0.getLanguage());
      assertEquals("DwYO0'!l^", locale0.getVariant());
      assertEquals("negative-length interval_I*~!TNVF# Y@X]_DwYO0'!l^", locale0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Negative-length interval,offset=-1514,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=19,MILLISECOND=806,ZONE_OFFSET=-1514,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration(1775, 1775, 93);
      assertEquals(0, duration0.getWeeks());
      assertEquals(93, duration0.getSeconds());
      assertEquals(1775, duration0.getHours());
      assertEquals((-2093341592L), duration0.getInterval());
      assertEquals(0, duration0.getDays());
      assertEquals(1775, duration0.getMinutes());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0, (-1214));
      assertEquals(3, Recurrence.DAILY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals("Negative-length interval", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-1514), simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=Negative-length interval,offset=-1514,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("I*~!TNVF# Y@X]", locale0.getCountry());
      assertEquals("negative-length interval", locale0.getLanguage());
      assertEquals("DwYO0'!l^", locale0.getVariant());
      assertEquals("negative-length interval_I*~!TNVF# Y@X]_DwYO0'!l^", locale0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Negative-length interval,offset=-1514,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=19,MILLISECOND=806,ZONE_OFFSET=-1514,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(0, duration0.getWeeks());
      assertEquals(93, duration0.getSeconds());
      assertEquals(1775, duration0.getHours());
      assertEquals((-2093341592L), duration0.getInterval());
      assertEquals(0, duration0.getDays());
      assertEquals(1775, duration0.getMinutes());
      assertEquals((-1214), recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertNotNull(recurrence0);
      
      // Undeclared exception!
      try { 
        recurrence0.isInRecurrence((Calendar) mockGregorianCalendar0, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Internal error: Unknown frequency value
         //
         verifyException("com.liferay.portal.kernel.cal.Recurrence", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Locale locale0 = new Locale("");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertNotNull(calendar0);
      
      Duration duration0 = new Duration(3112);
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(941924352L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertEquals(3112, duration0.getWeeks());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(calendar0, duration0);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(941924352L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertEquals(3112, duration0.getWeeks());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertNotNull(recurrence0);
      
      calendar0.set(0, 850);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=850,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      
      // Undeclared exception!
      try { 
        recurrence0.isInRecurrence(calendar0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid era
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        Recurrence.getWeekNumber((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.cal.Recurrence", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        Recurrence.getMonthNumber((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.cal.Recurrence", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertNotNull(calendar0);
      
      Duration duration0 = new Duration((-160));
      assertEquals(0, duration0.getMinutes());
      assertEquals(2016247808L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals((-160), duration0.getWeeks());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(calendar0, duration0, 1916);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, duration0.getMinutes());
      assertEquals(2016247808L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals((-160), duration0.getWeeks());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(1916, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertNotNull(recurrence0);
      
      // Undeclared exception!
      try { 
        recurrence0.getMinimumInterval();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Internal error: Unknown frequency value
         //
         verifyException("com.liferay.portal.kernel.cal.Recurrence", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        Recurrence.getDayNumber((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.cal.Recurrence", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      assertNotNull(zonedDateTime0);
      
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(gregorianCalendar0);
      
      Duration duration0 = new Duration();
      assertEquals(0, duration0.getDays());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getMinutes());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(gregorianCalendar0, duration0);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(0, duration0.getDays());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertNotNull(recurrence0);
      
      // Undeclared exception!
      try { 
        recurrence0.getCandidateStartTime((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.cal.Recurrence", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-1638), (-3295), 360, 360);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1638,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3295,HOUR_OF_DAY=-3295,MINUTE=360,SECOND=360,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration(360, 0, (-1189), 360);
      assertEquals(360, duration0.getSeconds());
      assertEquals(360, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(968248928L, duration0.getInterval());
      assertEquals((-1189), duration0.getMinutes());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0, 2254);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1638,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3295,HOUR_OF_DAY=-3295,MINUTE=360,SECOND=360,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(360, duration0.getSeconds());
      assertEquals(360, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(968248928L, duration0.getInterval());
      assertEquals((-1189), duration0.getMinutes());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2254, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(0, recurrence0.getOccurrence());
      assertNotNull(recurrence0);
      
      // Undeclared exception!
      try { 
        recurrence0.getCandidateStartTime(mockGregorianCalendar0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Internal error: Unknown frequency value
         //
         verifyException("com.liferay.portal.kernel.cal.Recurrence", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(640, 640, 2316, 93, 640);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=640,MONTH=640,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2316,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=93,HOUR_OF_DAY=93,MINUTE=640,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration((-3896), 11, 678, (-4459));
      assertEquals(0, duration0.getWeeks());
      assertEquals(678, duration0.getMinutes());
      assertEquals((-1531129912L), duration0.getInterval());
      assertEquals(11, duration0.getHours());
      assertEquals((-4459), duration0.getSeconds());
      assertEquals((-3896), duration0.getDays());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=640,MONTH=640,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2316,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=93,HOUR_OF_DAY=93,MINUTE=640,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(0, duration0.getWeeks());
      assertEquals(678, duration0.getMinutes());
      assertEquals((-1531129912L), duration0.getInterval());
      assertEquals(11, duration0.getHours());
      assertEquals((-4459), duration0.getSeconds());
      assertEquals((-3896), duration0.getDays());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertNotNull(recurrence0);
      
      int[] intArray0 = new int[1];
      recurrence0.setByWeekNo(intArray0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=640,MONTH=640,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2316,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=93,HOUR_OF_DAY=93,MINUTE=640,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(0, duration0.getWeeks());
      assertEquals(678, duration0.getMinutes());
      assertEquals((-1531129912L), duration0.getInterval());
      assertEquals(11, duration0.getHours());
      assertEquals((-4459), duration0.getSeconds());
      assertEquals((-3896), duration0.getDays());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertArrayEquals(new int[] {0}, intArray0);
      
      // Undeclared exception!
      try { 
        recurrence0.candidateIsInRecurrence((Calendar) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.cal.Recurrence", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration(59, 604800000, 4, 604800000);
      assertEquals(0, duration0.getWeeks());
      assertEquals((-2118615680L), duration0.getInterval());
      assertEquals(4, duration0.getMinutes());
      assertEquals(604800000, duration0.getHours());
      assertEquals(604800000, duration0.getSeconds());
      assertEquals(59, duration0.getDays());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-2118615680L), duration0.getInterval());
      assertEquals(4, duration0.getMinutes());
      assertEquals(604800000, duration0.getHours());
      assertEquals(604800000, duration0.getSeconds());
      assertEquals(59, duration0.getDays());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertNotNull(recurrence0);
      
      recurrence0.setFrequency(3270);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-2118615680L), duration0.getInterval());
      assertEquals(4, duration0.getMinutes());
      assertEquals(604800000, duration0.getHours());
      assertEquals(604800000, duration0.getSeconds());
      assertEquals(59, duration0.getDays());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(3270, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      
      // Undeclared exception!
      try { 
        recurrence0.candidateIsInRecurrence(mockGregorianCalendar0, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // bad frequency internally...
         //
         verifyException("com.liferay.portal.kernel.cal.Recurrence", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Duration duration0 = new Duration(0, 0, (-737), (-4284));
      assertEquals((-737), duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals((-48504000L), duration0.getInterval());
      assertEquals((-4284), duration0.getSeconds());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = null;
      try {
        recurrence0 = new Recurrence((Calendar) null, duration0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.util.CalendarFactoryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Duration duration0 = new Duration(7, 7, 7);
      assertEquals(0, duration0.getWeeks());
      assertEquals(25627000L, duration0.getInterval());
      assertEquals(7, duration0.getHours());
      assertEquals(7, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(7, duration0.getMinutes());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = null;
      try {
        recurrence0 = new Recurrence((Calendar) null, duration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.util.CalendarFactoryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertNotNull(calendar0);
      
      Duration duration0 = new Duration((-1645), (-1645), 3041);
      assertEquals((-1645), duration0.getHours());
      assertEquals((-1722691704L), duration0.getInterval());
      assertEquals((-1645), duration0.getMinutes());
      assertEquals(3041, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(calendar0, duration0, 2669);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals((-1645), duration0.getHours());
      assertEquals((-1722691704L), duration0.getInterval());
      assertEquals((-1645), duration0.getMinutes());
      assertEquals(3041, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2669, recurrence0.getFrequency());
      assertNotNull(recurrence0);
      
      int[] intArray0 = new int[4];
      recurrence0.setByYearDay(intArray0);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals((-1645), duration0.getHours());
      assertEquals((-1722691704L), duration0.getInterval());
      assertEquals((-1645), duration0.getMinutes());
      assertEquals(3041, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2669, recurrence0.getFrequency());
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      Calendar calendar1 = recurrence0.getCandidateStartTime(calendar0);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertFalse(calendar1.equals((Object)calendar0));
      assertNotSame(calendar0, calendar1);
      assertNotSame(calendar1, calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals((-1645), duration0.getHours());
      assertEquals((-1722691704L), duration0.getInterval());
      assertEquals((-1645), duration0.getMinutes());
      assertEquals(3041, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2669, recurrence0.getFrequency());
      assertEquals(4, calendar1.getMinimalDaysInFirstWeek());
      assertEquals(2, calendar1.getFirstDayOfWeek());
      assertTrue(calendar1.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar1.toString());
      assertNotNull(calendar1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertNotNull(calendar0);
      
      Duration duration0 = new Duration();
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0L, duration0.getInterval());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(calendar0, duration0);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertNotNull(recurrence0);
      
      // Undeclared exception!
      try { 
        recurrence0.setDtStart((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.util.CalendarFactoryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Locale locale0 = new Locale("");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertNotNull(calendar0);
      
      Duration duration0 = new Duration(3108);
      assertEquals((-1477275648L), duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(3108, duration0.getWeeks());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(calendar0, duration0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals((-1477275648L), duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(3108, duration0.getWeeks());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertNotNull(recurrence0);
      
      int[] intArray0 = new int[5];
      recurrence0.setByYearDay(intArray0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals((-1477275648L), duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(3108, duration0.getWeeks());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      String string0 = recurrence0.toString();
      assertEquals(3, Recurrence.DAILY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals((-1477275648L), duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(3108, duration0.getWeeks());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals("com.liferay.portal.kernel.cal.Recurrence[dtStart=org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=?,DST_OFFSET=?],duration=com.liferay.portal.kernel.cal.Duration[weeks=3108,days=0,hours=0,minutes=0,seconds=0],frequency=7,interval=1,until=null,byDay=null,byMonthDay=null,byYearDay=[0,0,0,0,0],byWeekNo=null,byMonth=null]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertNotNull(locale0);
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertNotNull(calendar0);
      
      Duration duration0 = new Duration();
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getMinutes());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(calendar0, duration0);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getMinutes());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertNotNull(recurrence0);
      
      DayAndPosition[] dayAndPositionArray0 = new DayAndPosition[4];
      DayAndPosition dayAndPosition0 = new DayAndPosition();
      assertEquals(0, DayAndPosition.NO_WEEKDAY);
      assertEquals(0, dayAndPosition0.getDayPosition());
      assertEquals(0, dayAndPosition0.getDayOfWeek());
      assertNotNull(dayAndPosition0);
      
      dayAndPositionArray0[0] = dayAndPosition0;
      dayAndPositionArray0[1] = dayAndPositionArray0[0];
      dayAndPositionArray0[2] = dayAndPositionArray0[1];
      dayAndPositionArray0[3] = dayAndPositionArray0[0];
      recurrence0.setByDay(dayAndPositionArray0);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getMinutes());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      
      String string0 = recurrence0.toString();
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getMinutes());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertEquals("com.liferay.portal.kernel.cal.Recurrence[dtStart=org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=?,DST_OFFSET=?],duration=com.liferay.portal.kernel.cal.Duration[weeks=0,days=0,hours=0,minutes=0,seconds=0],frequency=7,interval=1,until=null,byDay=[com.liferay.portal.kernel.cal.DayAndPosition[day=0,position=0],com.liferay.portal.kernel.cal.DayAndPosition[day=0,position=0],com.liferay.portal.kernel.cal.DayAndPosition[day=0,position=0],com.liferay.portal.kernel.cal.DayAndPosition[day=0,position=0]],byMonthDay=null,byYearDay=null,byWeekNo=null,byMonth=null]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Locale locale0 = new Locale("");
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertNotNull(calendar0);
      
      Duration duration0 = new Duration(3108);
      assertEquals(0, duration0.getDays());
      assertEquals((-1477275648L), duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(3108, duration0.getWeeks());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(calendar0, duration0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(0, duration0.getDays());
      assertEquals((-1477275648L), duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(3108, duration0.getWeeks());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertNotNull(recurrence0);
      
      recurrence0.setUntil(calendar0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(0, duration0.getDays());
      assertEquals((-1477275648L), duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(3108, duration0.getWeeks());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      
      String string0 = recurrence0.toString();
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(0, duration0.getDays());
      assertEquals((-1477275648L), duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(3108, duration0.getWeeks());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1848), 652, 1, (-1848), 652, (-1848));
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1848,MONTH=652,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1848,HOUR_OF_DAY=-1848,MINUTE=652,SECOND=-1848,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(mockGregorianCalendar0);
      
      int[] intArray0 = new int[8];
      boolean boolean0 = Recurrence.matchesByField(intArray0, 0, mockGregorianCalendar0, true);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-118777930728000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1795,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=44,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=21,SECOND=12,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(mockGregorianCalendar0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-504);
      // Undeclared exception!
      try { 
        Recurrence.matchesByField(intArray0, 28, mockGregorianCalendar0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 28
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      assertNotNull(zonedDateTime0);
      
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(gregorianCalendar0);
      
      Duration duration0 = new Duration();
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getMinutes());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(gregorianCalendar0, duration0);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertNotNull(recurrence0);
      
      int[] intArray0 = new int[0];
      recurrence0.setByMonthDay(intArray0);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean0 = recurrence0.matchesByMonthDay(gregorianCalendar0);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertNotNull(locale0);
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertNotNull(calendar0);
      
      Duration duration0 = new Duration();
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0L, duration0.getInterval());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(calendar0, duration0);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertNotNull(recurrence0);
      
      DayAndPosition[] dayAndPositionArray0 = new DayAndPosition[4];
      DayAndPosition dayAndPosition0 = new DayAndPosition();
      assertEquals(0, DayAndPosition.NO_WEEKDAY);
      assertEquals(0, dayAndPosition0.getDayOfWeek());
      assertEquals(0, dayAndPosition0.getDayPosition());
      assertNotNull(dayAndPosition0);
      
      dayAndPositionArray0[0] = dayAndPosition0;
      dayAndPositionArray0[1] = dayAndPositionArray0[0];
      dayAndPositionArray0[2] = dayAndPosition0;
      DayAndPosition dayAndPosition1 = new DayAndPosition(6, 0);
      assertEquals(0, DayAndPosition.NO_WEEKDAY);
      assertFalse(dayAndPosition1.equals((Object)dayAndPosition0));
      assertEquals(6, dayAndPosition1.getDayOfWeek());
      assertEquals(0, dayAndPosition1.getDayPosition());
      assertNotNull(dayAndPosition1);
      
      dayAndPositionArray0[3] = dayAndPosition1;
      recurrence0.setByDay(dayAndPositionArray0);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      
      boolean boolean0 = recurrence0.matchesByDay(calendar0);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(640, 640, 2316, 93, 640);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=640,MONTH=640,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2316,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=93,HOUR_OF_DAY=93,MINUTE=640,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration(93, 11, 678, (-4459));
      assertEquals(0, duration0.getWeeks());
      assertEquals((-4459), duration0.getSeconds());
      assertEquals(678, duration0.getMinutes());
      assertEquals(93, duration0.getDays());
      assertEquals((-478913592L), duration0.getInterval());
      assertEquals(11, duration0.getHours());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=640,MONTH=640,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2316,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=93,HOUR_OF_DAY=93,MINUTE=640,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-4459), duration0.getSeconds());
      assertEquals(678, duration0.getMinutes());
      assertEquals(93, duration0.getDays());
      assertEquals((-478913592L), duration0.getInterval());
      assertEquals(11, duration0.getHours());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertNotNull(recurrence0);
      
      DayAndPosition[] dayAndPositionArray0 = new DayAndPosition[0];
      recurrence0.setByDay(dayAndPositionArray0);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=640,MONTH=640,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2316,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=93,HOUR_OF_DAY=93,MINUTE=640,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-4459), duration0.getSeconds());
      assertEquals(678, duration0.getMinutes());
      assertEquals(93, duration0.getDays());
      assertEquals((-478913592L), duration0.getInterval());
      assertEquals(11, duration0.getHours());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      
      boolean boolean0 = recurrence0.candidateIsInRecurrence(mockGregorianCalendar0, true);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=640,MONTH=640,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2316,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=93,HOUR_OF_DAY=93,MINUTE=640,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-4459), duration0.getSeconds());
      assertEquals(678, duration0.getMinutes());
      assertEquals(93, duration0.getDays());
      assertEquals((-478913592L), duration0.getInterval());
      assertEquals(11, duration0.getHours());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertNotNull(calendar0);
      
      Duration duration0 = new Duration();
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(calendar0, duration0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertNotNull(recurrence0);
      
      DayAndPosition[] dayAndPositionArray0 = new DayAndPosition[4];
      DayAndPosition dayAndPosition0 = new DayAndPosition();
      assertEquals(0, DayAndPosition.NO_WEEKDAY);
      assertEquals(0, dayAndPosition0.getDayPosition());
      assertEquals(0, dayAndPosition0.getDayOfWeek());
      assertNotNull(dayAndPosition0);
      
      dayAndPositionArray0[0] = dayAndPosition0;
      dayAndPositionArray0[1] = dayAndPosition0;
      dayAndPositionArray0[2] = dayAndPositionArray0[0];
      dayAndPositionArray0[3] = dayAndPositionArray0[1];
      recurrence0.setByDay(dayAndPositionArray0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      
      boolean boolean0 = recurrence0.matchesByDay(calendar0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertNotNull(locale0);
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertNotNull(calendar0);
      
      calendar0.setWeekDate(1, 1, 1);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62135005118680,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=9,DAY_OF_YEAR=9,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      
      long long0 = Recurrence.getWeekNumber(calendar0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62135005118680,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=9,DAY_OF_YEAR=9,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertEquals((-102736L), long0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Locale locale0 = new Locale("+AR");
      assertEquals("", locale0.getVariant());
      assertEquals("+ar", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("+ar", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("+ar", locale0.getISO3Language());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("+ar", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("+ar", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("+ar", locale0.getISO3Language());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration();
      assertEquals(0, duration0.getDays());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getMinutes());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0, 3600000);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals("", locale0.getVariant());
      assertEquals("+ar", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("+ar", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("+ar", locale0.getISO3Language());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(0, duration0.getDays());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(3600000, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertNotNull(recurrence0);
      
      // Undeclared exception!
      try { 
        recurrence0.getRecurrenceCount(mockGregorianCalendar0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // bad frequency internally...
         //
         verifyException("com.liferay.portal.kernel.cal.Recurrence", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-410), (-2851), 13, (-3122), (-3122), (-410));
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-410,MONTH=-2851,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3122,HOUR_OF_DAY=-3122,MINUTE=-3122,SECOND=-410,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration();
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-410,MONTH=-2851,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3122,HOUR_OF_DAY=-3122,MINUTE=-3122,SECOND=-410,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertNotNull(recurrence0);
      
      recurrence0.frequency = 6;
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-410,MONTH=-2851,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3122,HOUR_OF_DAY=-3122,MINUTE=-3122,SECOND=-410,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(6, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      
      boolean boolean0 = recurrence0.candidateIsInRecurrence(mockGregorianCalendar0, true);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-82613974130000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=649,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=32,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=51,SECOND=10,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(6, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertNotNull(calendar0);
      
      Duration duration0 = new Duration(6, 59990, 201, 910);
      assertEquals(59990, duration0.getHours());
      assertEquals(1747005200L, duration0.getInterval());
      assertEquals(201, duration0.getMinutes());
      assertEquals(6, duration0.getDays());
      assertEquals(910, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(calendar0, duration0, 4);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(59990, duration0.getHours());
      assertEquals(1747005200L, duration0.getInterval());
      assertEquals(201, duration0.getMinutes());
      assertEquals(6, duration0.getDays());
      assertEquals(910, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(4, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertNotNull(recurrence0);
      
      int int0 = recurrence0.getRecurrenceCount(calendar0);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(59990, duration0.getHours());
      assertEquals(1747005200L, duration0.getInterval());
      assertEquals(201, duration0.getMinutes());
      assertEquals(6, duration0.getDays());
      assertEquals(910, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(4, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1848), 652, 1);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1848,MONTH=652,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(mockGregorianCalendar0);
      
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertNotNull(mockGregorianCalendar1);
      
      Recurrence.reduce_day_of_year(mockGregorianCalendar1, mockGregorianCalendar0);
      assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-118777881600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1795,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-485), (-485), 531, 531, 531, 15);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-485,MONTH=-485,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=531,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=531,HOUR_OF_DAY=531,MINUTE=531,SECOND=15,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration(15);
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(15, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(482065408L, duration0.getInterval());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-485,MONTH=-485,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=531,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=531,HOUR_OF_DAY=531,MINUTE=531,SECOND=15,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(15, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(482065408L, duration0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(1, recurrence0.getInterval());
      assertNotNull(recurrence0);
      
      Calendar calendar0 = recurrence0.getDtEnd();
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertFalse(calendar0.equals((Object)mockGregorianCalendar0));
      assertNotSame(mockGregorianCalendar0, calendar0);
      assertNotSame(calendar0, mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-485,MONTH=-485,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=531,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=531,HOUR_OF_DAY=531,MINUTE=531,SECOND=15,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(15, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(482065408L, duration0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=482065408,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=6,DAY_OF_YEAR=6,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=1,HOUR_OF_DAY=13,MINUTE=54,SECOND=25,MILLISECOND=408,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertNotNull(calendar0);
      
      Recurrence.reduce_day_of_year(mockGregorianCalendar0, calendar0);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertFalse(mockGregorianCalendar0.equals((Object)calendar0));
      assertFalse(calendar0.equals((Object)mockGregorianCalendar0));
      assertNotSame(mockGregorianCalendar0, calendar0);
      assertNotSame(calendar0, mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-78700594125000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=525,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=4,DAY_OF_YEAR=35,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=11,HOUR_OF_DAY=11,MINUTE=51,SECOND=15,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(15, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(482065408L, duration0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-28548334592,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1969,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=4,DAY_OF_YEAR=35,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=1,HOUR_OF_DAY=13,MINUTE=54,SECOND=25,MILLISECOND=408,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1848), 652, 1, (-1848), 652, (-1848));
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1848,MONTH=652,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1848,HOUR_OF_DAY=-1848,MINUTE=652,SECOND=-1848,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration(652, (-1848), 1, 652);
      assertEquals(1, duration0.getMinutes());
      assertEquals((-1848), duration0.getHours());
      assertEquals(652, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(652, duration0.getSeconds());
      assertEquals((-1858895552L), duration0.getInterval());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1848,MONTH=652,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1848,HOUR_OF_DAY=-1848,MINUTE=652,SECOND=-1848,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, duration0.getMinutes());
      assertEquals((-1848), duration0.getHours());
      assertEquals(652, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(652, duration0.getSeconds());
      assertEquals((-1858895552L), duration0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertNotNull(recurrence0);
      
      Calendar calendar0 = recurrence0.getDtEnd();
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertFalse(calendar0.equals((Object)mockGregorianCalendar0));
      assertNotSame(mockGregorianCalendar0, calendar0);
      assertNotSame(calendar0, mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1848,MONTH=652,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1848,HOUR_OF_DAY=-1848,MINUTE=652,SECOND=-1848,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, duration0.getMinutes());
      assertEquals((-1848), duration0.getHours());
      assertEquals(652, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(652, duration0.getSeconds());
      assertEquals((-1858895552L), duration0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-1858895552,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=50,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=344,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=11,HOUR_OF_DAY=11,MINUTE=38,SECOND=24,MILLISECOND=448,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertNotNull(calendar0);
      
      Recurrence.reduce_day_of_month(mockGregorianCalendar0, calendar0);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertFalse(mockGregorianCalendar0.equals((Object)calendar0));
      assertFalse(calendar0.equals((Object)mockGregorianCalendar0));
      assertNotSame(mockGregorianCalendar0, calendar0);
      assertNotSame(calendar0, mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-118777930728000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1795,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=44,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=21,SECOND=12,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, duration0.getMinutes());
      assertEquals((-1848), duration0.getHours());
      assertEquals(652, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(652, duration0.getSeconds());
      assertEquals((-1858895552L), duration0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-4191695552,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1969,MONTH=10,WEEK_OF_YEAR=46,WEEK_OF_MONTH=2,DAY_OF_MONTH=13,DAY_OF_YEAR=317,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=11,HOUR_OF_DAY=11,MINUTE=38,SECOND=24,MILLISECOND=448,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      assertNotNull(zonedDateTime0);
      
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(gregorianCalendar0);
      
      Recurrence.reduce_day_of_month(gregorianCalendar0, gregorianCalendar0);
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(mockGregorianCalendar0);
      
      // Undeclared exception!
      try { 
        Recurrence.reduce_constant_length_field(3, mockGregorianCalendar0, mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a constant length field
         //
         verifyException("com.liferay.portal.kernel.cal.Recurrence", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      assertNotNull(zonedDateTime0);
      
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(gregorianCalendar0);
      
      Duration duration0 = new Duration();
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0L, duration0.getInterval());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(gregorianCalendar0, duration0);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertNotNull(recurrence0);
      
      gregorianCalendar0.set(7, 2670, 5);
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=7,MONTH=2670,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=5,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      
      Recurrence.reduce_day_of_year(gregorianCalendar0, gregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-54924579518680,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=229,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=5,DAY_OF_YEAR=186,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      
      // Undeclared exception!
      try { 
        recurrence0.getCandidateStartTime(gregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current time before DtStart
         //
         verifyException("com.liferay.portal.kernel.cal.Recurrence", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration((-104), 93, 12, 932);
      assertEquals(93, duration0.getHours());
      assertEquals(12, duration0.getMinutes());
      assertEquals((-104), duration0.getDays());
      assertEquals(932, duration0.getSeconds());
      assertEquals((-59213408L), duration0.getInterval());
      assertEquals(0, duration0.getWeeks());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0, (-2462));
      assertEquals(3, Recurrence.DAILY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(93, duration0.getHours());
      assertEquals(12, duration0.getMinutes());
      assertEquals((-104), duration0.getDays());
      assertEquals(932, duration0.getSeconds());
      assertEquals((-59213408L), duration0.getInterval());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-2462), recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertNotNull(recurrence0);
      
      // Undeclared exception!
      try { 
        recurrence0.isInRecurrence((Calendar) mockGregorianCalendar0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Internal error: Unknown frequency value
         //
         verifyException("com.liferay.portal.kernel.cal.Recurrence", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Duration duration0 = new Duration(652, (-1848), 1, 652);
      assertEquals(1, duration0.getMinutes());
      assertEquals((-1848), duration0.getHours());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-1858895552L), duration0.getInterval());
      assertEquals(652, duration0.getSeconds());
      assertEquals(652, duration0.getDays());
      assertNotNull(duration0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertNotNull(calendar0);
      
      Recurrence recurrence0 = new Recurrence(calendar0, duration0, 6);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(1, duration0.getMinutes());
      assertEquals((-1848), duration0.getHours());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-1858895552L), duration0.getInterval());
      assertEquals(652, duration0.getSeconds());
      assertEquals(652, duration0.getDays());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(6, recurrence0.getFrequency());
      assertNotNull(recurrence0);
      
      Calendar calendar1 = recurrence0.getCandidateStartTime(calendar0);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertFalse(calendar1.equals((Object)calendar0));
      assertNotSame(calendar0, calendar1);
      assertNotSame(calendar1, calendar0);
      assertEquals(1, duration0.getMinutes());
      assertEquals((-1848), duration0.getHours());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-1858895552L), duration0.getInterval());
      assertEquals(652, duration0.getSeconds());
      assertEquals(652, duration0.getDays());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(6, recurrence0.getFrequency());
      assertEquals(4, calendar1.getMinimalDaysInFirstWeek());
      assertEquals(2, calendar1.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar1.toString());
      assertTrue(calendar1.isLenient());
      assertNotNull(calendar1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-410), (-2851), 13, (-3122), (-3122), (-410));
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-410,MONTH=-2851,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3122,HOUR_OF_DAY=-3122,MINUTE=-3122,SECOND=-410,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration();
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getMinutes());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(5, Recurrence.MONTHLY);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-410,MONTH=-2851,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3122,HOUR_OF_DAY=-3122,MINUTE=-3122,SECOND=-410,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getMinutes());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertNotNull(recurrence0);
      
      int[] intArray0 = new int[5];
      recurrence0.setByMonth(intArray0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(5, Recurrence.MONTHLY);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-410,MONTH=-2851,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3122,HOUR_OF_DAY=-3122,MINUTE=-3122,SECOND=-410,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getMinutes());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      Calendar calendar0 = recurrence0.getCandidateStartTime(mockGregorianCalendar0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(5, Recurrence.MONTHLY);
      assertFalse(calendar0.equals((Object)mockGregorianCalendar0));
      assertNotSame(mockGregorianCalendar0, calendar0);
      assertNotSame(calendar0, mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-410,MONTH=-2851,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3122,HOUR_OF_DAY=-3122,MINUTE=-3122,SECOND=-410,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getMinutes());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertNotNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(640, 640, 2316, 93, 640);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=640,MONTH=640,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2316,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=93,HOUR_OF_DAY=93,MINUTE=640,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration(93, 11, 678, (-4459));
      assertEquals((-478913592L), duration0.getInterval());
      assertEquals(93, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(678, duration0.getMinutes());
      assertEquals(11, duration0.getHours());
      assertEquals((-4459), duration0.getSeconds());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=640,MONTH=640,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2316,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=93,HOUR_OF_DAY=93,MINUTE=640,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals((-478913592L), duration0.getInterval());
      assertEquals(93, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(678, duration0.getMinutes());
      assertEquals(11, duration0.getHours());
      assertEquals((-4459), duration0.getSeconds());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertNotNull(recurrence0);
      
      int[] intArray0 = new int[1];
      recurrence0.setByWeekNo(intArray0);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=640,MONTH=640,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2316,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=93,HOUR_OF_DAY=93,MINUTE=640,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals((-478913592L), duration0.getInterval());
      assertEquals(93, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(678, duration0.getMinutes());
      assertEquals(11, duration0.getHours());
      assertEquals((-4459), duration0.getSeconds());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertArrayEquals(new int[] {0}, intArray0);
      
      int int0 = recurrence0.getMinimumInterval();
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=640,MONTH=640,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2316,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=93,HOUR_OF_DAY=93,MINUTE=640,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals((-478913592L), duration0.getInterval());
      assertEquals(93, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(678, duration0.getMinutes());
      assertEquals(11, duration0.getHours());
      assertEquals((-4459), duration0.getSeconds());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(640, 640, 2316, 93, 640);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=640,MONTH=640,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2316,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=93,HOUR_OF_DAY=93,MINUTE=640,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration(93, 11, 678, (-4459));
      assertEquals(678, duration0.getMinutes());
      assertEquals(93, duration0.getDays());
      assertEquals(11, duration0.getHours());
      assertEquals((-478913592L), duration0.getInterval());
      assertEquals((-4459), duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=640,MONTH=640,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2316,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=93,HOUR_OF_DAY=93,MINUTE=640,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(678, duration0.getMinutes());
      assertEquals(93, duration0.getDays());
      assertEquals(11, duration0.getHours());
      assertEquals((-478913592L), duration0.getInterval());
      assertEquals((-4459), duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertNotNull(recurrence0);
      
      DayAndPosition[] dayAndPositionArray0 = new DayAndPosition[0];
      recurrence0.setByDay(dayAndPositionArray0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=640,MONTH=640,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2316,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=93,HOUR_OF_DAY=93,MINUTE=640,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(678, duration0.getMinutes());
      assertEquals(93, duration0.getDays());
      assertEquals(11, duration0.getHours());
      assertEquals((-478913592L), duration0.getInterval());
      assertEquals((-4459), duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      
      int int0 = recurrence0.getMinimumInterval();
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=640,MONTH=640,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2316,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=93,HOUR_OF_DAY=93,MINUTE=640,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(678, duration0.getMinutes());
      assertEquals(93, duration0.getDays());
      assertEquals(11, duration0.getHours());
      assertEquals((-478913592L), duration0.getInterval());
      assertEquals((-4459), duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1581, 1960, 6);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1581,MONTH=1960,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=6,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration(6);
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals((-666167296L), duration0.getInterval());
      assertEquals(6, duration0.getWeeks());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getMinutes());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0, 3);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1581,MONTH=1960,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=6,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals((-666167296L), duration0.getInterval());
      assertEquals(6, duration0.getWeeks());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getMinutes());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(3, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertNotNull(recurrence0);
      
      boolean boolean0 = recurrence0.isInRecurrence((Calendar) mockGregorianCalendar0, true);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1581,MONTH=1960,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=6,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals((-666167296L), duration0.getInterval());
      assertEquals(6, duration0.getWeeks());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getMinutes());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(3, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-410), (-2851), 13, (-3122), (-3122), (-410));
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-410,MONTH=-2851,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3122,HOUR_OF_DAY=-3122,MINUTE=-3122,SECOND=-410,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration();
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-410,MONTH=-2851,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3122,HOUR_OF_DAY=-3122,MINUTE=-3122,SECOND=-410,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertNotNull(recurrence0);
      
      int[] intArray0 = new int[5];
      recurrence0.setByMonth(intArray0);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-410,MONTH=-2851,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3122,HOUR_OF_DAY=-3122,MINUTE=-3122,SECOND=-410,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      boolean boolean0 = recurrence0.candidateIsInRecurrence(mockGregorianCalendar0, true);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-82613974130000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=649,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=32,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=51,SECOND=10,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(640, 640, 2316, 93, 640);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=640,MONTH=640,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2316,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=93,HOUR_OF_DAY=93,MINUTE=640,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration(93, 11, 678, (-4459));
      assertEquals((-4459), duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(11, duration0.getHours());
      assertEquals(678, duration0.getMinutes());
      assertEquals(93, duration0.getDays());
      assertEquals((-478913592L), duration0.getInterval());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=640,MONTH=640,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2316,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=93,HOUR_OF_DAY=93,MINUTE=640,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals((-4459), duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(11, duration0.getHours());
      assertEquals(678, duration0.getMinutes());
      assertEquals(93, duration0.getDays());
      assertEquals((-478913592L), duration0.getInterval());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertNotNull(recurrence0);
      
      int[] intArray0 = new int[1];
      recurrence0.setByWeekNo(intArray0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=640,MONTH=640,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2316,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=93,HOUR_OF_DAY=93,MINUTE=640,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals((-4459), duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(11, duration0.getHours());
      assertEquals(678, duration0.getMinutes());
      assertEquals(93, duration0.getDays());
      assertEquals((-478913592L), duration0.getInterval());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertArrayEquals(new int[] {0}, intArray0);
      
      boolean boolean0 = recurrence0.candidateIsInRecurrence(mockGregorianCalendar0, true);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-40087153200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=699,MONTH=8,WEEK_OF_YEAR=36,WEEK_OF_MONTH=1,DAY_OF_MONTH=6,DAY_OF_YEAR=249,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=40,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals((-4459), duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(11, duration0.getHours());
      assertEquals(678, duration0.getMinutes());
      assertEquals(93, duration0.getDays());
      assertEquals((-478913592L), duration0.getInterval());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-410), (-2851), 13, (-3122), (-3122), (-410));
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-410,MONTH=-2851,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3122,HOUR_OF_DAY=-3122,MINUTE=-3122,SECOND=-410,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration();
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-410,MONTH=-2851,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3122,HOUR_OF_DAY=-3122,MINUTE=-3122,SECOND=-410,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertNotNull(recurrence0);
      
      int[] intArray0 = new int[5];
      recurrence0.setByYearDay(intArray0);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-410,MONTH=-2851,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3122,HOUR_OF_DAY=-3122,MINUTE=-3122,SECOND=-410,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      boolean boolean0 = recurrence0.candidateIsInRecurrence(mockGregorianCalendar0, true);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-82613974130000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=649,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=32,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=51,SECOND=10,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Locale locale0 = new Locale("");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertNotNull(locale0);
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertNotNull(calendar0);
      
      Duration duration0 = new Duration(3112);
      assertEquals(941924352L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(3112, duration0.getWeeks());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(calendar0, duration0);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(941924352L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(3112, duration0.getWeeks());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertNotNull(recurrence0);
      
      int[] intArray0 = new int[5];
      recurrence0.setByMonthDay(intArray0);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(941924352L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(3112, duration0.getWeeks());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      boolean boolean0 = recurrence0.candidateIsInRecurrence(calendar0, false);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(941924352L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(3112, duration0.getWeeks());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(640, 640, 2316, 93, 640);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=640,MONTH=640,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2316,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=93,HOUR_OF_DAY=93,MINUTE=640,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration((-3896), 11, 678, (-4459));
      assertEquals((-4459), duration0.getSeconds());
      assertEquals((-3896), duration0.getDays());
      assertEquals(11, duration0.getHours());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-1531129912L), duration0.getInterval());
      assertEquals(678, duration0.getMinutes());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=640,MONTH=640,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2316,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=93,HOUR_OF_DAY=93,MINUTE=640,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals((-4459), duration0.getSeconds());
      assertEquals((-3896), duration0.getDays());
      assertEquals(11, duration0.getHours());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-1531129912L), duration0.getInterval());
      assertEquals(678, duration0.getMinutes());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(1, recurrence0.getInterval());
      assertNotNull(recurrence0);
      
      recurrence0.setOccurrence(23);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=640,MONTH=640,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2316,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=93,HOUR_OF_DAY=93,MINUTE=640,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals((-4459), duration0.getSeconds());
      assertEquals((-3896), duration0.getDays());
      assertEquals(11, duration0.getHours());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-1531129912L), duration0.getInterval());
      assertEquals(678, duration0.getMinutes());
      assertEquals(23, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      
      boolean boolean0 = recurrence0.candidateIsInRecurrence((Calendar) null, true);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=640,MONTH=640,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2316,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=93,HOUR_OF_DAY=93,MINUTE=640,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals((-4459), duration0.getSeconds());
      assertEquals((-3896), duration0.getDays());
      assertEquals(11, duration0.getHours());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-1531129912L), duration0.getInterval());
      assertEquals(678, duration0.getMinutes());
      assertEquals(23, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-410), (-2851), 13, (-3122), (-3122), (-410));
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-410,MONTH=-2851,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3122,HOUR_OF_DAY=-3122,MINUTE=-3122,SECOND=-410,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration();
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(5, Recurrence.MONTHLY);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-410,MONTH=-2851,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3122,HOUR_OF_DAY=-3122,MINUTE=-3122,SECOND=-410,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertNotNull(recurrence0);
      
      recurrence0.setUntil(mockGregorianCalendar0);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(5, Recurrence.MONTHLY);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-410,MONTH=-2851,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3122,HOUR_OF_DAY=-3122,MINUTE=-3122,SECOND=-410,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      
      boolean boolean0 = recurrence0.candidateIsInRecurrence(mockGregorianCalendar0, false);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(5, Recurrence.MONTHLY);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-410,MONTH=-2851,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3122,HOUR_OF_DAY=-3122,MINUTE=-3122,SECOND=-410,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration(14, 14, 32);
      assertEquals(0, duration0.getWeeks());
      assertEquals(32, duration0.getSeconds());
      assertEquals(14, duration0.getHours());
      assertEquals(51272000L, duration0.getInterval());
      assertEquals(0, duration0.getDays());
      assertEquals(14, duration0.getMinutes());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(0, duration0.getWeeks());
      assertEquals(32, duration0.getSeconds());
      assertEquals(14, duration0.getHours());
      assertEquals(51272000L, duration0.getInterval());
      assertEquals(0, duration0.getDays());
      assertEquals(14, duration0.getMinutes());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertNotNull(recurrence0);
      
      boolean boolean0 = recurrence0.isInRecurrence((Calendar) mockGregorianCalendar0, true);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(0, duration0.getWeeks());
      assertEquals(32, duration0.getSeconds());
      assertEquals(14, duration0.getHours());
      assertEquals(51272000L, duration0.getInterval());
      assertEquals(0, duration0.getDays());
      assertEquals(14, duration0.getMinutes());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Locale locale0 = new Locale("");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertNotNull(calendar0);
      
      Duration duration0 = new Duration(3112);
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getMinutes());
      assertEquals(941924352L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(3112, duration0.getWeeks());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(calendar0, duration0);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getMinutes());
      assertEquals(941924352L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(3112, duration0.getWeeks());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(1, recurrence0.getInterval());
      assertNotNull(recurrence0);
      
      boolean boolean0 = recurrence0.isInRecurrence(calendar0, false);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getMinutes());
      assertEquals(941924352L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(3112, duration0.getWeeks());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(1, recurrence0.getInterval());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-410), (-2851), 13, (-3122), (-3122), (-410));
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-410,MONTH=-2851,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3122,HOUR_OF_DAY=-3122,MINUTE=-3122,SECOND=-410,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration();
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0L, duration0.getInterval());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-410,MONTH=-2851,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3122,HOUR_OF_DAY=-3122,MINUTE=-3122,SECOND=-410,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0L, duration0.getInterval());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertNotNull(recurrence0);
      
      DayAndPosition dayAndPosition0 = new DayAndPosition();
      assertEquals(0, DayAndPosition.NO_WEEKDAY);
      assertEquals(0, dayAndPosition0.getDayPosition());
      assertEquals(0, dayAndPosition0.getDayOfWeek());
      assertNotNull(dayAndPosition0);
      
      boolean boolean0 = recurrence0.matchesIndividualByDay(mockGregorianCalendar0, dayAndPosition0);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(0, DayAndPosition.NO_WEEKDAY);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-82613974130000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=649,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=32,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=51,SECOND=10,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0L, duration0.getInterval());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, dayAndPosition0.getDayPosition());
      assertEquals(0, dayAndPosition0.getDayOfWeek());
      assertFalse(boolean0);
      
      boolean boolean1 = recurrence0.isInRecurrence((Calendar) mockGregorianCalendar0, true);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(5, Recurrence.MONTHLY);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-82613974130000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=649,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=32,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=51,SECOND=10,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0L, duration0.getInterval());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1848), 652, 1);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1848,MONTH=652,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration(652, (-1848), 1, 652);
      assertEquals(0, duration0.getWeeks());
      assertEquals(652, duration0.getSeconds());
      assertEquals(652, duration0.getDays());
      assertEquals((-1858895552L), duration0.getInterval());
      assertEquals((-1848), duration0.getHours());
      assertEquals(1, duration0.getMinutes());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1848,MONTH=652,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, duration0.getWeeks());
      assertEquals(652, duration0.getSeconds());
      assertEquals(652, duration0.getDays());
      assertEquals((-1858895552L), duration0.getInterval());
      assertEquals((-1848), duration0.getHours());
      assertEquals(1, duration0.getMinutes());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertNotNull(recurrence0);
      
      int[] intArray0 = new int[8];
      boolean boolean0 = Recurrence.matchesByField(intArray0, 4, mockGregorianCalendar0, true);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-118771315200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1795,MONTH=4,WEEK_OF_YEAR=18,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=121,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = recurrence0.isInRecurrence((Calendar) mockGregorianCalendar0, false);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertTrue(boolean1 == boolean0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-118771315200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1795,MONTH=4,WEEK_OF_YEAR=18,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=121,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, duration0.getWeeks());
      assertEquals(652, duration0.getSeconds());
      assertEquals(652, duration0.getDays());
      assertEquals((-1858895552L), duration0.getInterval());
      assertEquals((-1848), duration0.getHours());
      assertEquals(1, duration0.getMinutes());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertNotNull(calendar0);
      
      Duration duration0 = new Duration(0, (-3811), 0, (-3811));
      assertEquals(0, duration0.getMinutes());
      assertEquals((-838509112L), duration0.getInterval());
      assertEquals((-3811), duration0.getHours());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-3811), duration0.getSeconds());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(calendar0, duration0, 1876);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(0, duration0.getMinutes());
      assertEquals((-838509112L), duration0.getInterval());
      assertEquals((-3811), duration0.getHours());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-3811), duration0.getSeconds());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1876, recurrence0.getFrequency());
      assertNotNull(recurrence0);
      
      recurrence0.setByMonth((int[]) null);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(0, duration0.getMinutes());
      assertEquals((-838509112L), duration0.getInterval());
      assertEquals((-3811), duration0.getHours());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-3811), duration0.getSeconds());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1876, recurrence0.getFrequency());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration(0, 773, 773, 0);
      assertEquals((-1465787296L), duration0.getInterval());
      assertEquals(773, duration0.getHours());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(773, duration0.getMinutes());
      assertEquals(0, duration0.getSeconds());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals((-1465787296L), duration0.getInterval());
      assertEquals(773, duration0.getHours());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(773, duration0.getMinutes());
      assertEquals(0, duration0.getSeconds());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertNotNull(recurrence0);
      
      int[] intArray0 = recurrence0.getByMonth();
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals((-1465787296L), duration0.getInterval());
      assertEquals(773, duration0.getHours());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(773, duration0.getMinutes());
      assertEquals(0, duration0.getSeconds());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-410), (-2851), 13, (-3122), (-3122), (-410));
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-410,MONTH=-2851,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3122,HOUR_OF_DAY=-3122,MINUTE=-3122,SECOND=-410,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration();
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0L, duration0.getInterval());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-410,MONTH=-2851,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3122,HOUR_OF_DAY=-3122,MINUTE=-3122,SECOND=-410,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0L, duration0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertNotNull(recurrence0);
      
      int[] intArray0 = new int[5];
      recurrence0.setByMonth(intArray0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-410,MONTH=-2851,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3122,HOUR_OF_DAY=-3122,MINUTE=-3122,SECOND=-410,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0L, duration0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      int[] intArray1 = recurrence0.getByMonth();
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-410,MONTH=-2851,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3122,HOUR_OF_DAY=-3122,MINUTE=-3122,SECOND=-410,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0L, duration0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration(0, 773, 773, 0);
      assertEquals(773, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(773, duration0.getHours());
      assertEquals((-1465787296L), duration0.getInterval());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(773, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(773, duration0.getHours());
      assertEquals((-1465787296L), duration0.getInterval());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertNotNull(recurrence0);
      
      recurrence0.setByWeekNo((int[]) null);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(773, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(773, duration0.getHours());
      assertEquals((-1465787296L), duration0.getInterval());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertNotNull(calendar0);
      
      Duration duration0 = new Duration();
      assertEquals(0, duration0.getDays());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getMinutes());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(calendar0, duration0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, duration0.getDays());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getMinutes());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(1, recurrence0.getInterval());
      assertNotNull(recurrence0);
      
      int[] intArray0 = recurrence0.getByWeekNo();
      assertEquals(3, Recurrence.DAILY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, duration0.getDays());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getMinutes());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(1, recurrence0.getInterval());
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(640, 640, 2316, 93, 640);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=640,MONTH=640,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2316,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=93,HOUR_OF_DAY=93,MINUTE=640,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration(93, 11, 678, (-4459));
      assertEquals(11, duration0.getHours());
      assertEquals(678, duration0.getMinutes());
      assertEquals((-4459), duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-478913592L), duration0.getInterval());
      assertEquals(93, duration0.getDays());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=640,MONTH=640,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2316,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=93,HOUR_OF_DAY=93,MINUTE=640,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(11, duration0.getHours());
      assertEquals(678, duration0.getMinutes());
      assertEquals((-4459), duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-478913592L), duration0.getInterval());
      assertEquals(93, duration0.getDays());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertNotNull(recurrence0);
      
      int[] intArray0 = new int[1];
      recurrence0.setByWeekNo(intArray0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=640,MONTH=640,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2316,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=93,HOUR_OF_DAY=93,MINUTE=640,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(11, duration0.getHours());
      assertEquals(678, duration0.getMinutes());
      assertEquals((-4459), duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-478913592L), duration0.getInterval());
      assertEquals(93, duration0.getDays());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertArrayEquals(new int[] {0}, intArray0);
      
      int[] intArray1 = recurrence0.getByWeekNo();
      assertEquals(3, Recurrence.DAILY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=640,MONTH=640,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2316,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=93,HOUR_OF_DAY=93,MINUTE=640,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(11, duration0.getHours());
      assertEquals(678, duration0.getMinutes());
      assertEquals((-4459), duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-478913592L), duration0.getInterval());
      assertEquals(93, duration0.getDays());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertArrayEquals(new int[] {0}, intArray1);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertNotNull(calendar0);
      
      Duration duration0 = new Duration((-1645), (-1645), 3041);
      assertEquals(3041, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-1645), duration0.getHours());
      assertEquals(0, duration0.getDays());
      assertEquals((-1645), duration0.getMinutes());
      assertEquals((-1722691704L), duration0.getInterval());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(calendar0, duration0, 2669);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(3041, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-1645), duration0.getHours());
      assertEquals(0, duration0.getDays());
      assertEquals((-1645), duration0.getMinutes());
      assertEquals((-1722691704L), duration0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2669, recurrence0.getFrequency());
      assertNotNull(recurrence0);
      
      recurrence0.setByYearDay((int[]) null);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(3041, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-1645), duration0.getHours());
      assertEquals(0, duration0.getDays());
      assertEquals((-1645), duration0.getMinutes());
      assertEquals((-1722691704L), duration0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2669, recurrence0.getFrequency());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-410), (-2851), 13, (-3122), (-3122), (-410));
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-410,MONTH=-2851,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3122,HOUR_OF_DAY=-3122,MINUTE=-3122,SECOND=-410,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration();
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-410,MONTH=-2851,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3122,HOUR_OF_DAY=-3122,MINUTE=-3122,SECOND=-410,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertNotNull(recurrence0);
      
      int[] intArray0 = recurrence0.getByYearDay();
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-410,MONTH=-2851,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3122,HOUR_OF_DAY=-3122,MINUTE=-3122,SECOND=-410,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-410), (-2851), 13, (-3122), (-3122), (-410));
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-410,MONTH=-2851,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3122,HOUR_OF_DAY=-3122,MINUTE=-3122,SECOND=-410,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration();
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0L, duration0.getInterval());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-410,MONTH=-2851,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3122,HOUR_OF_DAY=-3122,MINUTE=-3122,SECOND=-410,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0L, duration0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(1, recurrence0.getInterval());
      assertNotNull(recurrence0);
      
      int[] intArray0 = new int[5];
      recurrence0.setByYearDay(intArray0);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-410,MONTH=-2851,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3122,HOUR_OF_DAY=-3122,MINUTE=-3122,SECOND=-410,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0L, duration0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(1, recurrence0.getInterval());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      int[] intArray1 = recurrence0.getByYearDay();
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-410,MONTH=-2851,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3122,HOUR_OF_DAY=-3122,MINUTE=-3122,SECOND=-410,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0L, duration0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(1, recurrence0.getInterval());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertNotNull(calendar0);
      
      Duration duration0 = new Duration();
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(calendar0, duration0);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertNotNull(recurrence0);
      
      recurrence0.setByMonthDay((int[]) null);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(640, 640, 2316, 93, 640);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=640,MONTH=640,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2316,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=93,HOUR_OF_DAY=93,MINUTE=640,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      Duration duration0 = new Duration(93, 11, 678, (-4459));
      assertEquals(93, duration0.getDays());
      assertEquals(11, duration0.getHours());
      assertEquals((-4459), duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-478913592L), duration0.getInterval());
      assertEquals(678, duration0.getMinutes());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=640,MONTH=640,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2316,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=93,HOUR_OF_DAY=93,MINUTE=640,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(93, duration0.getDays());
      assertEquals(11, duration0.getHours());
      assertEquals((-4459), duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-478913592L), duration0.getInterval());
      assertEquals(678, duration0.getMinutes());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertNotNull(recurrence0);
      
      int[] intArray0 = recurrence0.getByMonthDay();
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=640,MONTH=640,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2316,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=93,HOUR_OF_DAY=93,MINUTE=640,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(93, duration0.getDays());
      assertEquals(11, duration0.getHours());
      assertEquals((-4459), duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals((-478913592L), duration0.getInterval());
      assertEquals(678, duration0.getMinutes());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      assertNotNull(zonedDateTime0);
      
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertNotNull(gregorianCalendar0);
      
      Duration duration0 = new Duration();
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getDays());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(gregorianCalendar0, duration0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getDays());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertNotNull(recurrence0);
      
      int[] intArray0 = new int[0];
      recurrence0.setByMonthDay(intArray0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getDays());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = recurrence0.getByMonthDay();
      assertEquals(3, Recurrence.DAILY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getDays());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertNotNull(calendar0);
      
      Duration duration0 = new Duration();
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(calendar0, duration0);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertNotNull(recurrence0);
      
      recurrence0.setByDay((DayAndPosition[]) null);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(3, Recurrence.DAILY);
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertNotNull(calendar0);
      
      Duration duration0 = new Duration();
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(calendar0, duration0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertNotNull(recurrence0);
      
      DayAndPosition[] dayAndPositionArray0 = new DayAndPosition[4];
      DayAndPosition dayAndPosition0 = new DayAndPosition();
      assertEquals(0, DayAndPosition.NO_WEEKDAY);
      assertEquals(0, dayAndPosition0.getDayPosition());
      assertEquals(0, dayAndPosition0.getDayOfWeek());
      assertNotNull(dayAndPosition0);
      
      dayAndPositionArray0[0] = dayAndPosition0;
      dayAndPositionArray0[1] = dayAndPosition0;
      dayAndPositionArray0[2] = dayAndPositionArray0[0];
      dayAndPositionArray0[3] = dayAndPosition0;
      recurrence0.setByDay(dayAndPositionArray0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      
      DayAndPosition[] dayAndPositionArray1 = recurrence0.getByDay();
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(5, Recurrence.MONTHLY);
      assertFalse(dayAndPositionArray1.equals((Object)dayAndPositionArray0));
      assertNotSame(dayAndPositionArray1, dayAndPositionArray0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0L, duration0.getInterval());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getDays());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertNotNull(dayAndPositionArray1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertNotNull(locale0);
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertNotNull(calendar0);
      
      Duration duration0 = new Duration();
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0L, duration0.getInterval());
      assertNotNull(duration0);
      
      Recurrence recurrence0 = new Recurrence(calendar0, duration0);
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0L, duration0.getInterval());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertNotNull(recurrence0);
      
      DayAndPosition[] dayAndPositionArray0 = recurrence0.getByDay();
      assertEquals(3, Recurrence.DAILY);
      assertEquals(7, Recurrence.NO_RECURRENCE);
      assertEquals(5, Recurrence.MONTHLY);
      assertEquals(4, Recurrence.WEEKLY);
      assertEquals(6, Recurrence.YEARLY);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertEquals(0, duration0.getMinutes());
      assertEquals(0, duration0.getHours());
      assertEquals(0, duration0.getSeconds());
      assertEquals(0, duration0.getDays());
      assertEquals(0, duration0.getWeeks());
      assertEquals(0L, duration0.getInterval());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertNull(dayAndPositionArray0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(640, 640, 2316, 93, 640);
      Duration duration0 = new Duration(93, 11, 678, (-4459));
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      DayAndPosition[] dayAndPositionArray0 = new DayAndPosition[0];
      recurrence0.setByDay(dayAndPositionArray0);
      DayAndPosition[] dayAndPositionArray1 = recurrence0.getByDay();
      assertNotNull(dayAndPositionArray1);
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      Duration duration0 = new Duration(0);
      Recurrence recurrence0 = new Recurrence(calendar0, duration0);
      recurrence0.setUntil((Calendar) null);
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Locale locale0 = new Locale("");
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      Duration duration0 = new Duration(3112);
      Recurrence recurrence0 = new Recurrence(calendar0, duration0);
      recurrence0.setUntil(calendar0);
      Calendar calendar1 = recurrence0.getUntil();
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(1, recurrence0.getInterval());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=?,DST_OFFSET=?]", calendar1.toString());
      assertNotNull(calendar1);
      assertEquals(2, recurrence0.getWeekStart());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      Duration duration0 = new Duration();
      Recurrence recurrence0 = new Recurrence(calendar0, duration0);
      recurrence0.getUntil();
      assertEquals(1, recurrence0.getInterval());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(0, recurrence0.getOccurrence());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      Duration duration0 = new Duration();
      Recurrence recurrence0 = new Recurrence(calendar0, duration0);
      recurrence0.setInterval(6635);
      assertEquals(6635, recurrence0.getInterval());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Locale locale0 = new Locale("");
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      Duration duration0 = new Duration(3108);
      Recurrence recurrence0 = new Recurrence(calendar0, duration0);
      recurrence0.setInterval(0);
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      Duration duration0 = new Duration();
      Recurrence recurrence0 = new Recurrence(gregorianCalendar0, duration0);
      recurrence0.setFrequency(0);
      // Undeclared exception!
      try { 
        recurrence0.setFrequency(2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid frequency
         //
         verifyException("com.liferay.portal.kernel.cal.Recurrence", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-410), (-2851), 13, (-3122), (-3122), (-410));
      Duration duration0 = new Duration();
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      recurrence0.frequency = 6;
      recurrence0.setFrequency(1557);
      assertEquals(1557, recurrence0.getFrequency());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      Duration duration0 = new Duration((-1269), (-1269), 5);
      Recurrence recurrence0 = new Recurrence(calendar0, duration0, 5);
      recurrence0.setFrequency(2316);
      assertEquals(2316, recurrence0.getFrequency());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("x<");
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      Duration duration0 = new Duration(24, 101, 2, 24);
      Recurrence recurrence0 = new Recurrence(calendar0, duration0, 101);
      recurrence0.setDtStart(calendar0);
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(101, recurrence0.getFrequency());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Recurrence recurrence0 = null;
      try {
        recurrence0 = new Recurrence();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.util.CalendarFactoryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Locale locale0 = new Locale("");
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      Duration duration0 = new Duration(3108);
      Recurrence recurrence0 = new Recurrence(calendar0, duration0);
      recurrence0.setOccurrence((-681));
      int int0 = recurrence0.getOccurrence();
      assertEquals((-681), int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      Duration duration0 = new Duration();
      Recurrence recurrence0 = new Recurrence(calendar0, duration0);
      recurrence0.setDtEnd(calendar0);
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(1, recurrence0.getInterval());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(7, recurrence0.getFrequency());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-410), (-2851), 13, 13, 13, (-410));
      Duration duration0 = new Duration();
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      // Undeclared exception!
      try { 
        recurrence0.isInRecurrence((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.cal.Recurrence", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Duration duration0 = new Duration(652, (-1848), 1, 652);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      Recurrence recurrence0 = new Recurrence(calendar0, duration0, 6);
      recurrence0.getDuration();
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(1, recurrence0.getInterval());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(6, recurrence0.getFrequency());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("x<");
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      Duration duration0 = new Duration(24, 101, 2, 24);
      Recurrence recurrence0 = new Recurrence(calendar0, duration0, 101);
      Calendar calendar1 = recurrence0.getDtStart();
      assertEquals(1, recurrence0.getInterval());
      assertEquals(101, recurrence0.getFrequency());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=?,DST_OFFSET=?]", calendar1.toString());
      assertEquals(0, recurrence0.getOccurrence());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(640, 640, 2316, 93, 640);
      Duration duration0 = new Duration(93, 11, 678, (-4459));
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      int int0 = recurrence0.getOccurrence();
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(0, int0);
      assertEquals(1, recurrence0.getInterval());
      assertEquals(7, recurrence0.getFrequency());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      long long0 = Recurrence.getDayNumber(calendar0);
      assertEquals(16115L, long0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-410), (-2851), 13, (-3122), (-3122), (-410));
      Duration duration0 = new Duration();
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      recurrence0.frequency = 5;
      boolean boolean0 = recurrence0.candidateIsInRecurrence(mockGregorianCalendar0, true);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-82613974130000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=649,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=32,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=51,SECOND=10,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      Duration duration0 = new Duration();
      Recurrence recurrence0 = new Recurrence(calendar0, duration0);
      int int0 = recurrence0.getInterval();
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(1, int0);
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(0, recurrence0.getOccurrence());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      Duration duration0 = new Duration();
      Recurrence recurrence0 = new Recurrence(calendar0, duration0);
      int int0 = recurrence0.getFrequency();
      assertEquals(7, int0);
      assertEquals(1, recurrence0.getInterval());
      assertEquals(2, recurrence0.getWeekStart());
      assertEquals(0, recurrence0.getOccurrence());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Duration duration0 = new Duration(0, 773, 773, 0);
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      // Undeclared exception!
      try { 
        recurrence0.setDuration((Duration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.cal.Recurrence", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(640, 640, 2316, 93, 640);
      Duration duration0 = new Duration(93, 11, 678, (-4459));
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      int int0 = recurrence0.getWeekStart();
      assertEquals(1, recurrence0.getInterval());
      assertEquals(7, recurrence0.getFrequency());
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals(2, int0);
  }
}
