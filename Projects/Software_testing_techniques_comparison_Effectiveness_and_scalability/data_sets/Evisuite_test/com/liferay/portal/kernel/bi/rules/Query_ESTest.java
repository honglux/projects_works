/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 08 23:11:16 GMT 2017
 */

package com.liferay.portal.kernel.bi.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.liferay.portal.kernel.bi.rules.Query;
import com.liferay.portal.kernel.bi.rules.QueryType;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Query_ESTest extends Query_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Query query0 = Query.createCustomQuery("843v{'FDki?-w}?=", "y,wQ");
      assertEquals("y,wQ", query0.getQueryName());
      assertEquals("843v{'FDki?-w}?=", query0.getIdentifier());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Query query0 = Query.createCustomQuery("Qu(ry idenfier is5null.", "Qu(ry idenfier is5null.");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      query0.addArguments((List<?>) linkedList0);
      assertEquals(QueryType.CUSTOM, query0.getQueryType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Query query0 = Query.createStandardQuery();
      String string0 = query0.getQueryName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Query query0 = Query.createStandardQuery();
      String string0 = query0.getIdentifier();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Query query0 = Query.createCustomQuery("o^nA1Q", "o^nA1Q");
      Object[] objectArray0 = query0.getArguments();
      query0.addArguments(objectArray0);
      assertEquals("o^nA1Q", query0.getIdentifier());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Query query0 = Query.createCustomQuery("Qu(ry idenfier is5null.", "Qu(ry idenfier is5null.");
      Object[] objectArray0 = new Object[1];
      query0.addArguments(objectArray0);
      assertEquals("Qu(ry idenfier is5null.", query0.getQueryName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[33];
      Query query0 = Query.createStandardQuery();
      // Undeclared exception!
      try { 
        query0.addArguments(objectArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Standard queries cannot accept query arguments
         //
         verifyException("com.liferay.portal.kernel.bi.rules.Query", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Query query0 = Query.createCustomQuery("Qu(ry idenfier is5null.", "Qu(ry idenfier is5null.");
      query0.addArguments((Object[]) null);
      assertEquals(QueryType.CUSTOM, query0.getQueryType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Query query0 = Query.createStandardQuery();
      // Undeclared exception!
      try { 
        query0.addArguments((List<?>) linkedList0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Standard queries cannot accept query arguments
         //
         verifyException("com.liferay.portal.kernel.bi.rules.Query", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Query query0 = Query.createCustomQuery("0A+6!77{!#uzN", "0A+6!77{!#uzN");
      // Undeclared exception!
      try { 
        query0.addArguments((List<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Query query0 = Query.createCustomQuery("O{WRfqA2+10}", "O{WRfqA2+10}");
      query0.addArgument("O{WRfqA2+10}");
      Object[] objectArray0 = query0.getArguments();
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Query.createCustomQuery("-3+DU(izoywmt|Q5", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Query string is null.
         //
         verifyException("com.liferay.portal.kernel.bi.rules.Query", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        Query.createCustomQuery("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Query idenfier is null.
         //
         verifyException("com.liferay.portal.kernel.bi.rules.Query", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Query query0 = Query.createCustomQuery("O{WRfqA2+10}", "O{WRfqA2+10}");
      String string0 = query0.getIdentifier();
      assertEquals("O{WRfqA2+10}", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Query query0 = Query.createCustomQuery("O{WRfqA2+10}", "O{WRfqA2+10}");
      QueryType queryType0 = query0.getQueryType();
      assertEquals(QueryType.CUSTOM, queryType0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Query query0 = Query.createCustomQuery("O{WRfqA2+10}", "O{WRfqA2+10}");
      String string0 = query0.getQueryName();
      assertEquals("O{WRfqA2+10}", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Query query0 = Query.createStandardQuery();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        query0.addArgument(object0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Standard queries cannot accept query arguments
         //
         verifyException("com.liferay.portal.kernel.bi.rules.Query", e);
      }
  }
}
