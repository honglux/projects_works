/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 09 00:35:26 GMT 2017
 */

package com.liferay.portal.kernel.dao.shard;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import com.liferay.portal.kernel.dao.shard.Shard;
import com.liferay.portal.kernel.dao.shard.ShardUtil;
import javax.sql.DataSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ShardUtil_ESTest extends ShardUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ShardUtil shardUtil0 = new ShardUtil();
      Shard shard0 = mock(Shard.class, new ViolatedAssumptionAnswer());
      doReturn("jU*9~l<").when(shard0).popCompanyService();
      shardUtil0.setShard(shard0);
      String string0 = ShardUtil.popCompanyService();
      assertEquals("jU*9~l<", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ShardUtil shardUtil0 = new ShardUtil();
      Shard shard0 = mock(Shard.class, new ViolatedAssumptionAnswer());
      doReturn("").when(shard0).popCompanyService();
      shardUtil0.setShard(shard0);
      String string0 = ShardUtil.popCompanyService();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ShardUtil shardUtil0 = new ShardUtil();
      Shard shard0 = mock(Shard.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(shard0).isEnabled();
      shardUtil0.setShard(shard0);
      boolean boolean0 = ShardUtil.isEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ShardUtil shardUtil0 = new ShardUtil();
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dataSource0).toString();
      Shard shard0 = mock(Shard.class, new ViolatedAssumptionAnswer());
      doReturn(dataSource0).when(shard0).getDataSource();
      shardUtil0.setShard(shard0);
      DataSource dataSource1 = ShardUtil.getDataSource();
      assertSame(dataSource1, dataSource0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ShardUtil shardUtil0 = new ShardUtil();
      Shard shard0 = mock(Shard.class, new ViolatedAssumptionAnswer());
      doReturn("P0Y.:O^fJ@l", "").when(shard0).getCurrentShardName();
      shardUtil0.setShard(shard0);
      ShardUtil.getCurrentShardName();
      String string0 = ShardUtil.getCurrentShardName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ShardUtil shardUtil0 = new ShardUtil();
      Shard shard0 = mock(Shard.class, new ViolatedAssumptionAnswer());
      shardUtil0.setShard(shard0);
      ShardUtil.pushCompanyService("");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ShardUtil.pushCompanyService("com.liferay.portal.kernel.dao.shard.ShardUtil");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ShardUtil shardUtil0 = new ShardUtil();
      Shard shard0 = mock(Shard.class, new ViolatedAssumptionAnswer());
      shardUtil0.setShard(shard0);
      ShardUtil.pushCompanyService((-13L));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ShardUtil.pushCompanyService(3106L);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ShardUtil shardUtil0 = new ShardUtil();
      Shard shard0 = mock(Shard.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(shard0).popCompanyService();
      shardUtil0.setShard(shard0);
      String string0 = ShardUtil.popCompanyService();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = ShardUtil.popCompanyService();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ShardUtil shardUtil0 = new ShardUtil();
      Shard shard0 = mock(Shard.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(shard0).isEnabled();
      shardUtil0.setShard(shard0);
      boolean boolean0 = ShardUtil.isEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = ShardUtil.isEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ShardUtil shardUtil0 = new ShardUtil();
      Shard shard0 = mock(Shard.class, new ViolatedAssumptionAnswer());
      doReturn((DataSource) null).when(shard0).getDataSource();
      shardUtil0.setShard(shard0);
      DataSource dataSource0 = ShardUtil.getDataSource();
      assertNull(dataSource0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DataSource dataSource0 = ShardUtil.getDataSource();
      assertNull(dataSource0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ShardUtil shardUtil0 = new ShardUtil();
      Shard shard0 = mock(Shard.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(shard0).getCurrentShardName();
      shardUtil0.setShard(shard0);
      String string0 = ShardUtil.getCurrentShardName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = ShardUtil.getCurrentShardName();
      assertNull(string0);
  }
}
