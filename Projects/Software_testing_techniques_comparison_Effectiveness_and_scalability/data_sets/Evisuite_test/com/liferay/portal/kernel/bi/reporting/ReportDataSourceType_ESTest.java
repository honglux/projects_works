/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 08 23:05:52 GMT 2017
 */

package com.liferay.portal.kernel.bi.reporting;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.liferay.portal.kernel.bi.reporting.ReportDataSourceType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReportDataSourceType_ESTest extends ReportDataSourceType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ReportDataSourceType reportDataSourceType0 = ReportDataSourceType.parse("empty");
      assertEquals("empty", reportDataSourceType0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ReportDataSourceType[] reportDataSourceTypeArray0 = ReportDataSourceType.values();
      assertNotNull(reportDataSourceTypeArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ReportDataSourceType reportDataSourceType0 = ReportDataSourceType.valueOf("EMPTY");
      assertEquals(ReportDataSourceType.EMPTY, reportDataSourceType0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ReportDataSourceType reportDataSourceType0 = ReportDataSourceType.parse("XML");
      assertEquals("xml", reportDataSourceType0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ReportDataSourceType reportDataSourceType0 = ReportDataSourceType.parse("XLS");
      assertEquals("xls", reportDataSourceType0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ReportDataSourceType reportDataSourceType0 = ReportDataSourceType.parse("PORTAL");
      assertEquals("portal", reportDataSourceType0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReportDataSourceType.parse("pbrtal");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid data source type pbrtal
         //
         verifyException("com.liferay.portal.kernel.bi.reporting.ReportDataSourceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ReportDataSourceType reportDataSourceType0 = ReportDataSourceType.parse("JDBC");
      assertEquals("jdbc", reportDataSourceType0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ReportDataSourceType reportDataSourceType0 = ReportDataSourceType.parse("CSV");
      assertEquals("csv", reportDataSourceType0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ReportDataSourceType reportDataSourceType0 = ReportDataSourceType.parse("jdbc");
      assertEquals("jdbc", reportDataSourceType0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ReportDataSourceType reportDataSourceType0 = ReportDataSourceType.parse("EMPTY");
      assertEquals("empty", reportDataSourceType0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ReportDataSourceType reportDataSourceType0 = ReportDataSourceType.EMPTY;
      String string0 = reportDataSourceType0.toString();
      assertEquals("empty", string0);
  }
}
