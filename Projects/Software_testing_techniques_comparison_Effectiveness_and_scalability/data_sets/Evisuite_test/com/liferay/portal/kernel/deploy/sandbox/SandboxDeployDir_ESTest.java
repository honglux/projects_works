/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 09 00:43:27 GMT 2017
 */

package com.liferay.portal.kernel.deploy.sandbox;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.liferay.portal.kernel.deploy.sandbox.SandboxDeployDir;
import com.liferay.portal.kernel.deploy.sandbox.SandboxDeployListener;
import java.io.File;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SandboxDeployDir_ESTest extends SandboxDeployDir_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      LinkedList<SandboxDeployListener> linkedList0 = new LinkedList<SandboxDeployListener>();
      SandboxDeployDir sandboxDeployDir0 = new SandboxDeployDir("&?y-LTb0r[", mockFile0, (-381L), linkedList0);
      sandboxDeployDir0.start();
      assertEquals("&?y-LTb0r[", sandboxDeployDir0.getName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("U0\"?/kk/zBId");
      LinkedList<SandboxDeployListener> linkedList0 = new LinkedList<SandboxDeployListener>();
      SandboxDeployDir sandboxDeployDir0 = new SandboxDeployDir("U0\"?/kk/zBId", mockFile0, 5589L, linkedList0);
      SandboxDeployListener sandboxDeployListener0 = mock(SandboxDeployListener.class, new ViolatedAssumptionAnswer());
      sandboxDeployDir0.registerListener(sandboxDeployListener0);
      sandboxDeployDir0.undeployDir(mockFile0);
      assertEquals("U0\"?/kk/zBId", sandboxDeployDir0.getName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<SandboxDeployListener> linkedList0 = new LinkedList<SandboxDeployListener>();
      SandboxDeployDir sandboxDeployDir0 = new SandboxDeployDir("Ao[7,iOA~WT+*|aQp^", (File) null, 0L, linkedList0);
      String string0 = sandboxDeployDir0.getName();
      assertEquals("Ao[7,iOA~WT+*|aQp^", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      LinkedList<SandboxDeployListener> linkedList0 = new LinkedList<SandboxDeployListener>();
      SandboxDeployDir sandboxDeployDir0 = new SandboxDeployDir("", mockFile0, 1L, linkedList0);
      String string0 = sandboxDeployDir0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      LinkedList<SandboxDeployListener> linkedList0 = new LinkedList<SandboxDeployListener>();
      SandboxDeployDir sandboxDeployDir0 = new SandboxDeployDir("", mockFile0, 2976L, linkedList0);
      sandboxDeployDir0.registerListener((SandboxDeployListener) null);
      sandboxDeployDir0.getListeners();
      assertEquals("", sandboxDeployDir0.getName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("aT1j[");
      LinkedList<SandboxDeployListener> linkedList0 = new LinkedList<SandboxDeployListener>();
      SandboxDeployDir sandboxDeployDir0 = new SandboxDeployDir("aT1j[", mockFile0, 0L, linkedList0);
      sandboxDeployDir0.getInterval();
      assertEquals("aT1j[", sandboxDeployDir0.getName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("U0\"?/kk/zBId");
      LinkedList<SandboxDeployListener> linkedList0 = new LinkedList<SandboxDeployListener>();
      SandboxDeployDir sandboxDeployDir0 = new SandboxDeployDir("U0\"?/kk/zBId", mockFile0, 5589L, linkedList0);
      long long0 = sandboxDeployDir0.getInterval();
      assertEquals(5589L, long0);
      assertEquals("U0\"?/kk/zBId", sandboxDeployDir0.getName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<SandboxDeployListener> linkedList0 = new LinkedList<SandboxDeployListener>();
      SandboxDeployDir sandboxDeployDir0 = new SandboxDeployDir("A", (File) null, 0L, linkedList0);
      sandboxDeployDir0.getDeployDir();
      assertEquals("A", sandboxDeployDir0.getName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".", ".");
      LinkedList<SandboxDeployListener> linkedList0 = new LinkedList<SandboxDeployListener>();
      SandboxDeployDir sandboxDeployDir0 = new SandboxDeployDir("[?y-LTb0r[", mockFile0, (-429L), linkedList0);
      sandboxDeployDir0.getDeployDir();
      assertEquals("[?y-LTb0r[", sandboxDeployDir0.getName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      LinkedList<SandboxDeployListener> linkedList0 = new LinkedList<SandboxDeployListener>();
      SandboxDeployDir sandboxDeployDir0 = new SandboxDeployDir("&?y-LTb0r[", mockFile0, (-381L), linkedList0);
      sandboxDeployDir0.getDeployDir();
      assertEquals("&?y-LTb0r[", sandboxDeployDir0.getName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("C:\\Users\\xuhlu\\Desktop\\EECS_493\\week13\\liferay-6.0.6-master\\out\\production\\portal-service\\Sandbox deploy scanner started for \\Sandbox deploy scanner started for ");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Sandbox deploy scanner started for ");
      MockFile mockFile0 = new MockFile("Sandbox deploy scanner started for ", "Sandbox deploy scanner started for ");
      LinkedList<SandboxDeployListener> linkedList0 = new LinkedList<SandboxDeployListener>();
      SandboxDeployDir sandboxDeployDir0 = new SandboxDeployDir("Sandbox deploy scanner started for ", mockFile0, 14L, linkedList0);
      sandboxDeployDir0.getDeployDir();
      assertEquals("Sandbox deploy scanner started for ", sandboxDeployDir0.getName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SandboxDeployDir sandboxDeployDir0 = null;
      try {
        sandboxDeployDir0 = new SandboxDeployDir("H4`UCnoARe", (File) null, (-1L), (List<SandboxDeployListener>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile(";>H##-\"K", "ssYLfVS@Buy]uw2=h");
      LinkedList<SandboxDeployListener> linkedList0 = new LinkedList<SandboxDeployListener>();
      SandboxDeployDir sandboxDeployDir0 = new SandboxDeployDir(";>H##-\"K", mockFile0, 879L, linkedList0);
      sandboxDeployDir0.stop();
      assertEquals(";>H##-\"K", sandboxDeployDir0.getName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("C:\\Users\\xuhlu\\Desktop\\EECS_493\\week13\\liferay-6.0.6-master\\out\\production\\portal-service\\defaultSandboxDeployDir\\Directory ");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Sandbox deploy scanner started for ");
      MockFile mockFile0 = new MockFile("", "");
      LinkedList<SandboxDeployListener> linkedList0 = new LinkedList<SandboxDeployListener>();
      SandboxDeployDir sandboxDeployDir0 = new SandboxDeployDir("", mockFile0, 14L, linkedList0);
      sandboxDeployDir0.start();
      FileSystemHandling.createFolder(evoSuiteFile0);
      sandboxDeployDir0.scanDirectory();
      assertEquals("", sandboxDeployDir0.getName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("C:\\Users\\xuhlu\\Desktop\\EECS_493\\week13\\liferay-6.0.6-master\\out\\production\\portal-service\\defaultSandboxDeployDir\\Directory ");
      MockFile mockFile0 = new MockFile("", "");
      LinkedList<SandboxDeployListener> linkedList0 = new LinkedList<SandboxDeployListener>();
      SandboxDeployDir sandboxDeployDir0 = new SandboxDeployDir("", mockFile0, 14L, linkedList0);
      sandboxDeployDir0.start();
      FileSystemHandling.createFolder(evoSuiteFile0);
      sandboxDeployDir0.scanDirectory();
      assertEquals("", sandboxDeployDir0.getName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      LinkedList<SandboxDeployListener> linkedList0 = new LinkedList<SandboxDeployListener>();
      SandboxDeployDir sandboxDeployDir0 = new SandboxDeployDir("", mockFile0, 1L, linkedList0);
      sandboxDeployDir0.start();
      assertEquals(1L, sandboxDeployDir0.getInterval());
      
      sandboxDeployDir0.scanDirectory();
      assertEquals("", sandboxDeployDir0.getName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      LinkedList<SandboxDeployListener> linkedList0 = new LinkedList<SandboxDeployListener>();
      mockFile0.setReadOnly();
      SandboxDeployDir sandboxDeployDir0 = new SandboxDeployDir("&?y-LTb0r[", mockFile0, (-381L), linkedList0);
      sandboxDeployDir0.deployDir(mockFile0);
      assertEquals("&?y-LTb0r[", sandboxDeployDir0.getName());
      assertEquals((-381L), sandboxDeployDir0.getInterval());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".", ".");
      LinkedList<SandboxDeployListener> linkedList0 = new LinkedList<SandboxDeployListener>();
      SandboxDeployDir sandboxDeployDir0 = new SandboxDeployDir("[?y-LTb0r[", mockFile0, (-429L), linkedList0);
      sandboxDeployDir0.deployDir(mockFile0);
      assertEquals("[?y-LTb0r[", sandboxDeployDir0.getName());
      assertEquals((-429L), sandboxDeployDir0.getInterval());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      LinkedList<SandboxDeployListener> linkedList0 = new LinkedList<SandboxDeployListener>();
      SandboxDeployDir sandboxDeployDir0 = new SandboxDeployDir("&?y-LTb0r[", mockFile0, (-381L), linkedList0);
      sandboxDeployDir0.deployDir(mockFile0);
      assertEquals((-381L), sandboxDeployDir0.getInterval());
      assertEquals("&?y-LTb0r[", sandboxDeployDir0.getName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile(";>H##-\"K", "ssYLfVS@Buy]uw2=h");
      LinkedList<SandboxDeployListener> linkedList0 = new LinkedList<SandboxDeployListener>();
      SandboxDeployDir sandboxDeployDir0 = new SandboxDeployDir(";>H##-\"K", mockFile0, 879L, linkedList0);
      sandboxDeployDir0.start();
      assertTrue(mockFile0.isDirectory());
      assertEquals(";>H##-\"K", sandboxDeployDir0.getName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      LinkedList<SandboxDeployListener> linkedList0 = new LinkedList<SandboxDeployListener>();
      SandboxDeployDir sandboxDeployDir0 = new SandboxDeployDir("", mockFile0, 0L, linkedList0);
      sandboxDeployDir0.start();
      assertEquals("", sandboxDeployDir0.getName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".", ".");
      LinkedList<SandboxDeployListener> linkedList0 = new LinkedList<SandboxDeployListener>();
      SandboxDeployDir sandboxDeployDir0 = new SandboxDeployDir("[?y-LTb0r[", mockFile0, (-429L), linkedList0);
      sandboxDeployDir0.getListeners();
      assertEquals((-429L), sandboxDeployDir0.getInterval());
      assertEquals("[?y-LTb0r[", sandboxDeployDir0.getName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("W0B<m<k`", "2r");
      LinkedList<SandboxDeployListener> linkedList0 = new LinkedList<SandboxDeployListener>();
      SandboxDeployDir sandboxDeployDir0 = new SandboxDeployDir("", mockFile0, (-2679L), linkedList0);
      sandboxDeployDir0.unregisterListener((SandboxDeployListener) null);
      assertEquals((-2679L), sandboxDeployDir0.getInterval());
      assertEquals("", sandboxDeployDir0.getName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Sandbox deploy scanning is disabled for ", "1?x\"L  s%R/q");
      LinkedList<SandboxDeployListener> linkedList0 = new LinkedList<SandboxDeployListener>();
      SandboxDeployDir sandboxDeployDir0 = new SandboxDeployDir((String) null, mockFile0, (-1L), linkedList0);
      String string0 = sandboxDeployDir0.getName();
      assertEquals((-1L), sandboxDeployDir0.getInterval());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFile mockFile0 = new MockFile("W0B<m<k`", "2r");
      LinkedList<SandboxDeployListener> linkedList0 = new LinkedList<SandboxDeployListener>();
      SandboxDeployDir sandboxDeployDir0 = new SandboxDeployDir("", mockFile0, (-2679L), linkedList0);
      sandboxDeployDir0.registerListener((SandboxDeployListener) null);
      sandboxDeployDir0.undeployDir(mockFile0);
      assertEquals((-2679L), sandboxDeployDir0.getInterval());
      assertEquals("", sandboxDeployDir0.getName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFile mockFile0 = new MockFile("$N[407x<Y:w", "{8rPC?tlx*;Z*_");
      LinkedList<SandboxDeployListener> linkedList0 = new LinkedList<SandboxDeployListener>();
      SandboxDeployDir sandboxDeployDir0 = new SandboxDeployDir("$N[407x<Y:w", mockFile0, (-2234L), linkedList0);
      long long0 = sandboxDeployDir0.getInterval();
      assertEquals((-2234L), long0);
      assertEquals("$N[407x<Y:w", sandboxDeployDir0.getName());
  }
}
