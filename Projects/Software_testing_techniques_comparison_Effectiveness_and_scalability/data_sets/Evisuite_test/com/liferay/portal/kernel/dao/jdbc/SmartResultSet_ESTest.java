/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 09 00:15:49 GMT 2017
 */

package com.liferay.portal.kernel.dao.jdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.liferay.portal.kernel.dao.jdbc.SmartResultSet;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Timestamp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SmartResultSet_ESTest extends SmartResultSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).previous();
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      boolean boolean0 = smartResultSet0.previous();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-1949)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false, true).when(resultSet0).next();
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      smartResultSet0.next();
      boolean boolean0 = smartResultSet0.next();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(resultSet0).findColumn(anyString());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn("-$c= vAE").when(resultSet0).getString(anyInt());
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      String string0 = smartResultSet0.getString("zLM|n6W0eP");
      assertEquals("-$c= vAE", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-3101)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null).when(resultSet0).getString(anyInt());
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      String string0 = smartResultSet0.getString(2359);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn("-$c= vAE").when(resultSet0).getString(anyInt());
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      String string0 = smartResultSet0.getString((-932));
      assertEquals("-$c= vAE", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((short)0).when(resultSet0).getShort(anyInt());
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      short short0 = smartResultSet0.getShort(1462);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((-1), (-1), 0).when(resultSet0).findColumn(anyString());
      doReturn((double)(-1)).when(resultSet0).getDouble(anyInt());
      doReturn((-1), (-1)).when(resultSet0).getInt(anyInt());
      doReturn((long)(-1)).when(resultSet0).getLong(anyInt());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((short) (-649), (short)0, (short)0, (short)0).when(resultSet0).getShort(anyInt());
      doReturn("").when(resultSet0).getString(anyInt());
      doReturn((Timestamp) null, (Timestamp) null).when(resultSet0).getTimestamp(anyInt());
      doReturn(true, true).when(resultSet0).last();
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      smartResultSet0.last();
      smartResultSet0.findColumn("is9bkZ");
      smartResultSet0.getInt("is9bkZ");
      smartResultSet0.getInt((-1));
      smartResultSet0.getLong((int) (short) (-649));
      smartResultSet0.last();
      smartResultSet0.getString("]=cF|?C='{<6ma-df");
      smartResultSet0.getDouble(352);
      smartResultSet0.getShort("]=cF|?C='{<6ma-df");
      smartResultSet0.findColumn("");
      smartResultSet0.getShort("is9bkZ");
      smartResultSet0.getShort(3191);
      smartResultSet0.getTimestamp(3110);
      smartResultSet0.getShort((int) (short) (-649));
      Timestamp timestamp0 = smartResultSet0.getTimestamp("");
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(46).when(resultSetMetaData0).getColumnCount();
      doReturn("i/7]h4Q", "i/7]h4Q", "", "", "").when(resultSetMetaData0).getColumnName(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(47).when(resultSet0).findColumn(anyString());
      doReturn((long)46).when(resultSet0).getLong(anyInt());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      long long0 = smartResultSet0.getLong("t>&8MUW*_6");
      assertEquals(46L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-2090)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((-2854)).when(resultSet0).findColumn(anyString());
      doReturn((long)(-2854)).when(resultSet0).getLong(anyInt());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      long long0 = smartResultSet0.getLong("'_^Q#2");
      assertEquals((-2854L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-1949)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((long)0).when(resultSet0).getLong(anyInt());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      long long0 = smartResultSet0.getLong(2314);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSet0).findColumn(anyString());
      doReturn(0).when(resultSet0).getInt(anyInt());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      int int0 = smartResultSet0.getInt("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(resultSet0).findColumn(anyString());
      doReturn(1).when(resultSet0).getInt(anyInt());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      int int0 = smartResultSet0.getInt("");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSet0).getInt(anyInt());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      int int0 = smartResultSet0.getInt(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-3101)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((-3101)).when(resultSet0).findColumn(anyString());
      doReturn((-1), 1).when(resultSet0).getInt(anyInt());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      smartResultSet0.getInt("");
      int int0 = smartResultSet0.getInt(2359);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSet0).findColumn(anyString());
      doReturn(0.0F).when(resultSet0).getFloat(anyInt());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      float float0 = smartResultSet0.getFloat("");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-1949)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((-1949)).when(resultSet0).findColumn(anyString());
      doReturn((float)(-1949)).when(resultSet0).getFloat(anyInt());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      float float0 = smartResultSet0.getFloat("");
      assertEquals((-1949.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-3101)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(265.45905F, (float)(-3101)).when(resultSet0).getFloat(anyInt());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      smartResultSet0.getFloat(0);
      float float0 = smartResultSet0.getFloat((-1));
      assertEquals((-3101.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSet0).findColumn(anyString());
      doReturn(0.0).when(resultSet0).getDouble(anyInt());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      double double0 = smartResultSet0.getDouble("");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(resultSetMetaData0).getColumnCount();
      doReturn("t>&8muw*_6").when(resultSetMetaData0).getColumnName(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((-1877)).when(resultSet0).findColumn(anyString());
      doReturn((double)1).when(resultSet0).getDouble(anyInt());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      double double0 = smartResultSet0.getDouble("~M_ S\"y<h3dE");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-3156)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(resultSet0).getDouble(anyInt());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      double double0 = smartResultSet0.getDouble(352);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSet0).findColumn(anyString());
      doReturn((Date) null).when(resultSet0).getDate(anyInt());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      Date date0 = smartResultSet0.getDate("]j`y9F");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-1949)).when(resultSetMetaData0).getColumnCount();
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(date0).toString();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(date0).when(resultSet0).getDate(anyInt());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      Date date1 = smartResultSet0.getDate(2239);
      assertSame(date1, date0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).first();
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      boolean boolean0 = smartResultSet0.first();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(46).when(resultSetMetaData0).getColumnCount();
      doReturn("i/7]h4Q", "i/7]h4Q", "", "", "").when(resultSetMetaData0).getColumnName(anyInt());
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn("i/7]h4Q").when(date0).toString();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(47, 0).when(resultSet0).findColumn(anyString());
      doReturn(date0).when(resultSet0).getDate(anyInt());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      smartResultSet0.getDate("t>&8MUW*_6");
      int int0 = smartResultSet0.findColumn("4@yj$<M1Y]");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(2471).when(resultSetMetaData0).getColumnCount();
      doReturn((String) null).when(resultSetMetaData0).getColumnName(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      // Undeclared exception!
      try { 
        smartResultSet0.getTimestamp("ls(nXree6f)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      // Undeclared exception!
      try { 
        smartResultSet0.getString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-3101)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      // Undeclared exception!
      try { 
        smartResultSet0.getShort((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      // Undeclared exception!
      try { 
        smartResultSet0.getLong((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(443).when(resultSetMetaData0).getColumnCount();
      doReturn((String) null).when(resultSetMetaData0).getColumnName(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      // Undeclared exception!
      try { 
        smartResultSet0.getInt("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      // Undeclared exception!
      try { 
        smartResultSet0.getFloat((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      // Undeclared exception!
      try { 
        smartResultSet0.getDouble((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(resultSetMetaData0).getColumnCount();
      doReturn((String) null).when(resultSetMetaData0).getColumnName(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      // Undeclared exception!
      try { 
        smartResultSet0.getDate("^A=5n&ri");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      // Undeclared exception!
      try { 
        smartResultSet0.findColumn((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SmartResultSet smartResultSet0 = null;
      try {
        smartResultSet0 = new SmartResultSet((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.dao.jdbc.SmartResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(resultSetMetaData0).getColumnCount();
      doReturn("t>&8muw*_6", "FTO^0f^").when(resultSetMetaData0).getColumnName(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((-1877)).when(resultSet0).findColumn(anyString());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      int int0 = smartResultSet0.findColumn(".qwut*?");
      assertEquals((-1877), int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(46).when(resultSetMetaData0).getColumnCount();
      doReturn("i/7]h4Q", "i/7]h4Q", "", "", "").when(resultSetMetaData0).getColumnName(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(47).when(resultSet0).findColumn(anyString());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      int int0 = smartResultSet0.findColumn("4@yj$<M1Y]");
      assertEquals(47, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(46).when(resultSetMetaData0).getColumnCount();
      doReturn("i/7]h4Q", "i/7]h4Q", "").when(resultSetMetaData0).getColumnName(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      int int0 = smartResultSet0.findColumn("");
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-3101)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((-3101)).when(resultSet0).findColumn(anyString());
      doReturn((-1)).when(resultSet0).getInt(anyInt());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      smartResultSet0.getInt("");
      int int0 = smartResultSet0.findColumn("");
      assertEquals((-3101), int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(46).when(resultSetMetaData0).getColumnCount();
      doReturn("i/7]h4Q", "i/7]h4Q", "", "", "").when(resultSetMetaData0).getColumnName(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      int int0 = smartResultSet0.findColumn("rklusy.");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(resultSetMetaData0).getColumnCount();
      doReturn("t>&8muw*_6").when(resultSetMetaData0).getColumnName(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((-1877)).when(resultSet0).findColumn(anyString());
      doReturn((-1.0)).when(resultSet0).getDouble(anyInt());
      doReturn(0L).when(resultSet0).getLong(anyInt());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      smartResultSet0.getLong("~M_ S\"y<h3dE");
      double double0 = smartResultSet0.getDouble("~M_ S\"y<h3dE");
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(resultSet0).first();
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      boolean boolean0 = smartResultSet0.first();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(46).when(resultSetMetaData0).getColumnCount();
      doReturn("i/7]h4Q", "i/7]h4Q", "").when(resultSetMetaData0).getColumnName(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((short)23).when(resultSet0).getShort(anyInt());
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      short short0 = smartResultSet0.getShort("");
      assertEquals((short)23, short0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-3101)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((-3101)).when(resultSet0).findColumn(anyString());
      doReturn(265.45905F).when(resultSet0).getFloat(anyInt());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      float float0 = smartResultSet0.getFloat("");
      assertEquals(265.45905F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(46).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(0.0F).when(resultSet0).getFloat(anyInt());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      float float0 = smartResultSet0.getFloat(936);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-3156)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).last();
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      boolean boolean0 = smartResultSet0.last();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(resultSetMetaData0).getColumnCount();
      doReturn("t>&8muw*_6").when(resultSetMetaData0).getColumnName(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((-1877)).when(resultSet0).findColumn(anyString());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null).when(resultSet0).getString(anyInt());
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      String string0 = smartResultSet0.getString("<sQ,Q75*M{");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((short)1069).when(resultSet0).getShort(anyInt());
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      short short0 = smartResultSet0.getShort((-1877));
      assertEquals((short)1069, short0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-3101)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(true).when(resultSet0).previous();
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      boolean boolean0 = smartResultSet0.previous();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-3156)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(902L).when(resultSet0).getLong(anyInt());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      long long0 = smartResultSet0.getLong(1558);
      assertEquals(902L, long0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(46).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(816.6955327509406).when(resultSet0).getDouble(anyInt());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      double double0 = smartResultSet0.getDouble(1649);
      assertEquals(816.6955327509406, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(46).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn("").when(resultSet0).getString(anyInt());
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      String string0 = smartResultSet0.getString(936);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((Date) null).when(resultSet0).getDate(anyInt());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      SmartResultSet smartResultSet0 = new SmartResultSet(resultSet0);
      Date date0 = smartResultSet0.getDate((-1));
      assertNull(date0);
  }
}
