/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 08 23:40:12 GMT 2017
 */

package com.liferay.portal.kernel.cal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.liferay.portal.kernel.cal.DayAndPosition;
import com.liferay.portal.kernel.cal.Duration;
import com.liferay.portal.kernel.cal.Recurrence;
import com.liferay.portal.kernel.cal.RecurrenceSerializer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RecurrenceSerializer_ESTest extends RecurrenceSerializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 2975, 2975);
      Duration duration0 = new Duration(5, 5, 2975, 2975);
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0, 2975);
      String string0 = RecurrenceSerializer.toCronText(recurrence0);
      assertEquals("0 0 0 22 1 3 261", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        RecurrenceSerializer.toCronText((Recurrence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.cal.RecurrenceSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2044), 1664, (-2044));
      Duration duration0 = new Duration(1664, 3, 1025);
      mockGregorianCalendar0.setLenient(false);
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      // Undeclared exception!
      try { 
        RecurrenceSerializer.toCronText(recurrence0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // YEAR
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Duration duration0 = new Duration(6, 6, 6);
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0, 6);
      DayAndPosition[] dayAndPositionArray0 = new DayAndPosition[1];
      DayAndPosition dayAndPosition0 = new DayAndPosition(6, 4);
      dayAndPositionArray0[0] = dayAndPosition0;
      recurrence0.byDay = dayAndPositionArray0;
      int[] intArray0 = new int[1];
      recurrence0.setByMonth(intArray0);
      String string0 = RecurrenceSerializer.toCronText(recurrence0);
      assertEquals("21 21 20 ? 1 6#4 2014/1", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Duration duration0 = new Duration(6, 6, 6);
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0, 6);
      int[] intArray0 = new int[1];
      recurrence0.setByMonth(intArray0);
      DayAndPosition[] dayAndPositionArray0 = new DayAndPosition[2];
      DayAndPosition dayAndPosition0 = new DayAndPosition();
      dayAndPositionArray0[0] = dayAndPosition0;
      dayAndPositionArray0[1] = dayAndPosition0;
      recurrence0.byDay = dayAndPositionArray0;
      String string0 = RecurrenceSerializer.toCronText(recurrence0);
      assertEquals("21 21 20 ? 1 ? 2014/1", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Duration duration0 = new Duration(6, 6, 6);
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0, 6);
      DayAndPosition[] dayAndPositionArray0 = new DayAndPosition[1];
      DayAndPosition dayAndPosition0 = new DayAndPosition(6, (-1));
      dayAndPositionArray0[0] = dayAndPosition0;
      recurrence0.byDay = dayAndPositionArray0;
      int[] intArray0 = new int[1];
      recurrence0.setByMonth(intArray0);
      String string0 = RecurrenceSerializer.toCronText(recurrence0);
      assertEquals("21 21 20 ? 1 6L 2014/1", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Duration duration0 = new Duration(6, 6, 6);
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0, 6);
      int[] intArray0 = new int[1];
      recurrence0.byMonthDay = intArray0;
      recurrence0.setByMonth(recurrence0.byMonthDay);
      String string0 = RecurrenceSerializer.toCronText(recurrence0);
      assertEquals("21 21 20 0 1 ? 2014/1", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Duration duration0 = new Duration(6, 6, 6);
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0, 6);
      int[] intArray0 = new int[16];
      recurrence0.byMonthDay = intArray0;
      int[] intArray1 = new int[1];
      recurrence0.setByMonth(intArray1);
      String string0 = RecurrenceSerializer.toCronText(recurrence0);
      assertEquals("21 21 20 ? 1 ? 2014/1", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Duration duration0 = new Duration(6, 6, 6);
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0, 6);
      int[] intArray0 = new int[3];
      recurrence0.setByMonth(intArray0);
      String string0 = RecurrenceSerializer.toCronText(recurrence0);
      assertEquals("21 21 20 ? 2 ? 2014/1", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Duration duration0 = new Duration(6, 6, 6);
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0, 6);
      String string0 = RecurrenceSerializer.toCronText(recurrence0);
      assertEquals("21 21 20 ? 2 ? 2014/1", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 2975, 2975);
      Duration duration0 = new Duration(5, 5, 2975, 2975);
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0, 2975);
      DayAndPosition[] dayAndPositionArray0 = new DayAndPosition[1];
      DayAndPosition dayAndPosition0 = new DayAndPosition();
      dayAndPositionArray0[0] = dayAndPosition0;
      recurrence0.byDay = dayAndPositionArray0;
      dayAndPosition0.setDayPosition((-1));
      recurrence0.frequency = 5;
      String string0 = RecurrenceSerializer.toCronText(recurrence0);
      assertEquals("0 0 0 ? 1/1 0L *", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2985, 2985, 2985, 2985, 2985, 5);
      Duration duration0 = new Duration();
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0, 2985);
      DayAndPosition[] dayAndPositionArray0 = new DayAndPosition[1];
      DayAndPosition dayAndPosition0 = new DayAndPosition();
      dayAndPositionArray0[0] = dayAndPosition0;
      recurrence0.byDay = dayAndPositionArray0;
      recurrence0.frequency = 5;
      String string0 = RecurrenceSerializer.toCronText(recurrence0);
      assertEquals("5 45 10 ? 4/1 0#0 *", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Duration duration0 = new Duration();
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0, 5);
      DayAndPosition[] dayAndPositionArray0 = new DayAndPosition[2];
      DayAndPosition dayAndPosition0 = new DayAndPosition();
      dayAndPositionArray0[0] = dayAndPosition0;
      dayAndPositionArray0[1] = dayAndPosition0;
      recurrence0.setByDay(dayAndPositionArray0);
      String string0 = RecurrenceSerializer.toCronText(recurrence0);
      assertEquals("21 21 20 ? 2/1 ? *", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2985, 2985, 2985, 2985, 2985, 5);
      Duration duration0 = new Duration();
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0, 2985);
      int[] intArray0 = new int[2];
      recurrence0.byMonthDay = intArray0;
      recurrence0.frequency = 5;
      String string0 = RecurrenceSerializer.toCronText(recurrence0);
      assertEquals("5 45 10 ? 4/1 ? *", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Duration duration0 = new Duration(5, 5, 5);
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0, 5);
      int[] intArray0 = new int[1];
      recurrence0.byMonthDay = intArray0;
      String string0 = RecurrenceSerializer.toCronText(recurrence0);
      assertEquals("21 21 20 0 2/1 ? *", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Duration duration0 = new Duration();
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0, 4);
      DayAndPosition[] dayAndPositionArray0 = new DayAndPosition[2];
      DayAndPosition dayAndPosition0 = new DayAndPosition();
      dayAndPositionArray0[0] = dayAndPosition0;
      dayAndPositionArray0[1] = dayAndPosition0;
      recurrence0.setByDay(dayAndPositionArray0);
      String string0 = RecurrenceSerializer.toCronText(recurrence0);
      assertEquals("21 21 20 ? * 0,0/1 *", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Duration duration0 = new Duration();
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0, 4);
      String string0 = RecurrenceSerializer.toCronText(recurrence0);
      assertEquals("21 21 20 ? * 6/1 *", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4, 4, 4, 4, 4);
      Duration duration0 = new Duration();
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0, 3);
      DayAndPosition[] dayAndPositionArray0 = new DayAndPosition[5];
      DayAndPosition dayAndPosition0 = new DayAndPosition();
      dayAndPositionArray0[0] = dayAndPosition0;
      dayAndPositionArray0[1] = dayAndPosition0;
      dayAndPositionArray0[2] = dayAndPosition0;
      dayAndPositionArray0[3] = dayAndPosition0;
      dayAndPositionArray0[4] = dayAndPosition0;
      recurrence0.byDay = dayAndPositionArray0;
      String string0 = RecurrenceSerializer.toCronText(recurrence0);
      assertEquals("0 4 4 ? * 0,0,0,0,0 *", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4, 4, 4, 4, 4);
      Duration duration0 = new Duration();
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0, 3);
      String string0 = RecurrenceSerializer.toCronText(recurrence0);
      assertEquals("0 4 4 4/1 * ? *", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Duration duration0 = new Duration(6, 6, 6, 6);
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0);
      String string0 = RecurrenceSerializer.toCronText(recurrence0);
      assertEquals("21 21 20 14 2 ? 2014", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2044), 1664, (-2044));
      Duration duration0 = new Duration(1664, 3, 1025);
      Recurrence recurrence0 = new Recurrence(mockGregorianCalendar0, duration0, (-2886));
      String string0 = RecurrenceSerializer.toCronText(recurrence0);
      assertEquals("0 0 0 25 1 7 1912", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RecurrenceSerializer recurrenceSerializer0 = new RecurrenceSerializer();
  }
}
