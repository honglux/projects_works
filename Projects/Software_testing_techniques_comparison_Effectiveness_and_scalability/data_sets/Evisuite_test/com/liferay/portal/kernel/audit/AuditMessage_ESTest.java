/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 08 22:48:58 GMT 2017
 */

package com.liferay.portal.kernel.audit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.liferay.portal.kernel.audit.AuditMessage;
import com.liferay.portal.kernel.json.JSONObject;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AuditMessage_ESTest extends AuditMessage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage((String) null, 0L, 0L, (String) null, "V<,IS0w8^_({CfMj", "V<,IS0w8^_({CfMj", "V<,IS0w8^_({CfMj", jSONObject0);
      String string0 = auditMessage0.getUserName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage((String) null, 0L, 0L, "", "V<,IS0w8^_({CfMj", "V<,IS0w8^_({CfMj", "", jSONObject0);
      String string0 = auditMessage0.getUserName();
      assertEquals("V<,IS0w8^_({CfMj", auditMessage0.getClassName());
      assertNotNull(string0);
      assertEquals("", auditMessage0.getMessage());
      assertEquals("V<,IS0w8^_({CfMj", auditMessage0.getClassPK());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage((String) null, 25L, 25L, "", "V<,IS0w8^_({CMj", "V<,IS0w8^_({CMj", "", jSONObject0);
      long long0 = auditMessage0.getUserId();
      assertEquals(25L, auditMessage0.getCompanyId());
      assertEquals("", auditMessage0.getUserName());
      assertEquals("", auditMessage0.getMessage());
      assertEquals("V<,IS0w8^_({CMj", auditMessage0.getClassName());
      assertEquals(25L, long0);
      assertEquals("V<,IS0w8^_({CMj", auditMessage0.getClassPK());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage((String) null, (-12L), (-12L), (String) null, (String) null, (String) null, (String) null, jSONObject0);
      long long0 = auditMessage0.getUserId();
      assertEquals((-12L), auditMessage0.getCompanyId());
      assertEquals((-12L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage((String) null, 10L, 10L, "", "V<,IS0w8^_({CfMj", "V<,IS0w8^_({CfMj", "", jSONObject0);
      auditMessage0.setTimestamp((Date) null);
      auditMessage0.getTimestamp();
      assertEquals("V<,IS0w8^_({CfMj", auditMessage0.getClassPK());
      assertEquals(10L, auditMessage0.getUserId());
      assertEquals("", auditMessage0.getMessage());
      assertEquals("", auditMessage0.getUserName());
      assertEquals("V<,IS0w8^_({CfMj", auditMessage0.getClassName());
      assertEquals(10L, auditMessage0.getCompanyId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1321, 0, 1321, (-313), 0);
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage("yyyyMMddkkmmssSSS", 0L, 0L, "yyyyMMddkkmmssSSS", "", "yyyyMMddkkmmssSSS", "className", mockDate0, jSONObject0);
      auditMessage0.setSessionID("");
      auditMessage0.getSessionID();
      assertEquals("yyyyMMddkkmmssSSS", auditMessage0.getEventType());
      assertEquals("", auditMessage0.getClassName());
      assertEquals("yyyyMMddkkmmssSSS", auditMessage0.getClassPK());
      assertEquals("yyyyMMddkkmmssSSS", auditMessage0.getUserName());
      assertEquals("className", auditMessage0.getMessage());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage("additionalInfo", 475L, 475L, "additionalInfo", "additionalInfo", "additionalInfo", "additionalInfo", jSONObject0);
      auditMessage0.setServerPort((-3186));
      int int0 = auditMessage0.getServerPort();
      assertEquals((-3186), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage((String) null, 10L, 10L, "", "V<,IS0w8^_({CfMj", "V<,IS0w8^_({CfMj", "", jSONObject0);
      auditMessage0.setServerName("[");
      auditMessage0.getServerName();
      assertEquals("", auditMessage0.getMessage());
      assertEquals(10L, auditMessage0.getCompanyId());
      assertEquals("V<,IS0w8^_({CfMj", auditMessage0.getClassName());
      assertEquals(10L, auditMessage0.getUserId());
      assertEquals("", auditMessage0.getUserName());
      assertEquals("V<,IS0w8^_({CfMj", auditMessage0.getClassPK());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage((String) null, 0L, 0L, "", (String) null, (String) null, "#uao]cu\u0005z\"^L+>>", jSONObject0);
      auditMessage0.setServerName("");
      auditMessage0.getServerName();
      assertEquals("", auditMessage0.getUserName());
      assertEquals("#uao]cu\u0005z\"^L+>>", auditMessage0.getMessage());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage((String) null, (-12L), (-12L), (String) null, (String) null, (String) null, (String) null, jSONObject0);
      auditMessage0.getMessage();
      assertEquals((-12L), auditMessage0.getCompanyId());
      assertEquals((-12L), auditMessage0.getUserId());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage((String) null, 0L, 0L, "", "V<,IS0w8^_({CfMj", "V<,IS0w8^_({CfMj", "", jSONObject0);
      String string0 = auditMessage0.getMessage();
      assertEquals("", auditMessage0.getUserName());
      assertEquals("V<,IS0w8^_({CfMj", auditMessage0.getClassPK());
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("V<,IS0w8^_({CfMj", auditMessage0.getClassName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage((String) null, 0L, 0L, "", "V<,IS0w8^_({CfMj", "V<,IS0w8^_({CfMj", "", jSONObject0);
      String string0 = auditMessage0.getEventType();
      assertNull(string0);
      assertEquals("V<,IS0w8^_({CfMj", auditMessage0.getClassPK());
      assertEquals("", auditMessage0.getUserName());
      assertEquals("", auditMessage0.getMessage());
      assertEquals("V<,IS0w8^_({CfMj", auditMessage0.getClassName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage("additionalInfo", 475L, 475L, "additionalInfo", "additionalInfo", "additionalInfo", "additionalInfo", jSONObject0);
      long long0 = auditMessage0.getCompanyId();
      assertEquals(475L, long0);
      assertEquals(475L, auditMessage0.getUserId());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage((String) null, (-1L), (-1L), "", "V<,IS0w8^_({CfMj", "V<,IS0w8^_({CfMj", "", jSONObject0);
      long long0 = auditMessage0.getCompanyId();
      assertEquals((-1L), long0);
      assertEquals("", auditMessage0.getMessage());
      assertEquals((-1L), auditMessage0.getUserId());
      assertEquals("V<,IS0w8^_({CfMj", auditMessage0.getClassName());
      assertEquals("", auditMessage0.getUserName());
      assertEquals("V<,IS0w8^_({CfMj", auditMessage0.getClassPK());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage((String) null, 0L, 0L, "", "V<,IS0w8^_({CfMj", "V<,IS0w8^_({CfMj", "", jSONObject0);
      auditMessage0.setClientIP("");
      auditMessage0.getClientIP();
      assertEquals("", auditMessage0.getUserName());
      assertEquals("", auditMessage0.getMessage());
      assertEquals("V<,IS0w8^_({CfMj", auditMessage0.getClassName());
      assertEquals("V<,IS0w8^_({CfMj", auditMessage0.getClassPK());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage("additionalInfo", 475L, 475L, "additionalInfo", "additionalInfo", "additionalInfo", "additionalInfo", jSONObject0);
      auditMessage0.setClientHost("com.liferay.portal.kernel.util.DateFormatFactoryUtil");
      auditMessage0.getClientHost();
      assertEquals(475L, auditMessage0.getCompanyId());
      assertEquals(475L, auditMessage0.getUserId());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage((String) null, 0L, 0L, "", "V<,IS0w8^_({CfMj", "V<,IS0w8^_({CfMj", "V<,IS0w8^_({CfMj", jSONObject0);
      assertEquals("V<,IS0w8^_({CfMj", auditMessage0.getClassPK());
      
      auditMessage0.setClassPK((String) null);
      auditMessage0.getClassPK();
      assertEquals("", auditMessage0.getUserName());
      assertEquals("V<,IS0w8^_({CfMj", auditMessage0.getClassName());
      assertEquals("V<,IS0w8^_({CfMj", auditMessage0.getMessage());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage((String) null, 0L, 0L, "", "V<,IS0w8^_({CfMj", "V<,IS0w8^_({CfMj", "", jSONObject0);
      assertEquals("V<,IS0w8^_({CfMj", auditMessage0.getClassPK());
      
      auditMessage0.setClassPK("");
      auditMessage0.getClassPK();
      assertEquals("", auditMessage0.getMessage());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage((String) null, (-12L), (-12L), (String) null, (String) null, (String) null, (String) null, jSONObject0);
      auditMessage0.getClassName();
      assertEquals((-12L), auditMessage0.getCompanyId());
      assertEquals((-12L), auditMessage0.getUserId());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage((String) null, 0L, 0L, "", "V<,IS0w8^_({CfMj", "V<,IS0w8^_({CfMj", "V<,IS0w8^_({CfMj", jSONObject0);
      String string0 = auditMessage0.getClassName();
      assertNotNull(string0);
      assertEquals("", auditMessage0.getUserName());
      assertEquals("V<,IS0w8^_({CfMj", auditMessage0.getMessage());
      assertEquals("V<,IS0w8^_({CfMj", auditMessage0.getClassPK());
      assertEquals("V<,IS0w8^_({CfMj", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AuditMessage auditMessage0 = null;
      try {
        auditMessage0 = new AuditMessage("2P@D1>D~?hqK", (-724L), 374L, "2P@D1>D~?hqK", "2P@D1>D~?hqK", "", "", (JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.json.JSONFactoryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AuditMessage auditMessage0 = null;
      try {
        auditMessage0 = new AuditMessage("A3&$,5IGn#~|ps9Z6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.json.JSONFactoryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AuditMessage auditMessage0 = null;
      try {
        auditMessage0 = new AuditMessage("g>0+", 592, 592, "g>0+", "g>0+", "g>0+", "g>0+", (Date) null, (JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.json.JSONFactoryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage("additionalInfo", 475L, 475L, "additionalInfo", "additionalInfo", "additionalInfo", "additionalInfo", jSONObject0);
      auditMessage0.setEventType("");
      auditMessage0.getEventType();
      assertEquals(475L, auditMessage0.getCompanyId());
      assertEquals(475L, auditMessage0.getUserId());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage("additionalInfo", 475L, 475L, "additionalInfo", "additionalInfo", "additionalInfo", "additionalInfo", jSONObject0);
      auditMessage0.setServerPort(1549);
      int int0 = auditMessage0.getServerPort();
      assertEquals(1549, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage("additionalInfo", 475L, 475L, "additionalInfo", "additionalInfo", "additionalInfo", "additionalInfo", jSONObject0);
      auditMessage0.setUserName("");
      assertEquals(475L, auditMessage0.getUserId());
      assertEquals(475L, auditMessage0.getCompanyId());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage("additionalInfo", 475L, 475L, "additionalInfo", "additionalInfo", "additionalInfo", "additionalInfo", jSONObject0);
      auditMessage0.setClassPK(475L);
      assertEquals("475", auditMessage0.getClassPK());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1321, 0, 1321, (-313), 0);
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage("yyyyMMddkkmmssSSS", 0L, 0L, "yyyyMMddkkmmssSSS", "", "yyyyMMddkkmmssSSS", "className", mockDate0, jSONObject0);
      Date date0 = auditMessage0.getTimestamp();
      assertEquals("Tue Jul 30 23:00:00 GMT 3224", date0.toString());
      assertEquals("yyyyMMddkkmmssSSS", auditMessage0.getUserName());
      assertEquals("yyyyMMddkkmmssSSS", auditMessage0.getClassPK());
      assertEquals("", auditMessage0.getClassName());
      assertEquals("className", auditMessage0.getMessage());
      assertEquals("yyyyMMddkkmmssSSS", auditMessage0.getEventType());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage((String) null, 0L, 0L, "", "", "", "", jSONObject0);
      String string0 = auditMessage0.getClassName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage("additionalInfo", 475L, 475L, "additionalInfo", "additionalInfo", "additionalInfo", "additionalInfo", jSONObject0);
      auditMessage0.getUserName();
      assertEquals(475L, auditMessage0.getUserId());
      assertEquals(475L, auditMessage0.getCompanyId());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AuditMessage auditMessage0 = null;
      try {
        auditMessage0 = new AuditMessage("Zm.4(_ 8E;", 845L, 845L, "Zm.4(_ 8E;", "Zm.4(_ 8E;", "Zm.4(_ 8E;", "Zm.4(_ 8E;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.json.JSONFactoryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage((String) null, 0L, 0L, "", "", "", "", jSONObject0);
      long long0 = auditMessage0.getUserId();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage("additionalInfo", 475L, 475L, "additionalInfo", "additionalInfo", "additionalInfo", "additionalInfo", jSONObject0);
      assertEquals(475L, auditMessage0.getUserId());
      
      auditMessage0.setUserId(0);
      assertEquals(475L, auditMessage0.getCompanyId());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage((String) null, 0L, 0L, "", "", "", "", jSONObject0);
      long long0 = auditMessage0.getCompanyId();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage("additionalInfo", 475L, 475L, "additionalInfo", "additionalInfo", "additionalInfo", "additionalInfo", jSONObject0);
      auditMessage0.getEventType();
      assertEquals(475L, auditMessage0.getCompanyId());
      assertEquals(475L, auditMessage0.getUserId());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage("additionalInfo", 475L, 475L, "additionalInfo", "additionalInfo", "additionalInfo", "additionalInfo", jSONObject0);
      auditMessage0.setClientHost("");
      auditMessage0.getClientHost();
      assertEquals(475L, auditMessage0.getUserId());
      assertEquals(475L, auditMessage0.getCompanyId());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage("additionalInfo", 475L, 475L, "additionalInfo", "additionalInfo", "additionalInfo", "additionalInfo", jSONObject0);
      int int0 = auditMessage0.getServerPort();
      assertEquals(0, int0);
      assertEquals(475L, auditMessage0.getUserId());
      assertEquals(475L, auditMessage0.getCompanyId());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage("additionalInfo", 475L, 475L, "additionalInfo", "additionalInfo", "additionalInfo", "additionalInfo", jSONObject0);
      auditMessage0.getServerName();
      assertEquals(475L, auditMessage0.getCompanyId());
      assertEquals(475L, auditMessage0.getUserId());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage("additionalInfo", 475L, 475L, "additionalInfo", "additionalInfo", "additionalInfo", "additionalInfo", jSONObject0);
      auditMessage0.getClientHost();
      assertEquals(475L, auditMessage0.getCompanyId());
      assertEquals(475L, auditMessage0.getUserId());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage((String) null, 0L, 0L, "", "", "", "", jSONObject0);
      auditMessage0.setAdditionalInfo((JSONObject) null);
      JSONObject jSONObject1 = auditMessage0.getAdditionalInfo();
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage("additionalInfo", 475L, 475L, "additionalInfo", "additionalInfo", "additionalInfo", "additionalInfo", jSONObject0);
      auditMessage0.getSessionID();
      assertEquals(475L, auditMessage0.getUserId());
      assertEquals(475L, auditMessage0.getCompanyId());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AuditMessage auditMessage0 = null;
      try {
        auditMessage0 = new AuditMessage("5=rRcv+Fp@o<1{U,H", 3L, 3L, "5=rRcv+Fp@o<1{U,H", "5=rRcv+Fp@o<1{U,H", "5=rRcv+Fp@o<1{U,H");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.json.JSONFactoryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage("additionalInfo", 475L, 475L, "additionalInfo", "additionalInfo", "additionalInfo", "additionalInfo", jSONObject0);
      auditMessage0.setMessage("8;;ZsP");
      assertEquals(475L, auditMessage0.getCompanyId());
      assertEquals(475L, auditMessage0.getUserId());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage("additionalInfo", 475L, 475L, "additionalInfo", "additionalInfo", "additionalInfo", "additionalInfo", jSONObject0);
      auditMessage0.getMessage();
      assertEquals(475L, auditMessage0.getCompanyId());
      assertEquals(475L, auditMessage0.getUserId());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      AuditMessage auditMessage0 = null;
      try {
        auditMessage0 = new AuditMessage("~\"Sy", (-534L), (-534L), "~\"Sy");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.json.JSONFactoryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage("additionalInfo", 475L, 475L, "additionalInfo", "additionalInfo", "additionalInfo", "additionalInfo", jSONObject0);
      auditMessage0.setClientIP("mYu0CExBx(_svlW{xQ2");
      auditMessage0.getClientIP();
      assertEquals(475L, auditMessage0.getUserId());
      assertEquals(475L, auditMessage0.getCompanyId());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage("additionalInfo", 475L, 475L, "additionalInfo", "additionalInfo", "additionalInfo", "additionalInfo", jSONObject0);
      auditMessage0.getClassPK();
      assertEquals(475L, auditMessage0.getUserId());
      assertEquals(475L, auditMessage0.getCompanyId());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1321, 0, 1321, (-313), 0);
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage("yyyyMMddkkmmssSSS", 0L, 0L, "yyyyMMddkkmmssSSS", "", "yyyyMMddkkmmssSSS", "className", mockDate0, jSONObject0);
      // Undeclared exception!
      try { 
        auditMessage0.toJSONObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.json.JSONFactoryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage("additionalInfo", 475L, 475L, "additionalInfo", "additionalInfo", "additionalInfo", "additionalInfo", jSONObject0);
      auditMessage0.setSessionID("z@x?<~\"NrW=j4k.H");
      auditMessage0.getSessionID();
      assertEquals(475L, auditMessage0.getCompanyId());
      assertEquals(475L, auditMessage0.getUserId());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage((String) null, 0L, 0L, "", "", "", "", jSONObject0);
      String string0 = auditMessage0.getClientIP();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage("additionalInfo", 475L, 475L, "additionalInfo", "additionalInfo", "additionalInfo", "additionalInfo", jSONObject0);
      auditMessage0.setCompanyId(475L);
      assertEquals(475L, auditMessage0.getUserId());
      assertEquals(475L, auditMessage0.getCompanyId());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSONObject jSONObject0 = mock(JSONObject.class, new ViolatedAssumptionAnswer());
      AuditMessage auditMessage0 = new AuditMessage((String) null, 0L, 0L, (String) null, "V<,IS0w8^_({CfMj", "V<,IS0w8^_({CfMj", "V<,IS0w8^_({CfMj", jSONObject0);
      auditMessage0.setClassName((String) null);
      assertNull(auditMessage0.getSessionID());
  }
}
