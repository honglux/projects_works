/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 09 00:31:21 GMT 2017
 */

package com.liferay.portal.kernel.dao.orm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.liferay.portal.kernel.dao.orm.Query;
import com.liferay.portal.kernel.dao.orm.QueryPos;
import java.io.ObjectStreamConstants;
import java.sql.Timestamp;
import java.time.Instant;
import java.time.temporal.ChronoField;
import java.util.Arrays;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QueryPos_ESTest extends QueryPos_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      Query query1 = mock(Query.class, new ViolatedAssumptionAnswer());
      Query query2 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(query0, query0).when(query2).setDouble(anyInt() , anyDouble());
      doReturn(query0, query0, query0, query1, query0).when(query2).setFloat(anyInt() , anyFloat());
      QueryPos queryPos0 = QueryPos.getInstance(query2);
      double[] doubleArray0 = new double[2];
      boolean[] booleanArray0 = new boolean[0];
      queryPos0.add(booleanArray0, 1702);
      doubleArray0[0] = 2651.765;
      doubleArray0[1] = (-1.0);
      queryPos0.add(doubleArray0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1305.792F;
      floatArray0[2] = (-106.4F);
      floatArray0[3] = 221.0F;
      Float[] floatArray1 = new Float[8];
      floatArray1[0] = (Float) 1305.792F;
      floatArray1[1] = (Float) 1305.792F;
      Float float0 = Float.valueOf(1671.4348F);
      floatArray1[2] = float0;
      Float float1 = new Float(3071.2575);
      floatArray1[3] = float1;
      floatArray1[4] = (Float) 1305.792F;
      floatArray1[5] = (Float) (-106.4F);
      floatArray1[6] = (Float) (-106.4F);
      floatArray1[7] = (Float) (-106.4F);
      // Undeclared exception!
      queryPos0.add(floatArray1, 1702);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      Query query1 = mock(Query.class, new ViolatedAssumptionAnswer());
      Query query2 = mock(Query.class, new ViolatedAssumptionAnswer());
      Query query3 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(query0, query1, query1, query1).when(query3).setDouble(anyInt() , anyDouble());
      doReturn(query2, (Query) null).when(query3).setFloat(anyInt() , anyFloat());
      doReturn(query1).when(query3).setString(anyInt() , anyString());
      QueryPos queryPos0 = QueryPos.getInstance(query3);
      Float float0 = new Float(0.0);
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(2711.8774679);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      Double.sum(2711.8774679, 961.6391847348779);
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[2]);
      Double.max(0.0, (-2093.63102666));
      doubleArray0[3] = double3;
      queryPos0.add(doubleArray0);
      queryPos0.add(float0);
      queryPos0.add((Object) "Unsupport type ");
      Timestamp[] timestampArray0 = new Timestamp[5];
      Instant instant0 = MockInstant.now();
      Instant instant1 = MockInstant.minusMillis(instant0, 0L);
      Timestamp timestamp0 = Timestamp.from(instant1);
      timestampArray0[0] = timestamp0;
      Timestamp.from(instant0);
      queryPos0.add((Object) float0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null, (Query) null, (Query) null, (Query) null, (Query) null).when(query0).setBoolean(anyInt() , anyBoolean());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      // Undeclared exception!
      queryPos0.add(booleanArray0, 2300);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null, (Query) null, (Query) null, (Query) null).when(query0).setBoolean(anyInt() , anyBoolean());
      doReturn((Query) null, (Query) null, (Query) null, (Query) null, (Query) null).when(query0).setFloat(anyInt() , anyFloat());
      doReturn((Query) null).when(query0).setSerializable(anyInt() , any(java.io.Serializable.class));
      doReturn((Query) null).when(query0).setTimestamp(anyInt() , any(java.sql.Timestamp.class));
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      Timestamp[] timestampArray0 = new Timestamp[1];
      ChronoField chronoField0 = ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR;
      queryPos0.add(timestampArray0, (-2845));
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      queryPos0.add(booleanArray0);
      queryPos0.add(timestampArray0);
      queryPos0.add((Long) null);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1476L;
      floatArray0[1] = (float) (-2845);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) (-2845);
      floatArray0[4] = (float) 1476L;
      floatArray0[5] = (float) 1476L;
      queryPos0.add(floatArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      Query query1 = mock(Query.class, new ViolatedAssumptionAnswer());
      QueryPos queryPos0 = QueryPos.getInstance(query1);
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double((-1.0));
      doubleArray0[0] = double0;
      Double double1 = new Double((-1.0));
      doubleArray0[1] = double1;
      queryPos0.add(doubleArray0, (-2589));
      queryPos0.add(doubleArray0, (-2589));
      boolean[] booleanArray0 = new boolean[24];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      // Undeclared exception!
      try { 
        queryPos0.add((boolean[]) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      Query query1 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null, (Query) null, (Query) null, (Query) null, (Query) null).when(query1).setBoolean(anyInt() , anyBoolean());
      doReturn(query0, query0, query0).when(query1).setInteger(anyInt() , anyInt());
      doReturn(query0, query0, query0, query0, query0).when(query1).setString(anyInt() , anyString());
      QueryPos queryPos0 = QueryPos.getInstance(query1);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "NORMAL";
      stringArray0[2] = "";
      stringArray0[3] = "";
      int[] intArray0 = new int[3];
      intArray0[0] = 81;
      intArray0[1] = (-1703);
      intArray0[2] = 0;
      queryPos0.add(intArray0);
      stringArray0[4] = "IGNORE";
      stringArray0[5] = "";
      stringArray0[6] = "v(";
      stringArray0[7] = "2jp!>_ceakdU&Z";
      stringArray0[8] = "";
      queryPos0.add(stringArray0);
      float[] floatArray0 = new float[0];
      queryPos0.add(floatArray0);
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = Boolean.valueOf(false);
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean(true);
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean(false);
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf("IGNORE");
      booleanArray0[4] = boolean4;
      Boolean boolean5 = new Boolean(true);
      booleanArray0[5] = boolean5;
      Boolean boolean6 = new Boolean("2jp!>_ceakdU&Z");
      booleanArray0[6] = boolean6;
      // Undeclared exception!
      queryPos0.add(booleanArray0, 1935);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      Query query1 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(query0, query0, query0, query0, query0).when(query1).setBoolean(anyInt() , anyBoolean());
      doReturn(query0, (Query) null, (Query) null, (Query) null, (Query) null).when(query1).setTimestamp(anyInt() , any(java.sql.Timestamp.class));
      QueryPos queryPos0 = QueryPos.getInstance(query1);
      Timestamp[] timestampArray0 = new Timestamp[1];
      long[] longArray0 = new long[0];
      queryPos0.add(longArray0, 528);
      Timestamp timestamp0 = new Timestamp(1447L);
      timestamp0.setNanos(674);
      Instant instant0 = timestamp0.toInstant();
      timestampArray0[0] = timestamp0;
      queryPos0.add(timestampArray0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      Timestamp.from(instant0);
      queryPos0.add(booleanArray0, 1063);
      queryPos0.add(timestampArray0, 674);
      // Undeclared exception!
      try { 
        queryPos0.add((Boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.dao.orm.QueryPos", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QueryPos queryPos0 = QueryPos.getInstance((Query) null);
      MockDate mockDate0 = new MockDate((-1), (-1), 0, 0, (-1));
      Instant instant0 = mockDate0.toInstant();
      Date date0 = Date.from(instant0);
      mockDate0.after(date0);
      mockDate0.clone();
      // Undeclared exception!
      try { 
        queryPos0.add((short)1949);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.dao.orm.QueryPos", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      Query query1 = mock(Query.class, new ViolatedAssumptionAnswer());
      Query query2 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(query0, query0, query0, query0, query0).when(query2).setBoolean(anyInt() , anyBoolean());
      doReturn(query0).when(query2).setDouble(anyInt() , anyDouble());
      doReturn(query0, query0, query1).when(query2).setFloat(anyInt() , anyFloat());
      doReturn(query0).when(query2).setInteger(anyInt() , anyInt());
      doReturn(query1, (Query) null, (Query) null).when(query2).setSerializable(anyInt() , any(java.io.Serializable.class));
      doReturn(query0).when(query2).setShort(anyInt() , anyShort());
      QueryPos queryPos0 = QueryPos.getInstance(query2);
      queryPos0.add(0);
      Float float0 = new Float((float) 0);
      queryPos0.add(float0);
      Float[] floatArray0 = new Float[2];
      floatArray0[1] = float0;
      queryPos0.add(floatArray0);
      Double double0 = new Double((-140.69));
      Double.min((double) floatArray0[1], 1.0);
      queryPos0.add(double0);
      queryPos0.add((Long) null);
      Double.min((-2557.75), 0.0);
      queryPos0.add(floatArray0);
      Double.sum(1.0, (double) floatArray0[1]);
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double0;
      queryPos0.add(doubleArray0, (-1748));
      queryPos0.add((short)844);
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = Boolean.valueOf("V?7");
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf("V?7");
      booleanArray0[2] = boolean2;
      boolean boolean3 = true;
      Boolean boolean4 = new Boolean(true);
      booleanArray0[3] = boolean4;
      Boolean boolean5 = Boolean.valueOf((boolean) boolean0);
      booleanArray0[4] = boolean5;
      Boolean boolean6 = Boolean.valueOf((boolean) boolean4);
      booleanArray0[5] = boolean6;
      Boolean boolean7 = Boolean.valueOf(boolean3);
      booleanArray0[6] = boolean7;
      Boolean boolean8 = Boolean.valueOf("V?7");
      booleanArray0[7] = boolean8;
      Boolean boolean9 = new Boolean("2~>E");
      booleanArray0[8] = boolean9;
      queryPos0.add(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null, (Query) null, (Query) null, (Query) null, (Query) null).when(query0).setDouble(anyInt() , anyDouble());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      doubleArray0[1] = double1;
      Double double2 = new Double(1.0);
      doubleArray0[2] = double2;
      Double double3 = new Double((-3059.6));
      doubleArray0[3] = double3;
      Double double4 = new Double(1.0);
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[1]);
      doubleArray0[5] = double5;
      Double double6 = new Double((double) doubleArray0[0]);
      doubleArray0[6] = double6;
      Double double7 = new Double(1.0);
      doubleArray0[7] = double7;
      // Undeclared exception!
      queryPos0.add(doubleArray0, 3254);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 0L;
      queryPos0.add(doubleArray0, (-3948));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      Query query1 = mock(Query.class, new ViolatedAssumptionAnswer());
      Query query2 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(query0, query1, query1, query0, query0).when(query2).setLong(anyInt() , anyLong());
      Boolean boolean0 = new Boolean("");
      Long[] longArray0 = new Long[5];
      Long long0 = new Long(4417L);
      longArray0[0] = long0;
      Long long1 = new Long(4417L);
      longArray0[1] = long1;
      Long long2 = new Long((long) longArray0[0]);
      longArray0[2] = long2;
      Long long3 = new Long((long) longArray0[0]);
      longArray0[3] = long3;
      Long long4 = new Long(1348L);
      longArray0[4] = long4;
      Short[] shortArray0 = new Short[6];
      Short short0 = new Short((short)1189);
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      shortArray0[1] = short1;
      short short2 = (short) (-1);
      Short short3 = new Short((short) (-1));
      shortArray0[2] = short3;
      Short short4 = new Short(short2);
      shortArray0[3] = short4;
      Short short5 = new Short(short2);
      shortArray0[4] = short5;
      Short short6 = new Short((short) (-122));
      shortArray0[5] = short6;
      QueryPos queryPos0 = QueryPos.getInstance(query2);
      // Undeclared exception!
      queryPos0.add(longArray0, 3244);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      Query query1 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null, (Query) null, (Query) null, (Query) null, (Query) null).when(query1).setLong(anyInt() , anyLong());
      doReturn(query0).when(query1).setShort(anyInt() , anyShort());
      QueryPos queryPos0 = QueryPos.getInstance(query1);
      Short short0 = new Short((short)1179);
      queryPos0.add(short0);
      Long[] longArray0 = new Long[3];
      Long long0 = new Long((short)1179);
      longArray0[0] = long0;
      Long long1 = new Long((long) longArray0[0]);
      longArray0[1] = long1;
      Long long2 = new Long((long) longArray0[0]);
      longArray0[2] = long2;
      queryPos0.add(longArray0, 2473);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      Query query1 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(query0).when(query1).setDouble(anyInt() , anyDouble());
      doReturn((Query) null, (Query) null, (Query) null, (Query) null, (Query) null).when(query1).setInteger(anyInt() , anyInt());
      QueryPos queryPos0 = QueryPos.getInstance(query1);
      queryPos0.add(1319.9);
      int[] intArray0 = new int[8];
      intArray0[0] = 230;
      intArray0[1] = 1339;
      intArray0[2] = (-1);
      intArray0[3] = 0;
      intArray0[4] = (-589);
      intArray0[5] = 0;
      intArray0[6] = (-2691);
      intArray0[7] = (-78);
      // Undeclared exception!
      queryPos0.add(intArray0, 1897);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null).when(query0).setBoolean(anyInt() , anyBoolean());
      doReturn((Query) null, (Query) null, (Query) null, (Query) null, (Query) null).when(query0).setString(anyInt() , anyString());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(2257.975);
      doubleArray0[0] = double0;
      queryPos0.add(doubleArray0, 0);
      Double double1 = new Double((-1.0));
      doubleArray0[1] = double1;
      Double.max(3728.92968417832, 0.0);
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double2;
      Double double3 = new Double(2257.975);
      Double.isFinite((double) doubleArray0[0]);
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[3]);
      doubleArray0[4] = double4;
      queryPos0.add(doubleArray0, 0);
      Float[] floatArray0 = new Float[0];
      queryPos0.add(floatArray0, 4312);
      queryPos0.add(false);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Ho\"<Ej&Z#4dHW,";
      stringArray0[1] = "";
      stringArray0[2] = ".[;q:Ib>";
      stringArray0[3] = "f_-O0";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "com.liferay.portal.kernel.dao.orm.ORMException";
      // Undeclared exception!
      queryPos0.add(stringArray0, 4312);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      QueryPos queryPos0 = QueryPos.getInstance((Query) null);
      Float[] floatArray0 = new Float[4];
      Float float0 = new Float(0.0F);
      Float float1 = new Float((-2863.1807F));
      // Undeclared exception!
      try { 
        queryPos0.add(float1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      // Undeclared exception!
      try { 
        queryPos0.add((short[]) null, (-69));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      QueryPos queryPos0 = QueryPos.getInstance((Query) null);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      // Undeclared exception!
      try { 
        queryPos0.add(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.dao.orm.QueryPos", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null, (Query) null).when(query0).setDouble(anyInt() , anyDouble());
      doReturn((Query) null, (Query) null, (Query) null, (Query) null, (Query) null).when(query0).setInteger(anyInt() , anyInt());
      doReturn((Query) null, (Query) null, (Query) null, (Query) null, (Query) null).when(query0).setShort(anyInt() , anyShort());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      Double double0 = new Double(1.0);
      Double.sum(1.0, (-1022.1));
      queryPos0.add(double0);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)90;
      shortArray0[2] = (short) (-5763);
      queryPos0.add((Object) double0);
      shortArray0[3] = (short) (-3749);
      queryPos0.add(shortArray0, (int) (short)90);
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = Integer.valueOf(209);
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-3998));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((short) (-3749));
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((short)0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(200);
      integerArray0[7] = integer7;
      queryPos0.add(integerArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null, (Query) null).when(query0).setFloat(anyInt() , anyFloat());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      queryPos0.add((-1.0F));
      Float float0 = new Float((-1.0));
      queryPos0.add(float0);
      // Undeclared exception!
      try { 
        queryPos0.add((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null).when(query0).setShort(anyInt() , anyShort());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      queryPos0.add((short)0);
      Boolean[] booleanArray0 = new Boolean[0];
      queryPos0.add(booleanArray0);
      // Undeclared exception!
      try { 
        queryPos0.add((Double[]) null, (-319));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.dao.orm.QueryPos", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      QueryPos queryPos0 = QueryPos.getInstance((Query) null);
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[1] = (-358L);
      longArray0[2] = 0L;
      // Undeclared exception!
      try { 
        queryPos0.add(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.dao.orm.QueryPos", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      QueryPos queryPos0 = QueryPos.getInstance((Query) null);
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)972;
      shortArray0[3] = (short) (-1849);
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)3082;
      shortArray0[7] = (short)0;
      // Undeclared exception!
      try { 
        queryPos0.add(shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.dao.orm.QueryPos", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      QueryPos.getInstance((Query) null);
      QueryPos queryPos0 = QueryPos.getInstance((Query) null);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)419;
      shortArray0[1] = (short)2446;
      shortArray0[2] = (short)1690;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "WidqEo*,wRD'LtCSzw$";
      stringArray0[2] = "gP]e)m&#6Nnux";
      stringArray0[3] = "tmIMr~][_|&NT@S";
      stringArray0[4] = "kCZ]@";
      stringArray0[5] = "z ";
      // Undeclared exception!
      try { 
        queryPos0.add(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.dao.orm.QueryPos", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null).when(query0).setFloat(anyInt() , anyFloat());
      doReturn((Query) null).when(query0).setShort(anyInt() , anyShort());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      queryPos0.add((short)0);
      Float float0 = new Float(0.0F);
      queryPos0.add(float0);
      // Undeclared exception!
      try { 
        queryPos0.add((String[]) null, (-1569));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null).when(query0).setBoolean(anyInt() , anyBoolean());
      doReturn((Query) null).when(query0).setFloat(anyInt() , anyFloat());
      doReturn((Query) null).when(query0).setString(anyInt() , anyString());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = new Boolean("tQ);|UC^F5'y$47p");
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("tQ);|UC^F5'y$47p");
      booleanArray0[1] = boolean1;
      queryPos0.add(booleanArray0, 0);
      queryPos0.add(true);
      queryPos0.add(0.0F);
      queryPos0.add((Object) "\"-");
      Query query1 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null, (Query) null, (Query) null).when(query1).setString(anyInt() , anyString());
      QueryPos queryPos1 = QueryPos.getInstance(query1);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "YA";
      stringArray0[1] = "\"-";
      stringArray0[2] = "\"-";
      queryPos1.add(stringArray0);
      Timestamp[] timestampArray0 = new Timestamp[0];
      queryPos1.add(timestampArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null).when(query0).setFloat(anyInt() , anyFloat());
      doReturn((Query) null).when(query0).setSerializable(anyInt() , any(java.io.Serializable.class));
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      queryPos0.add((Short) null);
      queryPos0.getPos();
      queryPos0.add((float) 1);
      // Undeclared exception!
      try { 
        queryPos0.add((Timestamp[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.dao.orm.QueryPos", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      QueryPos queryPos0 = QueryPos.getInstance((Query) null);
      Short[] shortArray0 = new Short[6];
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      shortArray0[0] = short1;
      Short short2 = new Short(short0);
      shortArray0[1] = short2;
      Short short3 = new Short(short0);
      shortArray0[2] = short3;
      Short short4 = new Short(short0);
      shortArray0[3] = short4;
      Short short5 = new Short((short)1);
      shortArray0[4] = short5;
      Short short6 = new Short((short)0);
      shortArray0[5] = short6;
      // Undeclared exception!
      try { 
        queryPos0.add(shortArray0, 4417);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.dao.orm.QueryPos", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      QueryPos queryPos0 = QueryPos.getInstance((Query) null);
      Short[] shortArray0 = new Short[5];
      Short short0 = new Short((short) (-901));
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-901));
      shortArray0[1] = short1;
      Short short2 = new Short((short) (-1835));
      shortArray0[2] = short2;
      Short short3 = new Short((short) (-1811));
      shortArray0[3] = short3;
      Short short4 = new Short((short) shortArray0[0]);
      short[] shortArray1 = new short[6];
      shortArray1[0] = (short) shortArray0[0];
      Short.toUnsignedInt((short) (-901));
      shortArray1[1] = (short) shortArray0[1];
      shortArray1[2] = (short) (-1835);
      shortArray1[3] = (short) shortArray0[2];
      shortArray1[4] = (short) (-1811);
      shortArray1[5] = (short) (-901);
      queryPos0.add(shortArray1, (-1));
      shortArray0[4] = short4;
      queryPos0.add(shortArray0, (int) (short) (-901));
      // Undeclared exception!
      try { 
        queryPos0.add((long) shortArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.dao.orm.QueryPos", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      QueryPos queryPos0 = QueryPos.getInstance((Query) null);
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        queryPos0.add(long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      QueryPos queryPos0 = QueryPos.getInstance((Query) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "com.liferay.portal.kernel.dao.orm.QueryPos";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "^O~(R_x4";
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (-1198.052F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-3067.279F);
      floatArray0[8] = 0.0F;
      // Undeclared exception!
      try { 
        queryPos0.add(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.dao.orm.QueryPos", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      QueryPos queryPos0 = QueryPos.getInstance((Query) null);
      Boolean boolean0 = Boolean.TRUE;
      // Undeclared exception!
      try { 
        queryPos0.add(boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.dao.orm.QueryPos", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      QueryPos queryPos0 = QueryPos.getInstance((Query) null);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      // Undeclared exception!
      try { 
        queryPos0.add(booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.dao.orm.QueryPos", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      // Undeclared exception!
      try { 
        queryPos0.add((Integer[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.dao.orm.QueryPos", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-281));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1819);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      integerArray0[3] = integer3;
      Integer integer4 = Integer.valueOf((int) integerArray0[0]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(907);
      integerArray0[5] = integer5;
      queryPos0.add(integerArray0, (-1104));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      QueryPos queryPos0 = QueryPos.getInstance((Query) null);
      queryPos0.getPos();
      Long long0 = new Long(0L);
      try { 
        Long.parseUnsignedLong("pyA0xwRhMDD", 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 0 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null).when(query0).setFloat(anyInt() , anyFloat());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      queryPos0.add(0.0F);
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = new Boolean(false);
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("!]@PK.kb{LLri'");
      Boolean.compare(true, true);
      Boolean.compare(true, false);
      booleanArray0[1] = boolean1;
      queryPos0.add(booleanArray0, 0);
      // Undeclared exception!
      try { 
        queryPos0.add((Timestamp[]) null, 1565);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.dao.orm.QueryPos", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      queryPos0.add(booleanArray0, (-1));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null, (Query) null).when(query0).setFloat(anyInt() , anyFloat());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      queryPos0.add(1.0F);
      short[] shortArray0 = new short[6];
      Float float0 = new Float(1.0F);
      queryPos0.add(float0);
      shortArray0[0] = (short) (-1551);
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)4238;
      shortArray0[4] = (short)0;
      Timestamp[] timestampArray0 = new Timestamp[0];
      queryPos0.add(timestampArray0);
      // Undeclared exception!
      try { 
        queryPos0.add((Float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.dao.orm.QueryPos", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      QueryPos queryPos0 = QueryPos.getInstance((Query) null);
      Long[] longArray0 = new Long[6];
      long long0 = (-1L);
      Long long1 = new Long((-1L));
      longArray0[0] = long1;
      Long long2 = new Long((-1052L));
      longArray0[1] = long2;
      Long long3 = new Long(long0);
      longArray0[2] = long3;
      Long long4 = new Long((-1L));
      longArray0[3] = long4;
      Long long5 = new Long(5033L);
      longArray0[4] = long5;
      Long long6 = new Long((-1875L));
      longArray0[5] = long6;
      queryPos0.add(longArray0, (-586));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      QueryPos queryPos0 = QueryPos.getInstance((Query) null);
      // Undeclared exception!
      try { 
        queryPos0.add((Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.dao.orm.QueryPos", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      // Undeclared exception!
      try { 
        queryPos0.add((Long[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.FALSE;
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean("_?sF<o#z%1Cqc6#)");
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf("_?sF<o#z%1Cqc6#)");
      Boolean.compare((boolean) boolean0, (boolean) boolean2);
      booleanArray0[3] = boolean3;
      queryPos0.add(booleanArray0, (-112));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null).when(query0).setBoolean(anyInt() , anyBoolean());
      doReturn((Query) null, (Query) null, (Query) null, (Query) null, (Query) null).when(query0).setInteger(anyInt() , anyInt());
      doReturn((Query) null, (Query) null).when(query0).setString(anyInt() , anyString());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      Boolean boolean0 = Boolean.FALSE;
      queryPos0.add((Object) boolean0);
      queryPos0.add("");
      int[] intArray0 = new int[5];
      intArray0[0] = 2297;
      intArray0[1] = 1739;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = (-549);
      queryPos0.add(intArray0);
      queryPos0.add("com.liferay.portal.kernel.dao.orm.QueryPos");
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null, (Query) null, (Query) null).when(query0).setBoolean(anyInt() , anyBoolean());
      doReturn((Query) null, (Query) null, (Query) null, (Query) null, (Query) null).when(query0).setDouble(anyInt() , anyDouble());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.FALSE;
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf(false);
      booleanArray0[2] = boolean2;
      queryPos0.add(booleanArray0);
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(1.0);
      doubleArray0[0] = double0;
      Double double1 = Double.valueOf((double) doubleArray0[0]);
      doubleArray0[1] = double1;
      Double double2 = new Double(1.0);
      doubleArray0[2] = double2;
      queryPos0.add(doubleArray0, 895);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null, (Query) null, (Query) null, (Query) null).when(query0).setDouble(anyInt() , anyDouble());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[1]);
      doubleArray0[3] = double3;
      queryPos0.add(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      QueryPos queryPos0 = QueryPos.getInstance((Query) null);
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(2232.629611);
      doubleArray0[0] = double0;
      // Undeclared exception!
      try { 
        queryPos0.add(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.dao.orm.QueryPos", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      QueryPos queryPos0 = QueryPos.getInstance((Query) null);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1;
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short) (-1553));
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      shortArray0[1] = short1;
      Short.compare((short) (-356), (short) shortArray0[0]);
      Short.toUnsignedInt((short)4488);
      Short short2 = new Short((short) (-1082));
      shortArray0[2] = short2;
      Short.compare((short)2435, (short)0);
      queryPos0.add(shortArray0, (int) shortArray0[2]);
      Short.toUnsignedLong((short) shortArray0[0]);
      intArray0[3] = 1;
      // Undeclared exception!
      try { 
        queryPos0.add(intArray0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.dao.orm.QueryPos", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null, (Query) null, (Query) null, (Query) null, (Query) null).when(query0).setBoolean(anyInt() , anyBoolean());
      doReturn((Query) null).when(query0).setTimestamp(anyInt() , any(java.sql.Timestamp.class));
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      Timestamp[] timestampArray0 = new Timestamp[1];
      long[] longArray0 = new long[0];
      queryPos0.add(longArray0, 528);
      Timestamp timestamp0 = new Timestamp(1447L);
      timestamp0.setNanos(674);
      timestamp0.toInstant();
      timestampArray0[0] = timestamp0;
      queryPos0.add(timestampArray0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      queryPos0.add(booleanArray0, 1063);
      // Undeclared exception!
      try { 
        queryPos0.add((Boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.dao.orm.QueryPos", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null, (Query) null, (Query) null, (Query) null, (Query) null).when(query0).setDouble(anyInt() , anyDouble());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      assertEquals(0, queryPos0.getPos());
      assertNotNull(queryPos0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-3036.8411461272);
      doubleArray0[1] = 2726.552;
      doubleArray0[2] = (-2925.56877);
      doubleArray0[3] = 169.0179126135;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.0;
      // Undeclared exception!
      queryPos0.add(doubleArray0, 1920);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null, (Query) null, (Query) null, (Query) null, (Query) null).when(query0).setBoolean(anyInt() , anyBoolean());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      assertEquals(0, queryPos0.getPos());
      assertNotNull(queryPos0);
      
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      boolean boolean2 = Boolean.logicalXor(true, (boolean) boolean0);
      assertFalse(boolean0.equals((Object)boolean1));
      assertTrue(boolean2);
      
      booleanArray0[1] = boolean1;
      queryPos0.add(booleanArray0, 922);
      assertEquals(1844, queryPos0.getPos());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null, (Query) null, (Query) null, (Query) null, (Query) null).when(query0).setBoolean(anyInt() , anyBoolean());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      assertEquals(0, queryPos0.getPos());
      assertNotNull(queryPos0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      queryPos0.add(booleanArray0, 504);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, false, true}, booleanArray0));
      assertEquals(3528, queryPos0.getPos());
      
      QueryPos queryPos1 = QueryPos.getInstance((Query) null);
      assertEquals(0, queryPos1.getPos());
      assertNotNull(queryPos1);
      assertFalse(queryPos1.equals((Object)queryPos0));
      assertNotSame(queryPos1, queryPos0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null).when(query0).setTimestamp(anyInt() , any(java.sql.Timestamp.class));
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      assertEquals(0, queryPos0.getPos());
      assertNotNull(queryPos0);
      
      Timestamp[] timestampArray0 = new Timestamp[1];
      Timestamp timestamp0 = new Timestamp(0L);
      assertEquals(0, timestamp0.getNanos());
      assertEquals("1970-01-01 00:00:00.0", timestamp0.toString());
      assertNotNull(timestamp0);
      
      timestampArray0[0] = timestamp0;
      queryPos0.add(timestampArray0);
      assertEquals(1, queryPos0.getPos());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null).when(query0).setFloat(anyInt() , anyFloat());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      assertEquals(0, queryPos0.getPos());
      assertNotNull(queryPos0);
      
      Query query1 = mock(Query.class, new ViolatedAssumptionAnswer());
      QueryPos queryPos1 = QueryPos.getInstance(query1);
      assertEquals(0, queryPos1.getPos());
      assertNotNull(queryPos1);
      assertFalse(queryPos1.equals((Object)queryPos0));
      assertNotSame(queryPos1, queryPos0);
      
      Float float0 = new Float((-1.0));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      queryPos0.add(float0);
      assertEquals(1, queryPos0.getPos());
      assertFalse(queryPos0.equals((Object)queryPos1));
      assertNotSame(queryPos0, queryPos1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      queryPos0.add(doubleArray0, 0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(1, queryPos0.getPos());
      assertFalse(queryPos0.equals((Object)queryPos1));
      assertNotSame(queryPos0, queryPos1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null).when(query0).setInteger(anyInt() , anyInt());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      assertEquals(0, queryPos0.getPos());
      assertNotNull(queryPos0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int int0 = Integer.divideUnsigned((-18), (-18));
      assertEquals(1, int0);
      
      double[] doubleArray0 = new double[0];
      queryPos0.add(doubleArray0, 225);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, queryPos0.getPos());
      
      int int1 = Integer.max(2191, 2191);
      assertFalse(int1 == int0);
      assertEquals(2191, int1);
      
      queryPos0.add(integer0);
      assertEquals(1, queryPos0.getPos());
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      assertEquals(0, queryPos0.getPos());
      assertNotNull(queryPos0);
      
      // Undeclared exception!
      try { 
        queryPos0.add((double[]) null, 1462);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      assertEquals(0, queryPos0.getPos());
      assertNotNull(queryPos0);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(2253.5426129371);
      assertNotNull(double0);
      assertEquals(2253.5426129371, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(2253.5426129371, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      queryPos0.add(doubleArray0, 0);
      assertEquals(0, queryPos0.getPos());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null, (Query) null, (Query) null).when(query0).setBoolean(anyInt() , anyBoolean());
      doReturn((Query) null, (Query) null).when(query0).setSerializable(anyInt() , any(java.io.Serializable.class));
      doReturn((Query) null, (Query) null, (Query) null, (Query) null, (Query) null).when(query0).setString(anyInt() , anyString());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      assertEquals(0, queryPos0.getPos());
      assertNotNull(queryPos0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "5ILD4\"?yZJI_]";
      stringArray0[1] = "";
      stringArray0[2] = "Unsupport type ";
      stringArray0[3] = "com.liferay.portal.kernel.dao.orm.ORMException";
      stringArray0[4] = "mxC`";
      stringArray0[5] = "";
      stringArray0[6] = ":(VC";
      stringArray0[7] = "";
      queryPos0.add(stringArray0, 1);
      assertEquals(8, queryPos0.getPos());
      
      queryPos0.add((Object) null);
      assertEquals(9, queryPos0.getPos());
      
      queryPos0.add((Object) null);
      assertEquals(10, queryPos0.getPos());
      
      Query query1 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null).when(query1).setFloat(anyInt() , anyFloat());
      QueryPos queryPos1 = QueryPos.getInstance(query1);
      assertEquals(0, queryPos1.getPos());
      assertNotNull(queryPos1);
      assertFalse(queryPos1.equals((Object)queryPos0));
      assertNotSame(queryPos1, queryPos0);
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      float float1 = Float.max(329.478F, 0.0F);
      assertEquals(329.478F, float1, 0.01F);
      
      queryPos1.add(float0);
      assertEquals(1, queryPos1.getPos());
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertFalse(queryPos1.equals((Object)queryPos0));
      assertNotSame(queryPos1, queryPos0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      queryPos0.add(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertEquals(13, queryPos0.getPos());
      assertFalse(queryPos0.equals((Object)queryPos1));
      assertNotSame(queryPos0, queryPos1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null).when(query0).setDouble(anyInt() , anyDouble());
      doReturn((Query) null).when(query0).setInteger(anyInt() , anyInt());
      doReturn((Query) null).when(query0).setLong(anyInt() , anyLong());
      doReturn((Query) null).when(query0).setSerializable(anyInt() , any(java.io.Serializable.class));
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      assertEquals(0, queryPos0.getPos());
      assertNotNull(queryPos0);
      
      queryPos0.add((Object) null);
      assertEquals(1, queryPos0.getPos());
      
      queryPos0.add(0.0);
      assertEquals(2, queryPos0.getPos());
      
      Integer[] integerArray0 = new Integer[1];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1, (int)integer0);
      
      Integer integer1 = Integer.getInteger("", (-59));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals((-59), (int)integer1);
      
      integerArray0[0] = integer0;
      Integer integer2 = new Integer((-640));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-640), (int)integer2);
      
      Integer integer3 = Integer.getInteger("", integer2);
      assertNotNull(integer3);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals((-640), (int)integer3);
      
      queryPos0.add(integerArray0);
      assertEquals(3, queryPos0.getPos());
      
      queryPos0.add((long) int0);
      assertEquals(4, queryPos0.getPos());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      QueryPos queryPos0 = QueryPos.getInstance((Query) null);
      assertEquals(0, queryPos0.getPos());
      assertNotNull(queryPos0);
      
      // Undeclared exception!
      try { 
        queryPos0.add((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.dao.orm.QueryPos", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null, (Query) null, (Query) null, (Query) null, (Query) null).when(query0).setInteger(anyInt() , anyInt());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      assertEquals(0, queryPos0.getPos());
      assertNotNull(queryPos0);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-1503));
      assertNotNull(integer0);
      assertEquals((-1503), (int)integer0);
      
      integerArray0[0] = integer0;
      int int0 = Integer.compare(0, (-1));
      assertEquals(1, int0);
      
      Integer integer1 = new Integer((-1503));
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals((-1503), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(3308);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(3308, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(1, (int)integer3);
      
      int int1 = Integer.remainderUnsigned(5061, 1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      integerArray0[3] = integer3;
      queryPos0.add(integerArray0);
      assertEquals(4, queryPos0.getPos());
      
      Integer integer4 = new Integer((-1503));
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)int1));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertEquals((-1503), (int)integer4);
      
      queryPos0.add(integer4);
      assertEquals(5, queryPos0.getPos());
      assertFalse(integer4.equals((Object)int1));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      
      // Undeclared exception!
      try { 
        queryPos0.add((Boolean[]) null, (-461));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.dao.orm.QueryPos", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null).when(query0).setBoolean(anyInt() , anyBoolean());
      doReturn((Query) null, (Query) null).when(query0).setInteger(anyInt() , anyInt());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      assertEquals(0, queryPos0.getPos());
      assertNotNull(queryPos0);
      
      queryPos0.add(true);
      assertEquals(1, queryPos0.getPos());
      
      Integer integer0 = new Integer(4210);
      assertNotNull(integer0);
      assertEquals(4210, (int)integer0);
      
      int int0 = Integer.remainderUnsigned((-1230), 2988);
      assertEquals(2914, int0);
      
      queryPos0.add(integer0);
      assertEquals(2, queryPos0.getPos());
      assertFalse(integer0.equals((Object)int0));
      
      queryPos0.add(0);
      assertEquals(3, queryPos0.getPos());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null).when(query0).setFloat(anyInt() , anyFloat());
      doReturn((Query) null).when(query0).setInteger(anyInt() , anyInt());
      doReturn((Query) null).when(query0).setSerializable(anyInt() , any(java.io.Serializable.class));
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      assertEquals(0, queryPos0.getPos());
      assertNotNull(queryPos0);
      
      queryPos0.add((Integer) null);
      assertEquals(1, queryPos0.getPos());
      
      Float float0 = new Float((-1.0));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      queryPos0.add(float0);
      assertEquals(2, queryPos0.getPos());
      
      queryPos0.add(0);
      assertEquals(3, queryPos0.getPos());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      QueryPos queryPos0 = QueryPos.getInstance((Query) null);
      assertEquals(0, queryPos0.getPos());
      assertNotNull(queryPos0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      queryPos0.add(booleanArray0, 0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true}, booleanArray0));
      assertEquals(0, queryPos0.getPos());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null, (Query) null, (Query) null, (Query) null, (Query) null).when(query0).setInteger(anyInt() , anyInt());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      assertEquals(0, queryPos0.getPos());
      assertNotNull(queryPos0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 153;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      queryPos0.add(intArray0);
      assertArrayEquals(new int[] {0, 153, 0, 0, 0}, intArray0);
      assertEquals(5, queryPos0.getPos());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      QueryPos queryPos0 = QueryPos.getInstance((Query) null);
      assertEquals(0, queryPos0.getPos());
      assertNotNull(queryPos0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short) (-963);
      shortArray0[3] = (short) (-1369);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)1;
      shortArray0[7] = (short)0;
      Long[] longArray0 = new Long[4];
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-32L));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-32L), (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((short) (-1369));
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals((-1369L), (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long(0L);
      assertNotNull(long3);
      assertTrue(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertEquals(0L, (long)long3);
      
      longArray0[3] = long3;
      // Undeclared exception!
      try { 
        queryPos0.add(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      Query query1 = mock(Query.class, new ViolatedAssumptionAnswer());
      Query query2 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(query0).when(query2).setBoolean(anyInt() , anyBoolean());
      doReturn(query1).when(query2).setLong(anyInt() , anyLong());
      QueryPos queryPos0 = QueryPos.getInstance(query2);
      assertEquals(0, queryPos0.getPos());
      assertNotNull(queryPos0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      Integer[] integerArray0 = new Integer[0];
      queryPos0.add(integerArray0);
      assertEquals(0, queryPos0.getPos());
      
      queryPos0.add(booleanArray0);
      assertEquals(0, queryPos0.getPos());
      
      Long long0 = new Long(659L);
      assertNotNull(long0);
      assertEquals(659L, (long)long0);
      
      queryPos0.add(long0);
      assertEquals(1, queryPos0.getPos());
      
      queryPos0.add(true);
      assertEquals(2, queryPos0.getPos());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null, (Query) null, (Query) null, (Query) null, (Query) null).when(query0).setFloat(anyInt() , anyFloat());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      assertEquals(0, queryPos0.getPos());
      assertNotNull(queryPos0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1629.7355F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 2978.4734F;
      floatArray0[5] = 1585.24F;
      floatArray0[6] = 0.0F;
      queryPos0.add(floatArray0, 1);
      assertArrayEquals(new float[] {1629.7355F, 0.0F, 0.0F, 0.0F, 2978.4734F, 1585.24F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, queryPos0.getPos());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      QueryPos queryPos0 = QueryPos.getInstance((Query) null);
      assertEquals(0, queryPos0.getPos());
      assertNotNull(queryPos0);
      
      MockDate mockDate0 = new MockDate((-1), (-1), 0, 0, (-1));
      assertEquals("Tue Nov 29 23:59:00 GMT 1898", mockDate0.toString());
      assertNotNull(mockDate0);
      
      Instant instant0 = mockDate0.toInstant();
      assertEquals("Tue Nov 29 23:59:00 GMT 1898", mockDate0.toString());
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertEquals("Tue Nov 29 23:59:00 GMT 1898", mockDate0.toString());
      assertEquals("Tue Nov 29 23:59:00 GMT 1898", date0.toString());
      assertNotNull(date0);
      
      boolean boolean0 = mockDate0.after(date0);
      assertEquals("Tue Nov 29 23:59:00 GMT 1898", mockDate0.toString());
      assertEquals("Tue Nov 29 23:59:00 GMT 1898", date0.toString());
      assertFalse(boolean0);
      
      Timestamp timestamp0 = Timestamp.from(instant0);
      assertEquals("Tue Nov 29 23:59:00 GMT 1898", mockDate0.toString());
      assertEquals(0, timestamp0.getNanos());
      assertEquals("1898-11-29 23:59:00.0", timestamp0.toString());
      assertNotNull(timestamp0);
      
      // Undeclared exception!
      try { 
        queryPos0.add(timestamp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.dao.orm.QueryPos", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      assertEquals(0, queryPos0.getPos());
      assertNotNull(queryPos0);
      
      // Undeclared exception!
      try { 
        queryPos0.add((Short[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.dao.orm.QueryPos", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      assertEquals(0, queryPos0.getPos());
      assertNotNull(queryPos0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 426.644F;
      queryPos0.add(floatArray0, (-1705));
      assertArrayEquals(new float[] {426.644F}, floatArray0, 0.01F);
      assertEquals(0, queryPos0.getPos());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      assertEquals(0, queryPos0.getPos());
      assertNotNull(queryPos0);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((-1.0F));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-1.0));
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      queryPos0.add(floatArray0, (-409));
      assertEquals(0, queryPos0.getPos());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      assertEquals(0, queryPos0.getPos());
      assertNotNull(queryPos0);
      
      Float[] floatArray0 = new Float[0];
      queryPos0.add(floatArray0, (-2543));
      assertEquals(0, queryPos0.getPos());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      QueryPos queryPos0 = QueryPos.getInstance((Query) null);
      assertEquals(0, queryPos0.getPos());
      assertNotNull(queryPos0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (-2882L);
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((float) (-2882L));
      assertNotNull(float0);
      assertEquals((-2882.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      // Undeclared exception!
      try { 
        queryPos0.add(floatArray0, 730);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      assertEquals(0, queryPos0.getPos());
      assertNotNull(queryPos0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "wt?Dk>oVZ";
      stringArray0[1] = "";
      queryPos0.add(stringArray0, (-1));
      assertEquals(0, queryPos0.getPos());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null).when(query0).setFloat(anyInt() , anyFloat());
      doReturn((Query) null).when(query0).setTimestamp(anyInt() , any(java.sql.Timestamp.class));
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      assertEquals(0, queryPos0.getPos());
      assertNotNull(queryPos0);
      
      queryPos0.add((Timestamp) null);
      assertEquals(1, queryPos0.getPos());
      
      queryPos0.add(3711.8F);
      assertEquals(2, queryPos0.getPos());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null).when(query0).setBoolean(anyInt() , anyBoolean());
      doReturn((Query) null).when(query0).setDouble(anyInt() , anyDouble());
      doReturn((Query) null).when(query0).setLong(anyInt() , anyLong());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      assertEquals(0, queryPos0.getPos());
      assertNotNull(queryPos0);
      
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      queryPos0.add(boolean0);
      assertEquals(1, queryPos0.getPos());
      
      queryPos0.add(3266.072890593);
      assertEquals(2, queryPos0.getPos());
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      queryPos0.add(long0);
      assertEquals(3, queryPos0.getPos());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      QueryPos queryPos0 = QueryPos.getInstance((Query) null);
      assertEquals(0, queryPos0.getPos());
      assertNotNull(queryPos0);
      
      Long[] longArray0 = new Long[7];
      Long long0 = new Long((-2865L));
      assertNotNull(long0);
      assertEquals((-2865L), (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(0L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      // Undeclared exception!
      try { 
        queryPos0.add(0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.dao.orm.QueryPos", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      QueryPos queryPos0 = QueryPos.getInstance((Query) null);
      assertEquals(0, queryPos0.getPos());
      assertNotNull(queryPos0);
      
      // Undeclared exception!
      try { 
        queryPos0.add(0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.dao.orm.QueryPos", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null).when(query0).setString(anyInt() , anyString());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      assertEquals(0, queryPos0.getPos());
      assertNotNull(queryPos0);
      
      Long[] longArray0 = new Long[0];
      queryPos0.add(longArray0);
      assertEquals(0, queryPos0.getPos());
      
      queryPos0.add("K<xK:=#O)@aQ(5");
      assertEquals(1, queryPos0.getPos());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null).when(query0).setBoolean(anyInt() , anyBoolean());
      doReturn((Query) null, (Query) null, (Query) null, (Query) null, (Query) null).when(query0).setLong(anyInt() , anyLong());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      assertEquals(0, queryPos0.getPos());
      assertNotNull(queryPos0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      queryPos0.add(booleanArray0, 321);
      assertEquals(0, queryPos0.getPos());
      
      queryPos0.add(true);
      assertEquals(1, queryPos0.getPos());
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 321;
      longArray0[1] = (long) 321;
      longArray0[2] = (-1304L);
      boolean[] booleanArray1 = new boolean[0];
      queryPos0.add(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, queryPos0.getPos());
      
      longArray0[3] = (long) 321;
      longArray0[4] = (long) 321;
      longArray0[5] = 210L;
      longArray0[6] = (long) 321;
      // Undeclared exception!
      queryPos0.add(longArray0, 4087);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      assertEquals(0, queryPos0.getPos());
      assertNotNull(queryPos0);
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 15L;
      queryPos0.add(longArray0, (-1));
      assertArrayEquals(new long[] {15L}, longArray0);
      assertEquals(0, queryPos0.getPos());
      
      // Undeclared exception!
      try { 
        queryPos0.add((Object) mockThaiBuddhistDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupport type org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate
         //
         verifyException("com.liferay.portal.kernel.dao.orm.QueryPos", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null).when(query0).setBoolean(anyInt() , anyBoolean());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      assertEquals(0, queryPos0.getPos());
      assertNotNull(queryPos0);
      
      queryPos0.add(true);
      assertEquals(1, queryPos0.getPos());
      
      try { 
        Double.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      QueryPos queryPos0 = QueryPos.getInstance((Query) null);
      assertEquals(0, queryPos0.getPos());
      assertNotNull(queryPos0);
      
      // Undeclared exception!
      try { 
        queryPos0.add(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.dao.orm.QueryPos", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      QueryPos queryPos0 = QueryPos.getInstance((Query) null);
      assertEquals(0, queryPos0.getPos());
      assertNotNull(queryPos0);
      
      long[] longArray0 = new long[2];
      boolean boolean0 = Boolean.logicalOr(false, false);
      assertFalse(boolean0);
      
      int int0 = Boolean.compare(false, false);
      assertEquals(0, int0);
      
      boolean boolean1 = Boolean.logicalAnd(false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean2 = Boolean.valueOf(false);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      booleanArray0[0] = boolean2;
      Boolean boolean3 = Boolean.valueOf("");
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3);
      
      booleanArray0[1] = boolean3;
      queryPos0.add(booleanArray0, 0);
      assertEquals(0, queryPos0.getPos());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      assertEquals(0, queryPos0.getPos());
      assertNotNull(queryPos0);
      
      // Undeclared exception!
      try { 
        queryPos0.add((long[]) null, 942);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null, (Query) null, (Query) null, (Query) null, (Query) null).when(query0).setDouble(anyInt() , anyDouble());
      doReturn((Query) null).when(query0).setInteger(anyInt() , anyInt());
      doReturn((Query) null).when(query0).setSerializable(anyInt() , any(java.io.Serializable.class));
      doReturn((Query) null, (Query) null, (Query) null, (Query) null, (Query) null).when(query0).setString(anyInt() , anyString());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      assertEquals(0, queryPos0.getPos());
      assertNotNull(queryPos0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 58;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "Unsupport type ";
      stringArray0[3] = "GET";
      stringArray0[4] = "";
      stringArray0[5] = "is9c`Y@g3LeR&";
      stringArray0[6] = "NORMAL";
      stringArray0[7] = "IGNORE";
      stringArray0[8] = "Unsupport type ";
      queryPos0.add(stringArray0);
      assertEquals(9, queryPos0.getPos());
      
      queryPos0.add(intArray0);
      assertArrayEquals(new int[] {58}, intArray0);
      assertEquals(10, queryPos0.getPos());
      
      queryPos0.add((Boolean) null);
      assertEquals(11, queryPos0.getPos());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 58;
      doubleArray0[1] = (double) 58;
      doubleArray0[2] = (double) 58;
      doubleArray0[3] = (double) 58;
      doubleArray0[4] = (double) 58;
      doubleArray0[5] = 1.0;
      queryPos0.add(doubleArray0);
      assertArrayEquals(new double[] {58.0, 58.0, 58.0, 58.0, 58.0, 1.0}, doubleArray0, 0.01);
      assertEquals(17, queryPos0.getPos());
      
      queryPos0.add(intArray0, (-723));
      assertArrayEquals(new int[] {58}, intArray0);
      assertEquals(17, queryPos0.getPos());
      
      Query query1 = mock(Query.class, new ViolatedAssumptionAnswer());
      QueryPos queryPos1 = QueryPos.getInstance(query1);
      assertEquals(0, queryPos1.getPos());
      assertNotNull(queryPos1);
      assertFalse(queryPos1.equals((Object)queryPos0));
      assertNotSame(queryPos1, queryPos0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null).when(query0).setShort(anyInt() , anyShort());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      assertEquals(0, queryPos0.getPos());
      assertNotNull(queryPos0);
      
      Short short0 = new Short((short) (-3842));
      assertNotNull(short0);
      assertEquals((short) (-3842), (short)short0);
      
      queryPos0.add((Object) short0);
      assertEquals(1, queryPos0.getPos());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null, (Query) null, (Query) null, (Query) null, (Query) null).when(query0).setLong(anyInt() , anyLong());
      doReturn((Query) null, (Query) null, (Query) null, (Query) null, (Query) null).when(query0).setShort(anyInt() , anyShort());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      assertEquals(0, queryPos0.getPos());
      assertNotNull(queryPos0);
      
      Long[] longArray0 = new Long[6];
      Long long0 = new Long(864L);
      assertNotNull(long0);
      assertEquals(864L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = Long.valueOf(864L);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(864L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(864L);
      assertNotNull(long2);
      assertTrue(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertEquals(864L, (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long(805L);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertEquals(805L, (long)long3);
      
      longArray0[3] = long3;
      Long long4 = new Long((-656L));
      assertNotNull(long4);
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long0));
      assertEquals((-656L), (long)long4);
      
      longArray0[4] = long4;
      Long long5 = new Long((-4126L));
      assertNotNull(long5);
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long4));
      assertEquals((-4126L), (long)long5);
      
      longArray0[5] = long5;
      queryPos0.add(longArray0);
      assertEquals(6, queryPos0.getPos());
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-4070);
      shortArray0[1] = (short) (-293);
      // Undeclared exception!
      queryPos0.add(shortArray0, 5004);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      Query query1 = mock(Query.class, new ViolatedAssumptionAnswer());
      Query query2 = mock(Query.class, new ViolatedAssumptionAnswer());
      Query query3 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(query0, query0, query0, query0, query0).when(query3).setBoolean(anyInt() , anyBoolean());
      doReturn(query0).when(query3).setDouble(anyInt() , anyDouble());
      doReturn(query0, query1, query0, query0, query2).when(query3).setFloat(anyInt() , anyFloat());
      doReturn(query0).when(query3).setInteger(anyInt() , anyInt());
      doReturn(query2).when(query3).setSerializable(anyInt() , any(java.io.Serializable.class));
      doReturn(query0).when(query3).setShort(anyInt() , anyShort());
      QueryPos queryPos0 = QueryPos.getInstance(query3);
      assertEquals(0, queryPos0.getPos());
      assertNotNull(queryPos0);
      
      queryPos0.add(0);
      assertEquals(1, queryPos0.getPos());
      
      Float float0 = new Float((float) 0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      queryPos0.add(float0);
      assertEquals(2, queryPos0.getPos());
      
      Float[] floatArray0 = new Float[2];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      queryPos0.add(floatArray0);
      assertEquals(4, queryPos0.getPos());
      
      Double double0 = new Double((-140.69));
      assertNotNull(double0);
      assertEquals((-140.69), (double)double0, 0.01);
      
      double double1 = Double.min((double) floatArray0[1], 1.0);
      assertEquals(0.0, double1, 0.01);
      
      queryPos0.add(double0);
      assertEquals(5, queryPos0.getPos());
      assertNotEquals((double)double0, (double)double1, 0.01);
      
      queryPos0.add((Long) null);
      assertEquals(6, queryPos0.getPos());
      
      double double2 = Double.min((-2557.75), 0.0);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-2557.75), double2, 0.01);
      
      queryPos0.add(floatArray0);
      assertEquals(8, queryPos0.getPos());
      
      double double3 = Double.sum(1.0, (double) floatArray0[1]);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(1.0, double3, 0.01);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double0;
      queryPos0.add(doubleArray0, (-1748));
      assertEquals(8, queryPos0.getPos());
      
      queryPos0.add((short)844);
      assertEquals(9, queryPos0.getPos());
      
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = Boolean.valueOf("V?7");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf("V?7");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      boolean boolean3 = true;
      Boolean boolean4 = new Boolean(true);
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4);
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = Boolean.valueOf((boolean) boolean0);
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean0.equals((Object)boolean4));
      assertFalse(boolean0.equals((Object)boolean3));
      assertFalse(boolean5);
      
      booleanArray0[4] = boolean5;
      Boolean boolean6 = Boolean.valueOf((boolean) boolean4);
      assertNotNull(boolean6);
      assertFalse(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean5));
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean6);
      
      booleanArray0[5] = boolean6;
      Boolean boolean7 = Boolean.valueOf(boolean3);
      assertNotNull(boolean7);
      assertTrue(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean0));
      assertTrue(boolean7);
      
      booleanArray0[6] = boolean7;
      Boolean boolean8 = Boolean.valueOf("V?7");
      assertNotNull(boolean8);
      assertFalse(boolean8.equals((Object)boolean6));
      assertFalse(boolean8.equals((Object)boolean7));
      assertFalse(boolean8.equals((Object)boolean3));
      assertFalse(boolean8.equals((Object)boolean4));
      assertFalse(boolean8);
      
      booleanArray0[7] = boolean8;
      Boolean boolean9 = new Boolean("2~>E");
      assertNotNull(boolean9);
      assertFalse(boolean9.equals((Object)boolean6));
      assertFalse(boolean9.equals((Object)boolean7));
      assertTrue(boolean9.equals((Object)boolean5));
      assertTrue(boolean9.equals((Object)boolean8));
      assertFalse(boolean9.equals((Object)boolean4));
      assertTrue(boolean9.equals((Object)boolean0));
      assertFalse(boolean9.equals((Object)boolean3));
      assertTrue(boolean9.equals((Object)boolean2));
      assertTrue(boolean9.equals((Object)boolean1));
      assertFalse(boolean9);
      
      booleanArray0[8] = boolean9;
      queryPos0.add(booleanArray0);
      assertEquals(18, queryPos0.getPos());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      Query query1 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(query0, query0, query0, query0, query0).when(query1).setInteger(anyInt() , anyInt());
      QueryPos queryPos0 = QueryPos.getInstance(query1);
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(76);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(76);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1035);
      integerArray0[3] = integer3;
      Integer.getInteger("");
      integerArray0[4] = null;
      Integer.getInteger("");
      integerArray0[5] = null;
      int int0 = (-1);
      Integer integer4 = new Integer((-1));
      integerArray0[6] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[7] = integer5;
      // Undeclared exception!
      queryPos0.add(integerArray0, 3064);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      Query query1 = mock(Query.class, new ViolatedAssumptionAnswer());
      Query query2 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(query0, query1, query1, query0, query0).when(query2).setDouble(anyInt() , anyDouble());
      doReturn(query1).when(query2).setInteger(anyInt() , anyInt());
      doReturn(query1, query1, query1, query1, query0).when(query2).setLong(anyInt() , anyLong());
      doReturn(query1, query1, query1).when(query2).setShort(anyInt() , anyShort());
      QueryPos queryPos0 = QueryPos.getInstance(query2);
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = (double) (short)0;
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      doubleArray0[6] = (double) (short)0;
      queryPos0.add(doubleArray0);
      Short.compare((short)0, (short)0);
      queryPos0.add(short1);
      Short[] shortArray0 = new Short[2];
      shortArray0[0] = short1;
      shortArray0[1] = short1;
      queryPos0.add(shortArray0);
      queryPos0.add(357);
      short[] shortArray1 = new short[0];
      queryPos0.add(shortArray1, (-2254));
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short) (-3033);
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) short0;
      longArray0[4] = (long) short0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) (short)1;
      queryPos0.add(longArray0);
      assertEquals(19, queryPos0.getPos());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      Query query1 = mock(Query.class, new ViolatedAssumptionAnswer());
      Query query2 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(query0, query0, query0, query0, query0).when(query2).setBoolean(anyInt() , anyBoolean());
      doReturn((Query) null, (Query) null, (Query) null, (Query) null).when(query2).setFloat(anyInt() , anyFloat());
      doReturn(query0, query0).when(query2).setInteger(anyInt() , anyInt());
      doReturn(query0).when(query2).setShort(anyInt() , anyShort());
      doReturn(query0, query0, query0, query0, query1).when(query2).setString(anyInt() , anyString());
      QueryPos queryPos0 = QueryPos.getInstance(query2);
      Double[] doubleArray0 = new Double[0];
      queryPos0.add(doubleArray0, (-809));
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1938);
      queryPos0.add(shortArray0);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      queryPos0.add(booleanArray0);
      Integer integer0 = new Integer((short) (-1938));
      Integer.getInteger("");
      queryPos0.add((Object) integer0);
      queryPos0.add((int) (short) (-1938));
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-809);
      floatArray0[1] = (float) (short) (-1938);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      queryPos0.add(floatArray0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "com.liferay.portal.kernel.dao.orm.QueryPos";
      stringArray0[7] = "";
      stringArray0[8] = "a";
      queryPos0.add(stringArray0);
      assertEquals(22, queryPos0.getPos());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null, (Query) null).when(query0).setBoolean(anyInt() , anyBoolean());
      QueryPos queryPos0 = QueryPos.getInstance(query0);
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = Boolean.valueOf(true);
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("");
      booleanArray0[1] = boolean1;
      queryPos0.add(booleanArray0);
      // Undeclared exception!
      try { 
        queryPos0.add((Double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.dao.orm.QueryPos", e);
      }
  }
}
