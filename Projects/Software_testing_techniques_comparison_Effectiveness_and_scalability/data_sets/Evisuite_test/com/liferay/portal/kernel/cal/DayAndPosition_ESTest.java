/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 08 23:33:58 GMT 2017
 */

package com.liferay.portal.kernel.cal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.liferay.portal.kernel.cal.DayAndPosition;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DayAndPosition_ESTest extends DayAndPosition_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DayAndPosition dayAndPosition0 = new DayAndPosition(6, 53);
      assertEquals(53, dayAndPosition0.getDayPosition());
      assertEquals(6, dayAndPosition0.getDayOfWeek());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DayAndPosition dayAndPosition0 = new DayAndPosition(0, (-53));
      assertEquals(0, dayAndPosition0.getDayOfWeek());
      assertEquals((-53), dayAndPosition0.getDayPosition());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DayAndPosition dayAndPosition0 = new DayAndPosition();
      DayAndPosition dayAndPosition1 = new DayAndPosition(0, 3);
      boolean boolean0 = dayAndPosition0.equals(dayAndPosition1);
      assertEquals(0, dayAndPosition0.getDayPosition());
      assertEquals(3, dayAndPosition1.getDayPosition());
      assertEquals(0, dayAndPosition0.getDayOfWeek());
      assertEquals(0, dayAndPosition1.getDayOfWeek());
      assertFalse(boolean0);
      assertFalse(dayAndPosition1.equals((Object)dayAndPosition0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DayAndPosition dayAndPosition0 = new DayAndPosition();
      DayAndPosition dayAndPosition1 = new DayAndPosition(6, 0);
      boolean boolean0 = dayAndPosition0.equals(dayAndPosition1);
      assertEquals(0, dayAndPosition1.getDayPosition());
      assertEquals(6, dayAndPosition1.getDayOfWeek());
      assertEquals(0, dayAndPosition0.getDayPosition());
      assertFalse(boolean0);
      assertFalse(dayAndPosition1.equals((Object)dayAndPosition0));
      assertEquals(0, dayAndPosition0.getDayOfWeek());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DayAndPosition dayAndPosition0 = new DayAndPosition(5, 5);
      dayAndPosition0.setDayOfWeek(2);
      assertEquals(2, dayAndPosition0.getDayOfWeek());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DayAndPosition dayAndPosition0 = new DayAndPosition();
      int int0 = dayAndPosition0.getDayPosition();
      assertEquals(0, dayAndPosition0.getDayOfWeek());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DayAndPosition dayAndPosition0 = new DayAndPosition();
      dayAndPosition0.setDayPosition((-13));
      int int0 = dayAndPosition0.getDayPosition();
      assertEquals((-13), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DayAndPosition dayAndPosition0 = new DayAndPosition(4, 4);
      int int0 = dayAndPosition0.getDayOfWeek();
      assertEquals(4, int0);
      assertEquals(4, dayAndPosition0.getDayPosition());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = DayAndPosition.isValidDayPosition((-1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = DayAndPosition.isValidDayPosition(899);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = DayAndPosition.isValidDayPosition((-1181));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = DayAndPosition.isValidDayOfWeek(1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = DayAndPosition.isValidDayOfWeek(7);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = DayAndPosition.isValidDayOfWeek(0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = DayAndPosition.isValidDayOfWeek(6);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = DayAndPosition.isValidDayOfWeek(5);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = DayAndPosition.isValidDayOfWeek((-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DayAndPosition dayAndPosition0 = new DayAndPosition();
      int int0 = dayAndPosition0.getDayOfWeek();
      assertEquals(0, int0);
      assertEquals(0, dayAndPosition0.getDayPosition());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = DayAndPosition.isValidDayOfWeek(4);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = DayAndPosition.isValidDayOfWeek(3);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = DayAndPosition.isValidDayOfWeek(2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DayAndPosition dayAndPosition0 = new DayAndPosition(1, 1);
      String string0 = dayAndPosition0.toString();
      assertEquals("com.liferay.portal.kernel.cal.DayAndPosition[day=1,position=1]", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DayAndPosition dayAndPosition0 = new DayAndPosition();
      DayAndPosition dayAndPosition1 = (DayAndPosition)dayAndPosition0.clone();
      dayAndPosition1.setDayPosition((-2));
      boolean boolean0 = dayAndPosition0.equals(dayAndPosition1);
      assertEquals((-2), dayAndPosition1.getDayPosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DayAndPosition dayAndPosition0 = new DayAndPosition();
      Object object0 = dayAndPosition0.clone();
      boolean boolean0 = dayAndPosition0.equals(object0);
      assertTrue(boolean0);
      assertEquals(0, dayAndPosition0.getDayPosition());
      assertNotSame(object0, dayAndPosition0);
      assertEquals(0, dayAndPosition0.getDayOfWeek());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DayAndPosition dayAndPosition0 = new DayAndPosition();
      Object object0 = new Object();
      boolean boolean0 = dayAndPosition0.equals(object0);
      assertEquals(0, dayAndPosition0.getDayPosition());
      assertEquals(0, dayAndPosition0.getDayOfWeek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DayAndPosition dayAndPosition0 = new DayAndPosition();
      boolean boolean0 = dayAndPosition0.equals(dayAndPosition0);
      assertEquals(0, dayAndPosition0.getDayPosition());
      assertTrue(boolean0);
      assertEquals(0, dayAndPosition0.getDayOfWeek());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DayAndPosition dayAndPosition0 = new DayAndPosition();
      boolean boolean0 = dayAndPosition0.equals((Object) null);
      assertEquals(0, dayAndPosition0.getDayOfWeek());
      assertFalse(boolean0);
      assertEquals(0, dayAndPosition0.getDayPosition());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DayAndPosition dayAndPosition0 = new DayAndPosition();
      // Undeclared exception!
      try { 
        dayAndPosition0.setDayPosition((-2147483647));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.cal.DayAndPosition", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DayAndPosition dayAndPosition0 = new DayAndPosition();
      // Undeclared exception!
      try { 
        dayAndPosition0.setDayOfWeek(2095);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day of week
         //
         verifyException("com.liferay.portal.kernel.cal.DayAndPosition", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DayAndPosition dayAndPosition0 = null;
      try {
        dayAndPosition0 = new DayAndPosition(6, 2291);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day position
         //
         verifyException("com.liferay.portal.kernel.cal.DayAndPosition", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DayAndPosition dayAndPosition0 = null;
      try {
        dayAndPosition0 = new DayAndPosition(325, 325);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day of week
         //
         verifyException("com.liferay.portal.kernel.cal.DayAndPosition", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DayAndPosition dayAndPosition0 = new DayAndPosition(7, 7);
      DayAndPosition dayAndPosition1 = new DayAndPosition();
      boolean boolean0 = dayAndPosition0.equals(dayAndPosition1);
      assertEquals(7, dayAndPosition0.getDayOfWeek());
      assertEquals(0, dayAndPosition1.getDayOfWeek());
      assertEquals(7, dayAndPosition0.getDayPosition());
      assertFalse(boolean0);
      assertEquals(0, dayAndPosition1.getDayPosition());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DayAndPosition dayAndPosition0 = new DayAndPosition(7, 7);
      DayAndPosition dayAndPosition1 = (DayAndPosition)dayAndPosition0.clone();
      assertEquals(7, dayAndPosition1.getDayOfWeek());
      assertNotSame(dayAndPosition1, dayAndPosition0);
      assertEquals(7, dayAndPosition1.getDayPosition());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DayAndPosition dayAndPosition0 = new DayAndPosition(5, 6);
      int int0 = dayAndPosition0.getDayPosition();
      assertEquals(5, dayAndPosition0.getDayOfWeek());
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DayAndPosition dayAndPosition0 = new DayAndPosition(5, 6);
      // Undeclared exception!
      try { 
        dayAndPosition0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.util.HashCodeFactoryUtil", e);
      }
  }
}
