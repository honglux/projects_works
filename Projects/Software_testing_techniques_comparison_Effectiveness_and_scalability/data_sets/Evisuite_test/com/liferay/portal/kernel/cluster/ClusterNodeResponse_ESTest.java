/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 08 23:48:43 GMT 2017
 */

package com.liferay.portal.kernel.cluster;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.liferay.portal.kernel.cluster.ClusterMessageType;
import com.liferay.portal.kernel.cluster.ClusterNode;
import com.liferay.portal.kernel.cluster.ClusterNodeResponse;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClusterNodeResponse_ESTest extends ClusterNodeResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClusterNodeResponse clusterNodeResponse0 = new ClusterNodeResponse();
      clusterNodeResponse0.setMulticast(true);
      boolean boolean0 = clusterNodeResponse0.isMulticast();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClusterNodeResponse clusterNodeResponse0 = new ClusterNodeResponse();
      clusterNodeResponse0.setUuid("l$![");
      String string0 = clusterNodeResponse0.getUuid();
      assertEquals("l$![", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClusterNodeResponse clusterNodeResponse0 = new ClusterNodeResponse();
      MockException mockException0 = new MockException("pYKGPkWYR}", (Throwable) null);
      clusterNodeResponse0.setException(mockException0);
      Exception exception0 = clusterNodeResponse0.getException();
      assertSame(exception0, mockException0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClusterNodeResponse clusterNodeResponse0 = new ClusterNodeResponse();
      ClusterNode clusterNode0 = new ClusterNode("");
      clusterNodeResponse0.setClusterNode(clusterNode0);
      ClusterNode clusterNode1 = clusterNodeResponse0.getClusterNode();
      assertEquals(0, clusterNode1.getPort());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClusterNodeResponse clusterNodeResponse0 = new ClusterNodeResponse();
      ClusterNode clusterNode0 = new ClusterNode("");
      clusterNode0.setPort(1718);
      clusterNodeResponse0.setClusterNode(clusterNode0);
      ClusterNode clusterNode1 = clusterNodeResponse0.getClusterNode();
      assertEquals(1718, clusterNode1.getPort());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClusterNodeResponse clusterNodeResponse0 = new ClusterNodeResponse();
      ClusterMessageType clusterMessageType0 = ClusterMessageType.UPDATE;
      clusterNodeResponse0.setClusterMessageType(clusterMessageType0);
      ClusterMessageType clusterMessageType1 = clusterNodeResponse0.getClusterMessageType();
      assertEquals(ClusterMessageType.UPDATE, clusterMessageType1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClusterNodeResponse clusterNodeResponse0 = new ClusterNodeResponse();
      MockThrowable mockThrowable0 = new MockThrowable("G8F)OTh0 f!");
      MockException mockException0 = new MockException("G8F)OTh0 f!", mockThrowable0);
      clusterNodeResponse0.setException(mockException0);
      boolean boolean0 = clusterNodeResponse0.hasException();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClusterNodeResponse clusterNodeResponse0 = new ClusterNodeResponse();
      ClusterMessageType clusterMessageType0 = ClusterMessageType.EXECUTE;
      clusterNodeResponse0.setClusterMessageType(clusterMessageType0);
      String string0 = clusterNodeResponse0.toString();
      assertEquals("{clusterMessageType=EXECUTE, multicast=false, uuid=null, result=null}", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClusterNodeResponse clusterNodeResponse0 = new ClusterNodeResponse();
      ClusterMessageType clusterMessageType0 = ClusterMessageType.NOTIFY;
      clusterNodeResponse0.setClusterMessageType(clusterMessageType0);
      String string0 = clusterNodeResponse0.toString();
      assertEquals("{clusterMessageType=NOTIFY, multicast=false, uuid=null, clusterNode=null}", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClusterNodeResponse clusterNodeResponse0 = new ClusterNodeResponse();
      ClusterMessageType clusterMessageType0 = ClusterMessageType.EXECUTE;
      clusterNodeResponse0.setClusterMessageType(clusterMessageType0);
      MockException mockException0 = new MockException("pYKGPkWYR}", (Throwable) null);
      clusterNodeResponse0.setException(mockException0);
      clusterNodeResponse0.toString();
      assertTrue(clusterNodeResponse0.hasException());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClusterNodeResponse clusterNodeResponse0 = new ClusterNodeResponse();
      boolean boolean0 = clusterNodeResponse0.hasException();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClusterNodeResponse clusterNodeResponse0 = new ClusterNodeResponse();
      MockException mockException0 = new MockException();
      clusterNodeResponse0.setException(mockException0);
      try { 
        clusterNodeResponse0.getResult();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClusterNodeResponse clusterNodeResponse0 = new ClusterNodeResponse();
      Object object0 = clusterNodeResponse0.getResult();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClusterNodeResponse clusterNodeResponse0 = new ClusterNodeResponse();
      String string0 = clusterNodeResponse0.getUuid();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClusterNodeResponse clusterNodeResponse0 = new ClusterNodeResponse();
      ClusterNode clusterNode0 = new ClusterNode(">");
      clusterNodeResponse0.setClusterNode(clusterNode0);
      clusterNode0.setPort((-1984));
      ClusterNode clusterNode1 = clusterNodeResponse0.getClusterNode();
      assertEquals((-1984), clusterNode1.getPort());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClusterNodeResponse clusterNodeResponse0 = new ClusterNodeResponse();
      ClusterNode clusterNode0 = clusterNodeResponse0.getClusterNode();
      assertNull(clusterNode0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClusterNodeResponse clusterNodeResponse0 = new ClusterNodeResponse();
      clusterNodeResponse0.getClusterMessageType();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClusterNodeResponse clusterNodeResponse0 = new ClusterNodeResponse();
      boolean boolean0 = clusterNodeResponse0.isMulticast();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClusterNodeResponse clusterNodeResponse0 = new ClusterNodeResponse();
      Exception exception0 = clusterNodeResponse0.getException();
      assertNull(exception0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClusterNodeResponse clusterNodeResponse0 = new ClusterNodeResponse();
      Object object0 = new Object();
      clusterNodeResponse0.setResult(object0);
      Object object1 = clusterNodeResponse0.getResult();
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClusterNodeResponse clusterNodeResponse0 = new ClusterNodeResponse();
      clusterNodeResponse0.setUuid("");
      String string0 = clusterNodeResponse0.getUuid();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClusterNodeResponse clusterNodeResponse0 = new ClusterNodeResponse();
      ClusterMessageType clusterMessageType0 = ClusterMessageType.UPDATE;
      clusterNodeResponse0.setClusterMessageType(clusterMessageType0);
      String string0 = clusterNodeResponse0.toString();
      assertEquals("{clusterMessageType=UPDATE, multicast=false, uuid=null, clusterNode=null}", string0);
  }
}
