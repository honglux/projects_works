/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 08 23:58:21 GMT 2017
 */

package com.liferay.portal.kernel.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.liferay.portal.kernel.concurrent.BatchablePipe;
import com.liferay.portal.kernel.concurrent.IncreasableEntry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BatchablePipe_ESTest extends BatchablePipe_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BatchablePipe<Object, String> batchablePipe0 = new BatchablePipe<Object, String>();
      batchablePipe0.put((IncreasableEntry<Object, String>) null);
      // Undeclared exception!
      try { 
        batchablePipe0.put((IncreasableEntry<Object, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.concurrent.BatchablePipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BatchablePipe<Integer, Integer> batchablePipe0 = new BatchablePipe<Integer, Integer>();
      BatchablePipe<Object, Object> batchablePipe1 = new BatchablePipe<Object, Object>();
      IncreasableEntry<Object, Object> increasableEntry0 = (IncreasableEntry<Object, Object>) mock(IncreasableEntry.class, new ViolatedAssumptionAnswer());
      doReturn(batchablePipe0, batchablePipe1).when(increasableEntry0).getKey();
      doReturn((String) null).when(increasableEntry0).toString();
      batchablePipe1.put(increasableEntry0);
      IncreasableEntry<Object, Object> increasableEntry1 = batchablePipe1.take();
      assertNotNull(increasableEntry1);
      
      batchablePipe1.put(increasableEntry1);
      boolean boolean0 = batchablePipe1.put(increasableEntry1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BatchablePipe<Integer, Integer> batchablePipe0 = new BatchablePipe<Integer, Integer>();
      batchablePipe0.put((IncreasableEntry<Integer, Integer>) null);
      batchablePipe0.take();
      IncreasableEntry<Integer, Integer> increasableEntry0 = batchablePipe0.take();
      assertNull(increasableEntry0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BatchablePipe<String, Integer> batchablePipe0 = new BatchablePipe<String, Integer>();
      IncreasableEntry<String, Integer> increasableEntry0 = (IncreasableEntry<String, Integer>) mock(IncreasableEntry.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(increasableEntry0).getKey();
      batchablePipe0.put(increasableEntry0);
      Integer integer0 = new Integer(56);
      IncreasableEntry<String, Integer> increasableEntry1 = (IncreasableEntry<String, Integer>) mock(IncreasableEntry.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(increasableEntry1).getKey();
      // Undeclared exception!
      try { 
        batchablePipe0.put(increasableEntry1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.concurrent.BatchablePipe", e);
      }
  }
}
