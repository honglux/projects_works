/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 09 00:36:46 GMT 2017
 */

package com.liferay.portal.kernel.deploy.auto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.liferay.portal.kernel.deploy.auto.AutoDeployDir;
import com.liferay.portal.kernel.deploy.auto.AutoDeployListener;
import java.io.File;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AutoDeployDir_ESTest extends AutoDeployDir_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("4e-jV2;=RtF-m\"^mV+", "4e-jV2;=RtF-m\"^mV+");
      LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
      AutoDeployDir autoDeployDir0 = new AutoDeployDir("4e-jV2;=RtF-m\"^mV+", mockFile0, mockFile0, 1274L, 2409, linkedList0);
      autoDeployDir0.unregisterListener((AutoDeployListener) null);
      assertEquals("4e-jV2;=RtF-m\"^mV+", autoDeployDir0.getName());
      assertEquals(1274L, autoDeployDir0.getInterval());
      assertEquals(2409, autoDeployDir0.getBlacklistThreshold());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "");
      LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
      AutoDeployDir autoDeployDir0 = new AutoDeployDir("", mockFile0, mockFile0, 0L, 2895, linkedList0);
      autoDeployDir0.start();
      assertEquals("", autoDeployDir0.getName());
      assertEquals(2895, autoDeployDir0.getBlacklistThreshold());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
      AutoDeployDir autoDeployDir0 = new AutoDeployDir("", (File) null, (File) null, 0L, (-1607), linkedList0);
      autoDeployDir0.getInterval();
      assertEquals((-1607), autoDeployDir0.getBlacklistThreshold());
      assertEquals("", autoDeployDir0.getName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile(";~mIfuoP{u}pd", "");
      LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
      AutoDeployDir autoDeployDir0 = new AutoDeployDir(";~mIfuoP{u}pd", mockFile0, mockFile0, (-1432L), (-828), linkedList0);
      long long0 = autoDeployDir0.getInterval();
      assertEquals(";~mIfuoP{u}pd", autoDeployDir0.getName());
      assertEquals((-828), autoDeployDir0.getBlacklistThreshold());
      assertEquals((-1432L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
      AutoDeployDir autoDeployDir0 = new AutoDeployDir("Tn Qj6", (File) null, (File) null, 0L, (-1640), linkedList0);
      autoDeployDir0.getDestDir();
      assertEquals((-1640), autoDeployDir0.getBlacklistThreshold());
      assertEquals("Tn Qj6", autoDeployDir0.getName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ory ", "ory ");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("C:\\Users\\xuhlu\\Desktop\\EECS_493\\week13\\liferay-6.0.6-master\\out\\production\\portal-service\\ory \\ory ");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, " does not have a matching extension");
      LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
      AutoDeployDir autoDeployDir0 = new AutoDeployDir("[0I", mockFile0, mockFile0, 1L, 2146565919, linkedList0);
      autoDeployDir0.getDestDir();
      assertEquals(1L, autoDeployDir0.getInterval());
      assertEquals(2146565919, autoDeployDir0.getBlacklistThreshold());
      assertEquals("[0I", autoDeployDir0.getName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("t", ".zip");
      LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
      AutoDeployDir autoDeployDir0 = new AutoDeployDir("ae9(]br:H3B^E/i", mockFile0, mockFile0, (-1L), 767, linkedList0);
      autoDeployDir0.getDestDir();
      assertEquals("ae9(]br:H3B^E/i", autoDeployDir0.getName());
      assertEquals((-1L), autoDeployDir0.getInterval());
      assertEquals(767, autoDeployDir0.getBlacklistThreshold());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
      AutoDeployDir autoDeployDir0 = new AutoDeployDir((String) null, mockFile0, mockFile0, 92L, (-1), linkedList0);
      autoDeployDir0.getDestDir();
      assertEquals(92L, autoDeployDir0.getInterval());
      assertEquals((-1), autoDeployDir0.getBlacklistThreshold());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
      AutoDeployDir autoDeployDir0 = new AutoDeployDir("f'MW8g1uK", (File) null, (File) null, (-1L), 474, linkedList0);
      autoDeployDir0.getDeployDir();
      assertEquals(474, autoDeployDir0.getBlacklistThreshold());
      assertEquals((-1L), autoDeployDir0.getInterval());
      assertEquals("f'MW8g1uK", autoDeployDir0.getName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".war");
      LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
      AutoDeployDir autoDeployDir0 = new AutoDeployDir(".war", mockFile0, mockFile0, 0L, 2055, linkedList0);
      autoDeployDir0.getDeployDir();
      assertEquals(".war", autoDeployDir0.getName());
      assertEquals(2055, autoDeployDir0.getBlacklistThreshold());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("9#@E;");
      LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
      AutoDeployDir autoDeployDir0 = new AutoDeployDir("Uf3'VVn&-kL-YVW.", mockFile0, mockFile0, 0L, 0, linkedList0);
      autoDeployDir0.getDeployDir();
      assertEquals("Uf3'VVn&-kL-YVW.", autoDeployDir0.getName());
      assertEquals(0, autoDeployDir0.getBlacklistThreshold());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("C:\\Users\\xuhlu\\Desktop\\EECS_493\\week13\\liferay-6.0.6-master\\out\\production\\portal-service\\ory \\ory ");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "add 0add .war1ory 1ory .t=xml.xml");
      MockFile mockFile0 = new MockFile("ory ", "ory ");
      LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
      AutoDeployDir autoDeployDir0 = new AutoDeployDir("P5#R2g%", mockFile0, mockFile0, 2402, 1, linkedList0);
      autoDeployDir0.getDeployDir();
      assertEquals(2402L, autoDeployDir0.getInterval());
      assertEquals(1, autoDeployDir0.getBlacklistThreshold());
      assertEquals("P5#R2g%", autoDeployDir0.getName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("2bexSyK)5Qe,Mw!|DdL");
      LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
      AutoDeployDir autoDeployDir0 = new AutoDeployDir("2bexSyK)5Qe,Mw!|DdL", mockFile0, mockFile0, 0L, 0, linkedList0);
      int int0 = autoDeployDir0.getBlacklistThreshold();
      assertEquals(0, int0);
      assertEquals("2bexSyK)5Qe,Mw!|DdL", autoDeployDir0.getName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("~@7r3@>ZREe,d>u", "Rih:gfGT");
      AutoDeployDir autoDeployDir0 = null;
      try {
        autoDeployDir0 = new AutoDeployDir("~@7r3@>ZREe,d>u", mockFile0, mockFile0, (-1273L), 0, (List<AutoDeployListener>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ory ", "ory ");
      LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
      MockFile.createTempFile("ory ", "ory 1orJ .xml", (File) mockFile0);
      AutoDeployDir autoDeployDir0 = new AutoDeployDir("ory ", mockFile0, mockFile0, 1271L, 1401, linkedList0);
      autoDeployDir0.scanDirectory();
      assertEquals(1271L, autoDeployDir0.getInterval());
      assertEquals(1401, autoDeployDir0.getBlacklistThreshold());
      assertEquals("ory ", autoDeployDir0.getName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ory ", "ory ");
      LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
      MockFile.createTempFile("ory ", "ory 0ohy^1ory .xml.zip", (File) mockFile0);
      AutoDeployDir autoDeployDir0 = new AutoDeployDir("ory ", mockFile0, mockFile0, 2531L, 2402, linkedList0);
      autoDeployDir0.scanDirectory();
      assertEquals(2531L, autoDeployDir0.getInterval());
      assertEquals(2402, autoDeployDir0.getBlacklistThreshold());
      assertEquals("ory ", autoDeployDir0.getName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".war");
      LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
      MockFile.createTempFile(".war", ".war", (File) mockFile0);
      AutoDeployDir autoDeployDir0 = new AutoDeployDir(".war", mockFile0, mockFile0, 1266L, 2402, linkedList0);
      autoDeployDir0.scanDirectory();
      assertEquals(2402, autoDeployDir0.getBlacklistThreshold());
      assertEquals(".war", autoDeployDir0.getName());
      assertEquals(1266L, autoDeployDir0.getInterval());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("xE$k/\"M~X", "xE$k/\"M~X");
      LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
      MockFile.createTempFile("xE$k/\"M~X", "xE$k/\"M~X", (File) mockFile0);
      AutoDeployDir autoDeployDir0 = new AutoDeployDir("xE$k/\"M~X", mockFile0, mockFile0, 1241L, 2367, linkedList0);
      autoDeployDir0.scanDirectory();
      assertEquals(1241L, autoDeployDir0.getInterval());
      assertEquals("xE$k/\"M~X", autoDeployDir0.getName());
      assertEquals(2367, autoDeployDir0.getBlacklistThreshold());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org");
      LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
      MockFile.createTempFile("org", "org", (File) mockFile0);
      AutoDeployDir autoDeployDir0 = new AutoDeployDir("org", mockFile0, mockFile0, 1270L, 2402, linkedList0);
      autoDeployDir0.scanDirectory();
      assertEquals(2402, autoDeployDir0.getBlacklistThreshold());
      assertEquals(1270L, autoDeployDir0.getInterval());
      assertEquals("org", autoDeployDir0.getName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
      AutoDeployDir autoDeployDir0 = new AutoDeployDir("", mockFile0, mockFile0, 1L, (-1), linkedList0);
      autoDeployDir0.processFile(mockFile0);
      assertTrue(mockFile0.isFile());
      assertEquals((-1), autoDeployDir0.getBlacklistThreshold());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("F4U)%y", "F4U)%y");
      LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
      MockFile.createTempFile("F4U)%y", "F4U)%y", (File) mockFile0);
      AutoDeployDir autoDeployDir0 = new AutoDeployDir("F4U)%y", mockFile0, mockFile0, 1270L, 2402, linkedList0);
      mockFile0.setReadOnly();
      autoDeployDir0.processFile(mockFile0);
      assertEquals(2402, autoDeployDir0.getBlacklistThreshold());
      assertEquals(1270L, autoDeployDir0.getInterval());
      assertEquals("F4U)%y", autoDeployDir0.getName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile("t", ".zip");
      LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
      AutoDeployDir autoDeployDir0 = new AutoDeployDir("ae9(]br:H3B^E/i", mockFile0, mockFile0, (-1L), 767, linkedList0);
      autoDeployDir0.processFile(mockFile0);
      assertEquals(767, autoDeployDir0.getBlacklistThreshold());
      assertEquals((-1L), autoDeployDir0.getInterval());
      assertEquals("ae9(]br:H3B^E/i", autoDeployDir0.getName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
      AutoDeployDir autoDeployDir0 = new AutoDeployDir((String) null, mockFile0, mockFile0, 92L, (-1), linkedList0);
      autoDeployDir0.stop();
      assertEquals((-1), autoDeployDir0.getBlacklistThreshold());
      assertEquals(92L, autoDeployDir0.getInterval());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",kI3$g", "P");
      LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
      AutoDeployDir autoDeployDir0 = new AutoDeployDir("3", mockFile0, mockFile0, (-1251L), 0, linkedList0);
      autoDeployDir0.start();
      assertTrue(mockFile0.canExecute());
      assertEquals("3", autoDeployDir0.getName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFile mockFile0 = new MockFile("F4U)%y", "F4U)%y");
      LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
      MockFile.createTempFile("F4U)%y", "F4U)%y", (File) mockFile0);
      AutoDeployDir autoDeployDir0 = new AutoDeployDir("F4U)%y", mockFile0, mockFile0, 1270L, 2402, linkedList0);
      autoDeployDir0.start();
      autoDeployDir0.stop();
      assertEquals(1270L, autoDeployDir0.getInterval());
      assertEquals("F4U)%y", autoDeployDir0.getName());
      assertEquals(2402, autoDeployDir0.getBlacklistThreshold());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
      AutoDeployDir autoDeployDir0 = new AutoDeployDir((String) null, mockFile0, mockFile0, 92L, (-1), linkedList0);
      long long0 = autoDeployDir0.getInterval();
      assertEquals(92L, long0);
      assertEquals((-1), autoDeployDir0.getBlacklistThreshold());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
      AutoDeployDir autoDeployDir0 = new AutoDeployDir((String) null, mockFile0, mockFile0, 92L, (-1), linkedList0);
      AutoDeployListener autoDeployListener0 = linkedList0.poll();
      autoDeployDir0.registerListener(autoDeployListener0);
      autoDeployDir0.getListeners();
      assertEquals((-1), autoDeployDir0.getBlacklistThreshold());
      assertEquals(92L, autoDeployDir0.getInterval());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
      AutoDeployDir autoDeployDir0 = new AutoDeployDir((String) null, mockFile0, mockFile0, 92L, (-1), linkedList0);
      String string0 = autoDeployDir0.getName();
      assertEquals(92L, autoDeployDir0.getInterval());
      assertNull(string0);
      assertEquals((-1), autoDeployDir0.getBlacklistThreshold());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockFile mockFile0 = new MockFile("0(]x", "");
      LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
      AutoDeployDir autoDeployDir0 = new AutoDeployDir("nQdtU", mockFile0, mockFile0, 0L, 1, linkedList0);
      int int0 = autoDeployDir0.getBlacklistThreshold();
      assertEquals("nQdtU", autoDeployDir0.getName());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ory ", "ory ");
      LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
      AutoDeployDir autoDeployDir0 = new AutoDeployDir("P5#R2g%", mockFile0, mockFile0, 2402, 1, linkedList0);
      autoDeployDir0.getListeners();
      assertEquals("P5#R2g%", autoDeployDir0.getName());
      assertEquals(1, autoDeployDir0.getBlacklistThreshold());
      assertEquals(2402L, autoDeployDir0.getInterval());
  }
}
