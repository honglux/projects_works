/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 08 23:26:33 GMT 2017
 */

package com.liferay.portal.kernel.cache.cluster;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.liferay.portal.kernel.cache.cluster.PortalCacheClusterChannel;
import com.liferay.portal.kernel.cache.cluster.PortalCacheClusterEvent;
import com.liferay.portal.kernel.cache.cluster.PortalCacheClusterEventType;
import com.liferay.portal.kernel.cache.cluster.UniformPortalCacheClusterChannelSelector;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UniformPortalCacheClusterChannelSelector_ESTest extends UniformPortalCacheClusterChannelSelector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UniformPortalCacheClusterChannelSelector uniformPortalCacheClusterChannelSelector0 = new UniformPortalCacheClusterChannelSelector();
      LinkedList<PortalCacheClusterChannel> linkedList0 = new LinkedList<PortalCacheClusterChannel>();
      linkedList0.add((PortalCacheClusterChannel) null);
      PortalCacheClusterEventType portalCacheClusterEventType0 = PortalCacheClusterEventType.REMOVEALL;
      PortalCacheClusterEvent portalCacheClusterEvent0 = new PortalCacheClusterEvent("*GkYy=L>`q6W", portalCacheClusterEventType0, portalCacheClusterEventType0);
      uniformPortalCacheClusterChannelSelector0.select(linkedList0, portalCacheClusterEvent0);
      uniformPortalCacheClusterChannelSelector0.select(linkedList0, portalCacheClusterEvent0);
      assertEquals(2L, uniformPortalCacheClusterChannelSelector0.getSelectedNumber());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UniformPortalCacheClusterChannelSelector uniformPortalCacheClusterChannelSelector0 = new UniformPortalCacheClusterChannelSelector();
      LinkedList<PortalCacheClusterChannel> linkedList0 = new LinkedList<PortalCacheClusterChannel>();
      PortalCacheClusterEventType portalCacheClusterEventType0 = PortalCacheClusterEventType.PUT;
      linkedList0.add((PortalCacheClusterChannel) null);
      PortalCacheClusterEvent portalCacheClusterEvent0 = new PortalCacheClusterEvent("", linkedList0, portalCacheClusterEventType0);
      uniformPortalCacheClusterChannelSelector0.select(linkedList0, portalCacheClusterEvent0);
      long long0 = uniformPortalCacheClusterChannelSelector0.getSelectedNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      UniformPortalCacheClusterChannelSelector uniformPortalCacheClusterChannelSelector0 = new UniformPortalCacheClusterChannelSelector();
      PortalCacheClusterEventType portalCacheClusterEventType0 = PortalCacheClusterEventType.PUT;
      PortalCacheClusterEvent portalCacheClusterEvent0 = new PortalCacheClusterEvent("", "", portalCacheClusterEventType0);
      // Undeclared exception!
      try { 
        uniformPortalCacheClusterChannelSelector0.select((List<PortalCacheClusterChannel>) null, portalCacheClusterEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.cache.cluster.UniformPortalCacheClusterChannelSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UniformPortalCacheClusterChannelSelector uniformPortalCacheClusterChannelSelector0 = new UniformPortalCacheClusterChannelSelector();
      LinkedList<PortalCacheClusterChannel> linkedList0 = new LinkedList<PortalCacheClusterChannel>();
      PortalCacheClusterEventType portalCacheClusterEventType0 = PortalCacheClusterEventType.PUT;
      PortalCacheClusterEvent portalCacheClusterEvent0 = new PortalCacheClusterEvent("", linkedList0, portalCacheClusterEventType0);
      // Undeclared exception!
      try { 
        uniformPortalCacheClusterChannelSelector0.select(linkedList0, portalCacheClusterEvent0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.liferay.portal.kernel.cache.cluster.UniformPortalCacheClusterChannelSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      UniformPortalCacheClusterChannelSelector uniformPortalCacheClusterChannelSelector0 = new UniformPortalCacheClusterChannelSelector();
      long long0 = uniformPortalCacheClusterChannelSelector0.getSelectedNumber();
      assertEquals(0L, long0);
  }
}
