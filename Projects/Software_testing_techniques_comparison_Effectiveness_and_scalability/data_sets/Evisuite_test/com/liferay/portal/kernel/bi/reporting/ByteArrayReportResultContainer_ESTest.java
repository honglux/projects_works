/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 08 23:00:04 GMT 2017
 */

package com.liferay.portal.kernel.bi.reporting;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.liferay.portal.kernel.bi.reporting.ByteArrayReportResultContainer;
import com.liferay.portal.kernel.bi.reporting.ReportGenerationException;
import com.liferay.portal.kernel.bi.reporting.ReportResultContainer;
import java.io.OutputStream;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteArrayReportResultContainer_ESTest extends ByteArrayReportResultContainer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteArrayReportResultContainer byteArrayReportResultContainer0 = new ByteArrayReportResultContainer("]3XSuJdcaY~g79_u[", (-1149));
      ReportResultContainer reportResultContainer0 = byteArrayReportResultContainer0.clone("]3XSuJdcaY~g79_u[");
      assertFalse(reportResultContainer0.equals((Object)byteArrayReportResultContainer0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteArrayReportResultContainer byteArrayReportResultContainer0 = new ByteArrayReportResultContainer("com.liferay.portal.kernel.bi.reporting.ByteArrayReportResultContainer");
      OutputStream outputStream0 = byteArrayReportResultContainer0.getOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(outputStream0);
      Locale locale0 = Locale.forLanguageTag("com.liferay.portal.kernel.bi.reporting.ByteArrayReportResultContainer");
      Object[] objectArray0 = new Object[9];
      mockPrintStream0.printf(locale0, "Ks}NMhc2`;:-O*,z", objectArray0);
      byte[] byteArray0 = byteArrayReportResultContainer0.getResults();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteArrayReportResultContainer byteArrayReportResultContainer0 = new ByteArrayReportResultContainer();
      byteArrayReportResultContainer0.getOutputStream();
      byte[] byteArray0 = byteArrayReportResultContainer0.getResults();
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteArrayReportResultContainer byteArrayReportResultContainer0 = new ByteArrayReportResultContainer();
      String string0 = byteArrayReportResultContainer0.getReportName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteArrayReportResultContainer byteArrayReportResultContainer0 = new ByteArrayReportResultContainer("");
      String string0 = byteArrayReportResultContainer0.getReportName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteArrayReportResultContainer byteArrayReportResultContainer0 = new ByteArrayReportResultContainer("com.liferay.portal.kernel.bi.reporting.ByteArrayReportResultContainer");
      ReportGenerationException reportGenerationException0 = new ReportGenerationException("com.liferay.portal.kernel.bi.reporting.ByteArrayReportResultContainer");
      byteArrayReportResultContainer0.setReportGenerationException(reportGenerationException0);
      ReportGenerationException reportGenerationException1 = byteArrayReportResultContainer0.getReportGenerationException();
      assertSame(reportGenerationException1, reportGenerationException0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteArrayReportResultContainer byteArrayReportResultContainer0 = new ByteArrayReportResultContainer("VhF,F}QQl", (-1425));
      // Undeclared exception!
      try { 
        byteArrayReportResultContainer0.getOutputStream();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.io.unsync.UnsyncByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteArrayReportResultContainer byteArrayReportResultContainer0 = new ByteArrayReportResultContainer("]3XSuJdcaY~g79_u[", (-1149));
      boolean boolean0 = byteArrayReportResultContainer0.hasError();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteArrayReportResultContainer byteArrayReportResultContainer0 = new ByteArrayReportResultContainer("com.liferay.portal.kernel.bi.reporting.ByteArrayReportResultContainer");
      // Undeclared exception!
      try { 
        byteArrayReportResultContainer0.getResults();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.bi.reporting.ByteArrayReportResultContainer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteArrayReportResultContainer byteArrayReportResultContainer0 = new ByteArrayReportResultContainer("com.liferay.portal.kernel.bi.reporting.ByteArrayReportResultContainer");
      String string0 = byteArrayReportResultContainer0.getReportName();
      assertEquals("com.liferay.portal.kernel.bi.reporting.ByteArrayReportResultContainer", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteArrayReportResultContainer byteArrayReportResultContainer0 = new ByteArrayReportResultContainer("com.liferay.portal.kernel.bi.reporting.ByteArrayReportResultContainer");
      ReportGenerationException reportGenerationException0 = new ReportGenerationException("com.liferay.portal.kernel.bi.reporting.ByteArrayReportResultContainer");
      byteArrayReportResultContainer0.setReportGenerationException(reportGenerationException0);
      boolean boolean0 = byteArrayReportResultContainer0.hasError();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteArrayReportResultContainer byteArrayReportResultContainer0 = new ByteArrayReportResultContainer();
      OutputStream outputStream0 = byteArrayReportResultContainer0.getOutputStream();
      OutputStream outputStream1 = byteArrayReportResultContainer0.getOutputStream();
      assertSame(outputStream1, outputStream0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteArrayReportResultContainer byteArrayReportResultContainer0 = new ByteArrayReportResultContainer("com.liferay.portal.kernel.bi.reporting.ByteArrayReportResultContainer");
      ReportGenerationException reportGenerationException0 = byteArrayReportResultContainer0.getReportGenerationException();
      assertNull(reportGenerationException0);
  }
}
