/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 09 00:20:41 GMT 2017
 */

package com.liferay.portal.kernel.dao.orm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.liferay.portal.kernel.dao.orm.EntityCache;
import com.liferay.portal.kernel.dao.orm.EntityCacheUtil;
import com.liferay.portal.kernel.dao.orm.SessionFactory;
import com.liferay.portal.model.AddressWrapper;
import com.liferay.portal.model.ClusterGroupWrapper;
import com.liferay.portal.model.OrgGroupPermissionWrapper;
import com.liferay.portal.model.PasswordPolicyWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EntityCacheUtil_ESTest extends EntityCacheUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EntityCache entityCache0 = EntityCacheUtil.getEntityCache();
      assertNull(entityCache0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        EntityCacheUtil.invalidate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.dao.orm.EntityCacheUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<ClusterGroupWrapper> class0 = ClusterGroupWrapper.class;
      SessionFactory sessionFactory0 = mock(SessionFactory.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EntityCacheUtil.getResult(true, class0, class0, sessionFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.dao.orm.EntityCacheUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        EntityCacheUtil.removeCache("Z[ul.q-l/fi^$$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.dao.orm.EntityCacheUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<OrgGroupPermissionWrapper> class0 = OrgGroupPermissionWrapper.class;
      // Undeclared exception!
      try { 
        EntityCacheUtil.removeResult(false, class0, "dueDate DESC, workflowTaskId DESC");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.dao.orm.EntityCacheUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<AddressWrapper> class0 = AddressWrapper.class;
      // Undeclared exception!
      try { 
        EntityCacheUtil.putResult(true, class0, class0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.dao.orm.EntityCacheUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        EntityCacheUtil.clearCache();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.dao.orm.EntityCacheUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EntityCacheUtil entityCacheUtil0 = new EntityCacheUtil();
      entityCacheUtil0.setEntityCache((EntityCache) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        EntityCacheUtil.clearLocalCache();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.dao.orm.EntityCacheUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        EntityCacheUtil.clearCache("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.dao.orm.EntityCacheUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<PasswordPolicyWrapper> class0 = PasswordPolicyWrapper.class;
      SessionFactory sessionFactory0 = mock(SessionFactory.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EntityCacheUtil.loadResult(false, class0, class0, sessionFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.dao.orm.EntityCacheUtil", e);
      }
  }
}
