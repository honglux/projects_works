/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 09 00:32:56 GMT 2017
 */

package com.liferay.portal.kernel.dao.orm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBFactory;
import com.liferay.portal.kernel.dao.db.DBFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Dialect;
import com.liferay.portal.kernel.dao.orm.Query;
import com.liferay.portal.kernel.dao.orm.QueryUtil;
import com.liferay.portal.kernel.dao.orm.ScrollableResults;
import com.liferay.portal.kernel.workflow.comparator.BaseWorkflowTaskNameComparator;
import java.util.Iterator;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QueryUtil_ESTest extends QueryUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((List<Object>) null).when(query0).list(anyBoolean());
      Dialect dialect0 = mock(Dialect.class, new ViolatedAssumptionAnswer());
      List<?> list0 = QueryUtil.randomList(query0, dialect0, 150, 1750);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(query0).list(anyBoolean());
      doReturn((Query) null).when(query0).setFirstResult(anyInt());
      doReturn((Query) null).when(query0).setMaxResults(anyInt());
      Dialect dialect0 = mock(Dialect.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(dialect0).supportsLimit();
      List<?> list0 = QueryUtil.list(query0, dialect0, 1286, (-986));
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ScrollableResults scrollableResults0 = mock(ScrollableResults.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(scrollableResults0).first();
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(scrollableResults0).when(query0).scroll();
      DB dB0 = mock(DB.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(dB0).isSupportsScrollableResults();
      DBFactory dBFactory0 = mock(DBFactory.class, new ViolatedAssumptionAnswer());
      doReturn(dB0).when(dBFactory0).getDB();
      DBFactoryUtil.setDBFactory(dBFactory0);
      Dialect dialect0 = mock(Dialect.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(dialect0).supportsLimit();
      List<?> list0 = QueryUtil.list(query0, dialect0, 556, 1802);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      Dialect dialect0 = mock(Dialect.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      QueryUtil.randomList(query0, dialect0, 1987, 3, false);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      QueryUtil.randomList(query0, (Dialect) null, 156, 13);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ScrollableResults scrollableResults0 = mock(ScrollableResults.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(scrollableResults0).first();
      doReturn(false).when(scrollableResults0).scroll(anyInt());
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(scrollableResults0).when(query0).scroll();
      DB dB0 = mock(DB.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(dB0).isSupportsScrollableResults();
      DB dB1 = mock(DB.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(dB1).isSupportsScrollableResults();
      DBFactory dBFactory0 = mock(DBFactory.class, new ViolatedAssumptionAnswer());
      doReturn(dB0, dB1).when(dBFactory0).getDB();
      DBFactoryUtil.setDBFactory(dBFactory0);
      Dialect dialect0 = mock(Dialect.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(dialect0).supportsLimit();
      QueryUtil.list(query0, dialect0, (-1), 0, false);
      Query query1 = mock(Query.class, new ViolatedAssumptionAnswer());
      Dialect dialect1 = mock(Dialect.class, new ViolatedAssumptionAnswer());
      List<?> list0 = QueryUtil.randomList(query1, dialect1, (-1882), (-3070), false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(query0).list(anyBoolean());
      Dialect dialect0 = mock(Dialect.class, new ViolatedAssumptionAnswer());
      List<?> list0 = QueryUtil.randomList(query0, dialect0, (-2887), (-2887), true);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      Dialect dialect0 = mock(Dialect.class, new ViolatedAssumptionAnswer());
      List<?> list0 = QueryUtil.randomList(query0, dialect0, 14, 0, true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DB dB0 = mock(DB.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(dB0).isSupportsScrollableResults();
      DBFactory dBFactory0 = mock(DBFactory.class, new ViolatedAssumptionAnswer());
      doReturn(dB0).when(dBFactory0).getDB();
      DBFactoryUtil.setDBFactory(dBFactory0);
      Dialect dialect0 = mock(Dialect.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(dialect0).supportsLimit();
      ScrollableResults scrollableResults0 = mock(ScrollableResults.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(scrollableResults0).first();
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(scrollableResults0).when(query0).scroll();
      List<?> list0 = QueryUtil.list(query0, dialect0, 490, 490, true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(query0).list(anyBoolean());
      doReturn((Query) null).when(query0).setFirstResult(anyInt());
      doReturn((Query) null).when(query0).setMaxResults(anyInt());
      Dialect dialect0 = mock(Dialect.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(dialect0).supportsLimit();
      List<?> list0 = QueryUtil.list(query0, dialect0, 0, (-2245), false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Dialect dialect0 = mock(Dialect.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(dialect0).supportsLimit();
      // Undeclared exception!
      try { 
        QueryUtil.list((Query) null, dialect0, (-3875), (-349), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.dao.db.DBFactoryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(query0).list(anyBoolean());
      Dialect dialect0 = mock(Dialect.class, new ViolatedAssumptionAnswer());
      List<?> list0 = QueryUtil.list(query0, dialect0, (-1), (-1), false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      Dialect dialect0 = mock(Dialect.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(dialect0).supportsLimit();
      // Undeclared exception!
      try { 
        QueryUtil.list(query0, dialect0, (-2245), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.dao.db.DBFactoryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ScrollableResults scrollableResults0 = mock(ScrollableResults.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(scrollableResults0).first();
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(scrollableResults0).when(query0).scroll();
      DB dB0 = mock(DB.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(dB0).isSupportsScrollableResults();
      DBFactory dBFactory0 = mock(DBFactory.class, new ViolatedAssumptionAnswer());
      doReturn(dB0).when(dBFactory0).getDB();
      DBFactoryUtil.setDBFactory(dBFactory0);
      BaseWorkflowTaskNameComparator baseWorkflowTaskNameComparator0 = new BaseWorkflowTaskNameComparator(true);
      Comparable<?>[] comparableArray0 = QueryUtil.getPrevAndNext(query0, 0, baseWorkflowTaskNameComparator0, (-1));
      assertNotNull(comparableArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      DB dB0 = mock(DB.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(dB0).isSupportsScrollableResults();
      DB dB1 = mock(DB.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(dB1).isSupportsScrollableResults();
      DBFactory dBFactory0 = mock(DBFactory.class, new ViolatedAssumptionAnswer());
      doReturn(dB0, dB1).when(dBFactory0).getDB();
      DBFactoryUtil.setDBFactory(dBFactory0);
      ScrollableResults scrollableResults0 = mock(ScrollableResults.class, new ViolatedAssumptionAnswer());
      Query query1 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(scrollableResults0).when(query1).scroll();
      Dialect dialect0 = mock(Dialect.class, new ViolatedAssumptionAnswer());
      QueryUtil.randomList(query1, dialect0, (-1), (-5));
      BaseWorkflowTaskNameComparator baseWorkflowTaskNameComparator0 = new BaseWorkflowTaskNameComparator(true);
      Comparable<?>[] comparableArray0 = QueryUtil.getPrevAndNext(query0, (-5), baseWorkflowTaskNameComparator0, (-1));
      assertNotNull(comparableArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ScrollableResults scrollableResults0 = mock(ScrollableResults.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(scrollableResults0).first();
      doReturn((Object) null).when(scrollableResults0).get(anyInt());
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(scrollableResults0).when(query0).scroll();
      DB dB0 = mock(DB.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(dB0).isSupportsScrollableResults();
      DBFactory dBFactory0 = mock(DBFactory.class, new ViolatedAssumptionAnswer());
      doReturn(dB0).when(dBFactory0).getDB();
      DBFactoryUtil.setDBFactory(dBFactory0);
      BaseWorkflowTaskNameComparator baseWorkflowTaskNameComparator0 = new BaseWorkflowTaskNameComparator(true);
      Comparable<?>[] comparableArray0 = QueryUtil.getPrevAndNext(query0, 0, baseWorkflowTaskNameComparator0, (-1));
      assertNotNull(comparableArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DB dB0 = mock(DB.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(dB0).isSupportsScrollableResults();
      DBFactory dBFactory0 = mock(DBFactory.class, new ViolatedAssumptionAnswer());
      doReturn(dB0).when(dBFactory0).getDB();
      DBFactoryUtil.setDBFactory(dBFactory0);
      Dialect dialect0 = mock(Dialect.class, new ViolatedAssumptionAnswer());
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((ScrollableResults) null).when(query0).scroll();
      List<?> list0 = QueryUtil.randomList(query0, dialect0, (-387), (-474), true);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DB dB0 = mock(DB.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(dB0).isSupportsScrollableResults();
      DB dB1 = mock(DB.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(dB1).isSupportsScrollableResults();
      DBFactory dBFactory0 = mock(DBFactory.class, new ViolatedAssumptionAnswer());
      doReturn(dB0, dB1).when(dBFactory0).getDB();
      DBFactoryUtil.setDBFactory(dBFactory0);
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      Dialect dialect0 = mock(Dialect.class, new ViolatedAssumptionAnswer());
      Query query1 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((ScrollableResults) null).when(query1).scroll();
      Dialect dialect1 = mock(Dialect.class, new ViolatedAssumptionAnswer());
      List<?> list0 = QueryUtil.randomList(query1, dialect1, 2136, (-2008), false);
      List<?> list1 = QueryUtil.randomList(query0, dialect0, (-1), (-5));
      assertNotSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Dialect dialect0 = mock(Dialect.class, new ViolatedAssumptionAnswer());
      List<?> list0 = QueryUtil.randomList((Query) null, dialect0, 0, 4, false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ScrollableResults scrollableResults0 = mock(ScrollableResults.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(scrollableResults0).first();
      doReturn(false).when(scrollableResults0).scroll(anyInt());
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(scrollableResults0).when(query0).scroll();
      DB dB0 = mock(DB.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(dB0).isSupportsScrollableResults();
      DBFactory dBFactory0 = mock(DBFactory.class, new ViolatedAssumptionAnswer());
      doReturn(dB0).when(dBFactory0).getDB();
      DBFactoryUtil.setDBFactory(dBFactory0);
      Dialect dialect0 = mock(Dialect.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(dialect0).supportsLimit();
      Iterator<?> iterator0 = QueryUtil.iterate(query0, dialect0, (-5), (-5));
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ScrollableResults scrollableResults0 = mock(ScrollableResults.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(scrollableResults0).first();
      doReturn((Object[]) null).when(scrollableResults0).get();
      doReturn(true).when(scrollableResults0).scroll(anyInt());
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(scrollableResults0).when(query0).scroll();
      DB dB0 = mock(DB.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(dB0).isSupportsScrollableResults();
      DBFactory dBFactory0 = mock(DBFactory.class, new ViolatedAssumptionAnswer());
      doReturn(dB0).when(dBFactory0).getDB();
      DBFactoryUtil.setDBFactory(dBFactory0);
      Dialect dialect0 = mock(Dialect.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(dialect0).supportsLimit();
      // Undeclared exception!
      try { 
        QueryUtil.list(query0, dialect0, (-1), 0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.dao.orm.QueryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      DB dB0 = mock(DB.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(dB0).isSupportsScrollableResults();
      DBFactory dBFactory0 = mock(DBFactory.class, new ViolatedAssumptionAnswer());
      doReturn(dB0).when(dBFactory0).getDB();
      DBFactoryUtil.setDBFactory(dBFactory0);
      Dialect dialect0 = mock(Dialect.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(dialect0).supportsLimit();
      List<?> list0 = QueryUtil.list(query0, dialect0, (-1), 0, false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ScrollableResults scrollableResults0 = mock(ScrollableResults.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(scrollableResults0).first();
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(scrollableResults0).when(query0).scroll();
      DB dB0 = mock(DB.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(dB0).isSupportsScrollableResults();
      DBFactory dBFactory0 = mock(DBFactory.class, new ViolatedAssumptionAnswer());
      doReturn(dB0).when(dBFactory0).getDB();
      DBFactoryUtil.setDBFactory(dBFactory0);
      Dialect dialect0 = mock(Dialect.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(dialect0).supportsLimit();
      List<?> list0 = QueryUtil.list(query0, dialect0, (-1), (-5), false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      Dialect dialect0 = mock(Dialect.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(dialect0).supportsLimit();
      // Undeclared exception!
      try { 
        QueryUtil.iterate(query0, dialect0, (-1), (-548), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.dao.db.DBFactoryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      QueryUtil queryUtil0 = new QueryUtil();
      ScrollableResults scrollableResults0 = mock(ScrollableResults.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(scrollableResults0).first();
      doReturn(queryUtil0).when(scrollableResults0).get(anyInt());
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(scrollableResults0).when(query0).scroll();
      DB dB0 = mock(DB.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(dB0).isSupportsScrollableResults();
      DBFactory dBFactory0 = mock(DBFactory.class, new ViolatedAssumptionAnswer());
      doReturn(dB0).when(dBFactory0).getDB();
      DBFactoryUtil.setDBFactory(dBFactory0);
      BaseWorkflowTaskNameComparator baseWorkflowTaskNameComparator0 = new BaseWorkflowTaskNameComparator(true);
      // Undeclared exception!
      try { 
        QueryUtil.getPrevAndNext(query0, 0, baseWorkflowTaskNameComparator0, (-1));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.liferay.portal.kernel.dao.orm.QueryUtil cannot be cast to java.lang.Comparable
         //
         verifyException("com.liferay.portal.kernel.dao.orm.QueryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(query0).list(anyBoolean());
      doReturn((Query) null).when(query0).setFirstResult(anyInt());
      doReturn((Query) null).when(query0).setMaxResults(anyInt());
      Dialect dialect0 = mock(Dialect.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(dialect0).supportsLimit();
      // Undeclared exception!
      try { 
        QueryUtil.iterate(query0, dialect0, 1652, 2136);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.dao.orm.QueryUtil", e);
      }
  }
}
