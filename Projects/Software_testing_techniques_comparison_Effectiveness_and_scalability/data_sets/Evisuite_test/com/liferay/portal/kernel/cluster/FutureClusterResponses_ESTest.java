/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 08 23:54:30 GMT 2017
 */

package com.liferay.portal.kernel.cluster;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.liferay.portal.kernel.cluster.Address;
import com.liferay.portal.kernel.cluster.ClusterNode;
import com.liferay.portal.kernel.cluster.ClusterNodeResponse;
import com.liferay.portal.kernel.cluster.ClusterNodeResponses;
import com.liferay.portal.kernel.cluster.FutureClusterResponses;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.CancellationException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FutureClusterResponses_ESTest extends FutureClusterResponses_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Address> linkedList0 = new LinkedList<Address>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.containsAll(linkedList1);
      linkedList0.remove((Object) null);
      Address address0 = mock(Address.class, new ViolatedAssumptionAnswer());
      linkedList0.add(address0);
      FutureClusterResponses futureClusterResponses0 = new FutureClusterResponses(linkedList0);
      futureClusterResponses0.cancel(false);
      futureClusterResponses0.isDone();
      // Undeclared exception!
      try { 
        futureClusterResponses0.get();
        fail("Expecting exception: CancellationException");
      
      } catch(CancellationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.cluster.FutureClusterResponses", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Address> linkedList0 = new LinkedList<Address>();
      Address address0 = mock(Address.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) address0;
      objectArray0[1] = (Object) linkedList0;
      objectArray0[2] = (Object) linkedList0;
      linkedList0.toArray(objectArray0);
      linkedList0.add(address0);
      Address address1 = mock(Address.class, new ViolatedAssumptionAnswer());
      linkedList0.offerFirst(address1);
      FutureClusterResponses futureClusterResponses0 = new FutureClusterResponses(linkedList0);
      futureClusterResponses0.cancel(true);
      linkedList0.parallelStream();
      futureClusterResponses0.cancel(true);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      // Undeclared exception!
      try { 
        futureClusterResponses0.get(1271L, timeUnit0);
        fail("Expecting exception: CancellationException");
      
      } catch(CancellationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.cluster.FutureClusterResponses", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Address> linkedList0 = new LinkedList<Address>();
      Address address0 = mock(Address.class, new ViolatedAssumptionAnswer());
      linkedList0.add(address0);
      FutureClusterResponses futureClusterResponses0 = new FutureClusterResponses(linkedList0);
      futureClusterResponses0.cancel(true);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      // Undeclared exception!
      try { 
        futureClusterResponses0.get((-793L), timeUnit0);
        fail("Expecting exception: CancellationException");
      
      } catch(CancellationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.cluster.FutureClusterResponses", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FutureClusterResponses futureClusterResponses0 = null;
      try {
        futureClusterResponses0 = new FutureClusterResponses((List<Address>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.cluster.FutureClusterResponses", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Address> linkedList0 = new LinkedList<Address>();
      FutureClusterResponses futureClusterResponses0 = new FutureClusterResponses(linkedList0);
      ClusterNodeResponses clusterNodeResponses0 = futureClusterResponses0.get();
      assertEquals(0, clusterNodeResponses0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Address> linkedList0 = new LinkedList<Address>();
      Address address0 = mock(Address.class, new ViolatedAssumptionAnswer());
      linkedList0.add(address0);
      FutureClusterResponses futureClusterResponses0 = new FutureClusterResponses(linkedList0);
      Address address1 = mock(Address.class, new ViolatedAssumptionAnswer());
      linkedList0.add(address1);
      futureClusterResponses0.isDone();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      try { 
        futureClusterResponses0.get((-2032L), timeUnit0);
        fail("Expecting exception: TimeoutException");
      
      } catch(TimeoutException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.cluster.FutureClusterResponses", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Address> linkedList0 = new LinkedList<Address>();
      FutureClusterResponses futureClusterResponses0 = new FutureClusterResponses(linkedList0);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ClusterNodeResponses clusterNodeResponses0 = futureClusterResponses0.get(2676L, timeUnit0);
      Address address0 = mock(Address.class, new ViolatedAssumptionAnswer());
      linkedList0.add(address0);
      futureClusterResponses0.cancel(true);
      futureClusterResponses0.cancel(true);
      futureClusterResponses0.cancel(false);
      Address address1 = mock(Address.class, new ViolatedAssumptionAnswer());
      futureClusterResponses0.expectsReply(address1);
      futureClusterResponses0.isDone();
      ClusterNodeResponses clusterNodeResponses1 = futureClusterResponses0.getPartialResults();
      Address address2 = mock(Address.class, new ViolatedAssumptionAnswer());
      futureClusterResponses0.addExpectedReplyAddress(address2);
      futureClusterResponses0.getPartialResults();
      ClusterNodeResponse clusterNodeResponse0 = new ClusterNodeResponse();
      clusterNodeResponses1.addClusterResponse(clusterNodeResponse0);
      Address address3 = mock(Address.class, new ViolatedAssumptionAnswer());
      linkedList0.add(address3);
      String string0 = ";[f)|)|T1%&Lm";
      ClusterNode clusterNode0 = new ClusterNode(";[f)|)|T1%&Lm");
      clusterNodeResponses1.getClusterResponse(clusterNode0);
      // Undeclared exception!
      try { 
        clusterNodeResponses0.addClusterResponse((ClusterNodeResponse) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.cluster.ClusterNodeResponses", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Address> linkedList0 = new LinkedList<Address>();
      FutureClusterResponses futureClusterResponses0 = new FutureClusterResponses(linkedList0);
      ClusterNodeResponses clusterNodeResponses0 = ClusterNodeResponses.EMPTY_CLUSTER_NODE_RESPONSES;
      String string0 = "1]fxx";
      clusterNodeResponses0.getClusterResponses();
      ClusterNode clusterNode0 = new ClusterNode("@Pt:tc?WE");
      clusterNodeResponses0.getClusterResponse(clusterNode0);
      // Undeclared exception!
      try { 
        clusterNodeResponses0.addClusterResponse((ClusterNodeResponse) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.cluster.ClusterNodeResponses", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Address> linkedList0 = new LinkedList<Address>();
      FutureClusterResponses futureClusterResponses0 = new FutureClusterResponses(linkedList0);
      ClusterNodeResponses clusterNodeResponses0 = new ClusterNodeResponses();
      String string0 = "";
      ClusterNode clusterNode0 = new ClusterNode("");
      futureClusterResponses0.isDone();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      futureClusterResponses0.get(0L, timeUnit0);
      Address address0 = mock(Address.class, new ViolatedAssumptionAnswer());
      futureClusterResponses0.addExpectedReplyAddress(address0);
      clusterNodeResponses0.getClusterResponse(clusterNode0);
      // Undeclared exception!
      try { 
        futureClusterResponses0.addClusterNodeResponse((ClusterNodeResponse) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.cluster.ClusterNodeResponses", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Address> linkedList0 = new LinkedList<Address>();
      linkedList0.listIterator();
      FutureClusterResponses futureClusterResponses0 = new FutureClusterResponses(linkedList0);
      ClusterNodeResponse clusterNodeResponse0 = new ClusterNodeResponse();
      clusterNodeResponse0.setUuid("");
      futureClusterResponses0.addClusterNodeResponse(clusterNodeResponse0);
      Address address0 = mock(Address.class, new ViolatedAssumptionAnswer());
      futureClusterResponses0.addExpectedReplyAddress(address0);
      Address address1 = mock(Address.class, new ViolatedAssumptionAnswer());
      linkedList0.add(address1);
      futureClusterResponses0.isDone();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      futureClusterResponses0.get(2762L, timeUnit0);
      futureClusterResponses0.isCancelled();
      boolean boolean0 = futureClusterResponses0.isDone();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Address> linkedList0 = new LinkedList<Address>();
      FutureClusterResponses futureClusterResponses0 = new FutureClusterResponses(linkedList0);
      boolean boolean0 = futureClusterResponses0.isDone();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Address> linkedList0 = new LinkedList<Address>();
      Address address0 = mock(Address.class, new ViolatedAssumptionAnswer());
      linkedList0.add(address0);
      FutureClusterResponses futureClusterResponses0 = new FutureClusterResponses(linkedList0);
      Address address1 = mock(Address.class, new ViolatedAssumptionAnswer());
      futureClusterResponses0.isDone();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      ClusterNodeResponse clusterNodeResponse0 = new ClusterNodeResponse();
      futureClusterResponses0.addClusterNodeResponse(clusterNodeResponse0);
      futureClusterResponses0.addClusterNodeResponse(clusterNodeResponse0);
      futureClusterResponses0.isDone();
      futureClusterResponses0.expectsReply(address1);
      futureClusterResponses0.get();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      futureClusterResponses0.get(973L, timeUnit0);
      futureClusterResponses0.isCancelled();
      futureClusterResponses0.expectsReply((Address) null);
      futureClusterResponses0.getPartialResults();
      futureClusterResponses0.addExpectedReplyAddress((Address) null);
      futureClusterResponses0.isCancelled();
      ClusterNodeResponses clusterNodeResponses0 = futureClusterResponses0.get();
      assertEquals(1, clusterNodeResponses0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Address> linkedList0 = new LinkedList<Address>();
      FutureClusterResponses futureClusterResponses0 = new FutureClusterResponses(linkedList0);
      boolean boolean0 = futureClusterResponses0.isCancelled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Address> linkedList0 = new LinkedList<Address>();
      FutureClusterResponses futureClusterResponses0 = new FutureClusterResponses(linkedList0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) futureClusterResponses0;
      objectArray0[1] = (Object) futureClusterResponses0;
      objectArray0[2] = (Object) linkedList0;
      objectArray0[3] = (Object) linkedList0;
      boolean boolean0 = true;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ClusterNodeResponses clusterNodeResponses0 = futureClusterResponses0.get(351L, timeUnit0);
      ClusterNode clusterNode0 = new ClusterNode("^t]MgYBh");
      clusterNodeResponses0.getClusterResponse(clusterNode0);
      // Undeclared exception!
      try { 
        futureClusterResponses0.addClusterNodeResponse((ClusterNodeResponse) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.cluster.ClusterNodeResponses", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Address> linkedList0 = new LinkedList<Address>();
      FutureClusterResponses futureClusterResponses0 = new FutureClusterResponses(linkedList0);
      Address address0 = mock(Address.class, new ViolatedAssumptionAnswer());
      futureClusterResponses0.addExpectedReplyAddress(address0);
      boolean boolean0 = futureClusterResponses0.cancel(false);
      assertFalse(boolean0);
      
      futureClusterResponses0.isDone();
      boolean boolean1 = futureClusterResponses0.cancel(false);
      assertFalse(boolean1);
  }
}
