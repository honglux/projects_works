/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 08 23:43:22 GMT 2017
 */

package com.liferay.portal.kernel.cluster;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.liferay.portal.kernel.cluster.ClusterEvent;
import com.liferay.portal.kernel.cluster.ClusterEventType;
import com.liferay.portal.kernel.cluster.ClusterNode;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClusterEvent_ESTest extends ClusterEvent_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ClusterEventType clusterEventType0 = ClusterEventType.DEPART;
      ClusterEvent clusterEvent0 = new ClusterEvent(clusterEventType0);
      List<ClusterNode> list0 = clusterEvent0.getClusterNodes();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ClusterEventType clusterEventType0 = ClusterEventType.JOIN;
      ClusterEvent clusterEvent0 = new ClusterEvent(clusterEventType0);
      ClusterEventType clusterEventType1 = clusterEvent0.getClusterEventType();
      assertSame(clusterEventType1, clusterEventType0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClusterEvent.join((ClusterNode[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClusterEvent.depart((ClusterNode[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ClusterEventType clusterEventType0 = ClusterEventType.DEPART;
      ClusterNode[] clusterNodeArray0 = new ClusterNode[0];
      ClusterEvent clusterEvent0 = ClusterEvent.depart(clusterNodeArray0);
      List<ClusterNode> list0 = clusterEvent0.getClusterNodes();
      ClusterEvent clusterEvent1 = new ClusterEvent(clusterEventType0, list0);
      assertEquals(ClusterEventType.DEPART, clusterEvent1.getClusterEventType());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<ClusterNode> linkedList0 = new LinkedList<ClusterNode>();
      ClusterEvent clusterEvent0 = ClusterEvent.depart((List<ClusterNode>) linkedList0);
      List<ClusterNode> list0 = clusterEvent0.getClusterNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ClusterNode[] clusterNodeArray0 = new ClusterNode[0];
      ClusterEvent clusterEvent0 = ClusterEvent.join(clusterNodeArray0);
      assertEquals(ClusterEventType.JOIN, clusterEvent0.getClusterEventType());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ClusterNode[] clusterNodeArray0 = new ClusterNode[0];
      ClusterEvent clusterEvent0 = ClusterEvent.depart(clusterNodeArray0);
      List<ClusterNode> list0 = clusterEvent0.getClusterNodes();
      clusterEvent0.setClusterNodes(list0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ClusterEvent clusterEvent0 = new ClusterEvent((ClusterEventType) null);
      clusterEvent0.getClusterEventType();
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      LinkedList<ClusterNode> linkedList0 = new LinkedList<ClusterNode>();
      ClusterEvent clusterEvent0 = ClusterEvent.join((List<ClusterNode>) linkedList0);
      ClusterNode clusterNode0 = new ClusterNode("AI%om'wQ^S/6");
      linkedList0.add(clusterNode0);
      List<ClusterNode> list0 = clusterEvent0.getClusterNodes();
      assertFalse(list0.isEmpty());
  }
}
