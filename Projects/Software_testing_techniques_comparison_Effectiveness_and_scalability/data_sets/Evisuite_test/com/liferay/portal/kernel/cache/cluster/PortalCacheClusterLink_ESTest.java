/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 08 23:24:15 GMT 2017
 */

package com.liferay.portal.kernel.cache.cluster;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.liferay.portal.kernel.cache.cluster.PortalCacheClusterChannel;
import com.liferay.portal.kernel.cache.cluster.PortalCacheClusterChannelFactory;
import com.liferay.portal.kernel.cache.cluster.PortalCacheClusterEvent;
import com.liferay.portal.kernel.cache.cluster.PortalCacheClusterEventType;
import com.liferay.portal.kernel.cache.cluster.PortalCacheClusterLink;
import com.liferay.portal.kernel.cache.cluster.UniformPortalCacheClusterChannelSelector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PortalCacheClusterLink_ESTest extends PortalCacheClusterLink_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PortalCacheClusterLink portalCacheClusterLink0 = new PortalCacheClusterLink();
      PortalCacheClusterChannelFactory portalCacheClusterChannelFactory0 = mock(PortalCacheClusterChannelFactory.class, new ViolatedAssumptionAnswer());
      doReturn((PortalCacheClusterChannel) null, (PortalCacheClusterChannel) null, (PortalCacheClusterChannel) null, (PortalCacheClusterChannel) null, (PortalCacheClusterChannel) null).when(portalCacheClusterChannelFactory0).createPortalCacheClusterChannel();
      portalCacheClusterLink0.setPortalCacheClusterChannelFactory(portalCacheClusterChannelFactory0);
      portalCacheClusterLink0.afterPropertiesSet();
      long long0 = portalCacheClusterLink0.getSubmittedEventNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PortalCacheClusterLink portalCacheClusterLink0 = new PortalCacheClusterLink();
      PortalCacheClusterChannel portalCacheClusterChannel0 = mock(PortalCacheClusterChannel.class, new ViolatedAssumptionAnswer());
      PortalCacheClusterChannel portalCacheClusterChannel1 = mock(PortalCacheClusterChannel.class, new ViolatedAssumptionAnswer());
      PortalCacheClusterChannelFactory portalCacheClusterChannelFactory0 = mock(PortalCacheClusterChannelFactory.class, new ViolatedAssumptionAnswer());
      doReturn(portalCacheClusterChannel0, portalCacheClusterChannel0, portalCacheClusterChannel0, portalCacheClusterChannel0, portalCacheClusterChannel1).when(portalCacheClusterChannelFactory0).createPortalCacheClusterChannel();
      portalCacheClusterLink0.setPortalCacheClusterChannelFactory(portalCacheClusterChannelFactory0);
      portalCacheClusterLink0.afterPropertiesSet();
      PortalCacheClusterEventType portalCacheClusterEventType0 = PortalCacheClusterEventType.EVICTED;
      PortalCacheClusterEvent portalCacheClusterEvent0 = new PortalCacheClusterEvent("V~", "V~", portalCacheClusterEventType0);
      portalCacheClusterLink0.sendEvent(portalCacheClusterEvent0);
      long long0 = portalCacheClusterLink0.getSubmittedEventNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PortalCacheClusterLink portalCacheClusterLink0 = new PortalCacheClusterLink();
      portalCacheClusterLink0.setChannelNumber(0);
      portalCacheClusterLink0.afterPropertiesSet();
      PortalCacheClusterEventType portalCacheClusterEventType0 = PortalCacheClusterEventType.REMOVEALL;
      PortalCacheClusterEvent portalCacheClusterEvent0 = new PortalCacheClusterEvent("", "", portalCacheClusterEventType0);
      // Undeclared exception!
      try { 
        portalCacheClusterLink0.sendEvent(portalCacheClusterEvent0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.liferay.portal.kernel.cache.cluster.UniformPortalCacheClusterChannelSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PortalCacheClusterLink portalCacheClusterLink0 = new PortalCacheClusterLink();
      // Undeclared exception!
      try { 
        portalCacheClusterLink0.destroy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.cache.cluster.PortalCacheClusterLink", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PortalCacheClusterLink portalCacheClusterLink0 = new PortalCacheClusterLink();
      PortalCacheClusterChannel portalCacheClusterChannel0 = mock(PortalCacheClusterChannel.class, new ViolatedAssumptionAnswer());
      PortalCacheClusterChannel portalCacheClusterChannel1 = mock(PortalCacheClusterChannel.class, new ViolatedAssumptionAnswer());
      PortalCacheClusterChannelFactory portalCacheClusterChannelFactory0 = mock(PortalCacheClusterChannelFactory.class, new ViolatedAssumptionAnswer());
      doReturn((PortalCacheClusterChannel) null, (PortalCacheClusterChannel) null, (PortalCacheClusterChannel) null, (PortalCacheClusterChannel) null, (PortalCacheClusterChannel) null).when(portalCacheClusterChannelFactory0).createPortalCacheClusterChannel();
      portalCacheClusterLink0.setPortalCacheClusterChannelFactory(portalCacheClusterChannelFactory0);
      portalCacheClusterLink0.setChannelNumber(3388);
      portalCacheClusterLink0.afterPropertiesSet();
      portalCacheClusterLink0.afterPropertiesSet();
      // Undeclared exception!
      portalCacheClusterLink0.afterPropertiesSet();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PortalCacheClusterLink portalCacheClusterLink0 = new PortalCacheClusterLink();
      // Undeclared exception!
      try { 
        portalCacheClusterLink0.afterPropertiesSet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PortalCacheClusterLink portalCacheClusterLink0 = new PortalCacheClusterLink();
      portalCacheClusterLink0.setChannelNumber((-3372));
      // Undeclared exception!
      try { 
        portalCacheClusterLink0.afterPropertiesSet();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -3372
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PortalCacheClusterLink portalCacheClusterLink0 = new PortalCacheClusterLink();
      PortalCacheClusterChannel portalCacheClusterChannel0 = mock(PortalCacheClusterChannel.class, new ViolatedAssumptionAnswer());
      PortalCacheClusterChannel portalCacheClusterChannel1 = mock(PortalCacheClusterChannel.class, new ViolatedAssumptionAnswer());
      PortalCacheClusterChannelFactory portalCacheClusterChannelFactory0 = mock(PortalCacheClusterChannelFactory.class, new ViolatedAssumptionAnswer());
      doReturn(portalCacheClusterChannel0, portalCacheClusterChannel0, portalCacheClusterChannel0, portalCacheClusterChannel0, portalCacheClusterChannel1).when(portalCacheClusterChannelFactory0).createPortalCacheClusterChannel();
      portalCacheClusterLink0.setPortalCacheClusterChannelFactory(portalCacheClusterChannelFactory0);
      portalCacheClusterLink0.afterPropertiesSet();
      portalCacheClusterLink0.destroy();
      assertEquals(0L, portalCacheClusterLink0.getSubmittedEventNumber());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PortalCacheClusterLink portalCacheClusterLink0 = new PortalCacheClusterLink();
      // Undeclared exception!
      try { 
        portalCacheClusterLink0.getSubmittedEventNumber();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.cache.cluster.PortalCacheClusterLink", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PortalCacheClusterLink portalCacheClusterLink0 = new PortalCacheClusterLink();
      UniformPortalCacheClusterChannelSelector uniformPortalCacheClusterChannelSelector0 = new UniformPortalCacheClusterChannelSelector();
      portalCacheClusterLink0.setPortalCacheClusterChannelSelector(uniformPortalCacheClusterChannelSelector0);
      assertEquals(0L, uniformPortalCacheClusterChannelSelector0.getSelectedNumber());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PortalCacheClusterLink portalCacheClusterLink0 = new PortalCacheClusterLink();
      PortalCacheClusterEventType portalCacheClusterEventType0 = PortalCacheClusterEventType.EVICTED;
      PortalCacheClusterEvent portalCacheClusterEvent0 = new PortalCacheClusterEvent("V~", "V~", portalCacheClusterEventType0);
      // Undeclared exception!
      try { 
        portalCacheClusterLink0.sendEvent(portalCacheClusterEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.cache.cluster.PortalCacheClusterLink", e);
      }
  }
}
