/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 08 23:47:28 GMT 2017
 */

package com.liferay.portal.kernel.cluster;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.liferay.portal.kernel.cluster.ClusterNode;
import java.net.InetAddress;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClusterNode_ESTest extends ClusterNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClusterNode clusterNode0 = new ClusterNode("@?aerdPNB</Y+");
      clusterNode0.setPort(1);
      int int0 = clusterNode0.getPort();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClusterNode clusterNode0 = new ClusterNode(".,#ODSJyeY7vMGYADj");
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      clusterNode0.setInetAddress(inetAddress0);
      InetAddress inetAddress1 = clusterNode0.getInetAddress();
      assertFalse(inetAddress1.isLinkLocalAddress());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClusterNode clusterNode0 = new ClusterNode("&3]mITLD");
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      clusterNode0.setInetAddress(inetAddress0);
      InetAddress inetAddress1 = clusterNode0.getInetAddress();
      assertFalse(inetAddress1.isMCOrgLocal());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClusterNode clusterNode0 = new ClusterNode((String) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-29);
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      clusterNode0.setInetAddress(inetAddress0);
      InetAddress inetAddress1 = clusterNode0.getInetAddress();
      assertFalse(inetAddress1.isMCSiteLocal());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClusterNode clusterNode0 = new ClusterNode(".,#ODSJyeY7vMGYADj");
      clusterNode0.setHostName(".,#ODSJyeY7vMGYADj");
      String string0 = clusterNode0.getHostName();
      assertEquals(".,#ODSJyeY7vMGYADj", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClusterNode clusterNode0 = new ClusterNode((String) null);
      String string0 = clusterNode0.getClusterNodeId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClusterNode clusterNode0 = new ClusterNode("");
      String string0 = clusterNode0.getClusterNodeId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClusterNode clusterNode0 = new ClusterNode((String) null);
      // Undeclared exception!
      try { 
        clusterNode0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.cluster.ClusterNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClusterNode clusterNode0 = new ClusterNode("&3]mITLD");
      ClusterNode clusterNode1 = new ClusterNode("&3]mITLD");
      boolean boolean0 = clusterNode0.equals(clusterNode1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClusterNode clusterNode0 = new ClusterNode("V+U\u0003");
      ClusterNode clusterNode1 = new ClusterNode("");
      boolean boolean0 = clusterNode0.equals(clusterNode1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClusterNode clusterNode0 = new ClusterNode("");
      boolean boolean0 = clusterNode0.equals(clusterNode0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClusterNode clusterNode0 = new ClusterNode((String) null);
      boolean boolean0 = clusterNode0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClusterNode clusterNode0 = new ClusterNode((String) null);
      InetAddress inetAddress0 = clusterNode0.getInetAddress();
      assertNull(inetAddress0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClusterNode clusterNode0 = new ClusterNode(".,#ODSJyeY7vMGYADj");
      String string0 = clusterNode0.getHostName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClusterNode clusterNode0 = new ClusterNode("M}*\"0");
      String string0 = clusterNode0.getClusterNodeId();
      assertEquals("M}*\"0", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClusterNode clusterNode0 = new ClusterNode(".,#ODSJyeY7vMGYADj");
      clusterNode0.setPort((-722));
      int int0 = clusterNode0.getPort();
      assertEquals((-722), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClusterNode clusterNode0 = new ClusterNode("@?aerdPNB</Y+");
      int int0 = clusterNode0.getPort();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClusterNode clusterNode0 = new ClusterNode(".,#ODSJyeY7vMGYADj");
      clusterNode0.hashCode();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClusterNode clusterNode0 = new ClusterNode((String) null);
      String string0 = clusterNode0.toString();
      assertEquals("{clusterNodeId=null, hostName=null, inetAddress=null, port=0}", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClusterNode clusterNode0 = new ClusterNode("M}*\"0");
      clusterNode0.setHostName("");
      String string0 = clusterNode0.getHostName();
      assertEquals("", string0);
  }
}
