/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 09 00:02:59 GMT 2017
 */

package com.liferay.portal.kernel.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.liferay.portal.kernel.concurrent.ConcurrentLRUCache;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConcurrentLRUCache_ESTest extends ConcurrentLRUCache_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConcurrentLRUCache<Object, Object> concurrentLRUCache0 = new ConcurrentLRUCache<Object, Object>(1558);
      ConcurrentLRUCache<Object, String> concurrentLRUCache1 = new ConcurrentLRUCache<Object, String>((-657));
      // Undeclared exception!
      try { 
        concurrentLRUCache1.put(concurrentLRUCache0, "]uxM1P_j]->QyAfC5I\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.concurrent.ConcurrentLRUCache$Entry", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConcurrentLRUCache<String, String> concurrentLRUCache0 = new ConcurrentLRUCache<String, String>(2997);
      concurrentLRUCache0.put("R", (String) null);
      concurrentLRUCache0.size();
      assertEquals(1L, concurrentLRUCache0.putCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConcurrentLRUCache<String, Integer> concurrentLRUCache0 = new ConcurrentLRUCache<String, Integer>(2288);
      Integer integer0 = new Integer(2288);
      concurrentLRUCache0.put(", size=", integer0);
      long long0 = concurrentLRUCache0.putCount();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConcurrentLRUCache<String, Object> concurrentLRUCache0 = new ConcurrentLRUCache<String, Object>(1);
      concurrentLRUCache0.get("");
      long long0 = concurrentLRUCache0.missCount();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConcurrentLRUCache<Object, Object> concurrentLRUCache0 = new ConcurrentLRUCache<Object, Object>(0);
      int int0 = concurrentLRUCache0.maxSize();
      assertEquals(0L, concurrentLRUCache0.hitCount());
      assertEquals(0L, concurrentLRUCache0.putCount());
      assertEquals(0L, concurrentLRUCache0.missCount());
      assertEquals(0, int0);
      assertEquals(0L, concurrentLRUCache0.evictCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConcurrentLRUCache<Object, Object> concurrentLRUCache0 = new ConcurrentLRUCache<Object, Object>(73);
      int int0 = concurrentLRUCache0.maxSize();
      assertEquals(73, int0);
      assertEquals(0L, concurrentLRUCache0.putCount());
      assertEquals(0L, concurrentLRUCache0.evictCount());
      assertEquals(0L, concurrentLRUCache0.missCount());
      assertEquals(0L, concurrentLRUCache0.hitCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConcurrentLRUCache<String, String> concurrentLRUCache0 = new ConcurrentLRUCache<String, String>(749);
      concurrentLRUCache0.put("F<B", (String) null);
      concurrentLRUCache0.put(", missCunt=", (String) null);
      concurrentLRUCache0.put("F<B", (String) null);
      assertEquals(2, concurrentLRUCache0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConcurrentLRUCache<String, String> concurrentLRUCache0 = new ConcurrentLRUCache<String, String>(749);
      concurrentLRUCache0.put("F<B", (String) null);
      concurrentLRUCache0.put("F<B", (String) null);
      assertEquals(1, concurrentLRUCache0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConcurrentLRUCache<Object, String> concurrentLRUCache0 = new ConcurrentLRUCache<Object, String>(0);
      // Undeclared exception!
      try { 
        concurrentLRUCache0.put((Object) null, "{evictCount=0, hitCount=0, maxSize=2664, missCount=0, putCount=0, size=0}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key is null
         //
         verifyException("com.liferay.portal.kernel.concurrent.ConcurrentLRUCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConcurrentLRUCache<String, Object> concurrentLRUCache0 = new ConcurrentLRUCache<String, Object>(3500);
      concurrentLRUCache0.put("", "");
      concurrentLRUCache0.put("{evictCount=0, hitCount=0, maxSize=1167, missCount=0, putCount=0, size=0}", (Object) null);
      concurrentLRUCache0.get("");
      assertEquals(2, concurrentLRUCache0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConcurrentLRUCache<String, Object> concurrentLRUCache0 = new ConcurrentLRUCache<String, Object>(3500);
      concurrentLRUCache0.put("", "");
      concurrentLRUCache0.get("");
      long long0 = concurrentLRUCache0.hitCount();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConcurrentLRUCache<Object, String> concurrentLRUCache0 = new ConcurrentLRUCache<Object, String>(1);
      long long0 = concurrentLRUCache0.evictCount();
      assertEquals(0L, long0);
      assertEquals(1, concurrentLRUCache0.maxSize());
      assertEquals(0L, concurrentLRUCache0.putCount());
      assertEquals(0L, concurrentLRUCache0.hitCount());
      assertEquals(0L, concurrentLRUCache0.missCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConcurrentLRUCache<Object, Integer> concurrentLRUCache0 = new ConcurrentLRUCache<Object, Integer>((-578));
      long long0 = concurrentLRUCache0.putCount();
      assertEquals(0L, concurrentLRUCache0.hitCount());
      assertEquals(0L, concurrentLRUCache0.missCount());
      assertEquals(0L, concurrentLRUCache0.evictCount());
      assertEquals(0L, long0);
      assertEquals((-578), concurrentLRUCache0.maxSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConcurrentLRUCache<String, String> concurrentLRUCache0 = new ConcurrentLRUCache<String, String>((-578));
      int int0 = concurrentLRUCache0.maxSize();
      assertEquals(0L, concurrentLRUCache0.evictCount());
      assertEquals(0L, concurrentLRUCache0.missCount());
      assertEquals((-578), int0);
      assertEquals(0L, concurrentLRUCache0.putCount());
      assertEquals(0L, concurrentLRUCache0.hitCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConcurrentLRUCache<Object, Object> concurrentLRUCache0 = new ConcurrentLRUCache<Object, Object>((-2882));
      concurrentLRUCache0.size();
      assertEquals(0L, concurrentLRUCache0.missCount());
      assertEquals(0L, concurrentLRUCache0.putCount());
      assertEquals(0L, concurrentLRUCache0.hitCount());
      assertEquals((-2882), concurrentLRUCache0.maxSize());
      assertEquals(0L, concurrentLRUCache0.evictCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConcurrentLRUCache<String, String> concurrentLRUCache0 = new ConcurrentLRUCache<String, String>((-578));
      long long0 = concurrentLRUCache0.hitCount();
      assertEquals((-578), concurrentLRUCache0.maxSize());
      assertEquals(0L, concurrentLRUCache0.missCount());
      assertEquals(0L, long0);
      assertEquals(0L, concurrentLRUCache0.putCount());
      assertEquals(0L, concurrentLRUCache0.evictCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConcurrentLRUCache<Integer, Object> concurrentLRUCache0 = new ConcurrentLRUCache<Integer, Object>(1167);
      String string0 = concurrentLRUCache0.toString();
      assertEquals("{evictCount=0, hitCount=0, maxSize=1167, missCount=0, putCount=0, size=0}", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConcurrentLRUCache<String, Object> concurrentLRUCache0 = new ConcurrentLRUCache<String, Object>(1);
      long long0 = concurrentLRUCache0.missCount();
      assertEquals(1, concurrentLRUCache0.maxSize());
      assertEquals(0L, concurrentLRUCache0.putCount());
      assertEquals(0L, long0);
      assertEquals(0L, concurrentLRUCache0.evictCount());
      assertEquals(0L, concurrentLRUCache0.hitCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConcurrentLRUCache<Object, String> concurrentLRUCache0 = new ConcurrentLRUCache<Object, String>(1);
      Integer integer0 = new Integer((-877));
      concurrentLRUCache0.put(integer0, "");
      concurrentLRUCache0.put("", "");
      long long0 = concurrentLRUCache0.evictCount();
      assertEquals(2L, concurrentLRUCache0.putCount());
      assertEquals(1L, long0);
  }
}
