/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 09 00:00:16 GMT 2017
 */

package com.liferay.portal.kernel.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.liferay.portal.kernel.concurrent.CoalescedPipe;
import java.util.Comparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CoalescedPipe_ESTest extends CoalescedPipe_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CoalescedPipe<String> coalescedPipe0 = new CoalescedPipe<String>();
      CoalescedPipe<Object> coalescedPipe1 = new CoalescedPipe<Object>();
      coalescedPipe1.put(coalescedPipe0);
      int int0 = coalescedPipe1.pendingCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CoalescedPipe<Object> coalescedPipe0 = new CoalescedPipe<Object>();
      Object object0 = new Object();
      coalescedPipe0.put(object0);
      coalescedPipe0.put(object0);
      assertEquals(1, coalescedPipe0.pendingCount());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CoalescedPipe<Integer> coalescedPipe0 = new CoalescedPipe<Integer>();
      Integer integer0 = new Integer((-1));
      coalescedPipe0.put(integer0);
      coalescedPipe0.takeSnapshot();
      assertEquals(1, coalescedPipe0.pendingCount());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CoalescedPipe<Integer> coalescedPipe0 = new CoalescedPipe<Integer>();
      coalescedPipe0.takeSnapshot();
      assertEquals(0L, coalescedPipe0.coalescedCount());
      assertEquals(0, coalescedPipe0.pendingCount());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      CoalescedPipe<String> coalescedPipe0 = new CoalescedPipe<String>(comparator0);
      coalescedPipe0.put("");
      coalescedPipe0.put("Bc%0\"}EIv[");
      assertEquals(1, coalescedPipe0.pendingCount());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CoalescedPipe<String> coalescedPipe0 = new CoalescedPipe<String>();
      // Undeclared exception!
      try { 
        coalescedPipe0.put((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.concurrent.CoalescedPipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CoalescedPipe<Integer> coalescedPipe0 = new CoalescedPipe<Integer>();
      Integer integer0 = new Integer((-1));
      coalescedPipe0.put(integer0);
      assertEquals(1, coalescedPipe0.pendingCount());
      
      coalescedPipe0.take();
      assertEquals(0L, coalescedPipe0.coalescedCount());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CoalescedPipe<String> coalescedPipe0 = new CoalescedPipe<String>(comparator0);
      long long0 = coalescedPipe0.coalescedCount();
      assertEquals(0, coalescedPipe0.pendingCount());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      CoalescedPipe<Integer> coalescedPipe0 = new CoalescedPipe<Integer>();
      int int0 = coalescedPipe0.pendingCount();
      assertEquals(0, int0);
      assertEquals(0L, coalescedPipe0.coalescedCount());
  }
}
