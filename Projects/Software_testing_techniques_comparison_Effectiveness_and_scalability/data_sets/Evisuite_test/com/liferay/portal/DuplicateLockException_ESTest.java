/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 08 22:43:02 GMT 2017
 */

package com.liferay.portal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import com.liferay.portal.DuplicateLockException;
import com.liferay.portal.model.Lock;
import com.liferay.portal.model.LockWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DuplicateLockException_ESTest extends DuplicateLockException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DuplicateLockException duplicateLockException0 = new DuplicateLockException((Lock) null);
      Lock lock0 = duplicateLockException0.getLock();
      assertNull(lock0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Lock lock0 = mock(Lock.class, new ViolatedAssumptionAnswer());
      LockWrapper lockWrapper0 = new LockWrapper(lock0);
      DuplicateLockException duplicateLockException0 = new DuplicateLockException(lockWrapper0);
      Lock lock1 = duplicateLockException0.getLock();
      assertSame(lock1, lockWrapper0);
      assertTrue(lock1.isExpired());
      assertFalse(lock1.isExpired());
  }
}
